name: CI

on:
  push:
    branches: ["master"]
    tags: ["medea-*"]
  pull_request:
    branches: ["master"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MEDEA_BRANCH: edge  # for E2E tests only
  RUST_BACKTRACE: 1

jobs:

  ################
  # Pull Request #
  ################

  pr:
    if: ${{ github.event_name == 'pull_request'
            && !contains(github.event.head_commit.message, '[skip ci]') }}
    needs:
      - clippy
      - crate-jason
      - dartanalyze
      - dartfmt
      - docker
      - helm-lint
      - rustdoc
      - rustfmt
      - test-e2e
      - test-flutter
      - test-unit
    runs-on: ubuntu-latest
    steps:
      - run: true




  ##########################
  # Linting and formatting #
  ##########################

  clippy:
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-')
            || !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - run: make rustup.targets

      - run: make cargo.lint

  rustfmt:
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-')
            || !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt

      - run: make cargo.fmt check=yes

  helm-lint:
    name: Lint Helm chart
    if: ${{ github.ref == 'refs/heads/master'
            || (!startsWith(github.ref, 'refs/tags/medea-')
                && !contains(github.event.head_commit.message, '[skip ci]')) }}
    strategy:
      matrix:
        chart:
          - medea-demo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v2.1

      - run: make helm.lint chart=${{ matrix.chart }}

  dartfmt:
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-jason-')
            || (!startsWith(github.ref, 'refs/tags/medea-')
                && !contains(github.event.head_commit.message, '[skip ci]')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      - run: make flutter.fmt check=yes

  dartanalyze:
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-jason-')
            || (!startsWith(github.ref, 'refs/tags/medea-')
                && !contains(github.event.head_commit.message, '[skip ci]')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      - run: make flutter

      - run: make flutter.lint




  ###########
  # Testing #
  ###########

  test-unit:
    name: Unit tests
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-')
            || !contains(github.event.head_commit.message, '[skip ci]') }}
    strategy:
      matrix:
        include:
          - crate: medea-macro
            features: ["all"]

          - crate: medea-reactive
            features: ["all"]

          - crate: medea-client-api-proto
            features: ["all"]

          - crate: medea-control-api-proto
            features: ["all"]
          - crate: medea-control-api-proto
            features: ["grpc"]
          - crate: medea-control-api-proto
            features: ["client"]
          - crate: medea-control-api-proto
            features: ["server"]
          - crate: medea-control-api-proto
            features: ["grpc", "client"]
          - crate: medea-control-api-proto
            features: ["grpc", "server"]

          - crate: medea-jason
            wasm: true
    runs-on: ubuntu-latest
    steps:
      - id: skip
        run: echo ::set-output name=no::${{
               startsWith(github.ref, format('refs/tags/{0}-', matrix.crate))
               || !startsWith(github.ref, 'refs/tags/medea-')
             }}

      - uses: actions/checkout@v3
        if: ${{ steps.skip.outputs.no }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
        if: ${{ steps.skip.outputs.no && !matrix.wasm }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
        if: ${{ steps.skip.outputs.no && matrix.wasm }}
      - uses: Swatinem/rust-cache@v1
        if: ${{ steps.skip.outputs.no
                && !contains(github.event.head_commit.message, '[fresh ci]') }}

      - name: Parse wasm-bindgen-cli version from Cargo.lock
        id: wasm-cli
        run: echo ::set-output
                  name=VERSION::$(cargo pkgid wasm-bindgen | grep -o '#.*'
                                                           | grep -o '[0-9\.]*')
        if: ${{ steps.skip.outputs.no && matrix.wasm }}
      - uses: actions-rs/install@v0.1
        with:
          crate: wasm-bindgen-cli
          version: ${{ steps.wasm-cli.outputs.VERSION }}
          use-tool-cache: true
        if: ${{ steps.skip.outputs.no && matrix.wasm }}

      - name: Chrome
        run: make test.unit crate=${{ matrix.crate }} browser=chrome
        if: ${{ steps.skip.outputs.no && matrix.crate == 'medea-jason' }}
      - name: Firefox
        run: make test.unit crate=${{ matrix.crate }} browser=firefox
        if: ${{ steps.skip.outputs.no && matrix.crate == 'medea-jason' }}

      - run: make test.unit crate=${{ matrix.crate }}
                            features=${{ join(matrix.features, ',') }}
        if: ${{ steps.skip.outputs.no && matrix.crate != 'medea-jason' }}

  test-e2e:
    name: E2E tests
    needs: ["docker"]
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-')
            || !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: test-e2e-{hash}
          restore-keys: test-e2e-
        continue-on-error: true
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - uses: actions-rs/install@v0.1
        with:
          crate: wasm-pack
          use-tool-cache: true

      - uses: actions/download-artifact@v3
        with:
          name: docker-medea-control-api-mock-${{ github.run_number }}
      - name: Unpack `medea-control-api-mock` Docker image
        run: make docker.untar from-file=image.tar

      - name: Login to Medea Docker registry
        run: docker login -u ${{ secrets.MEDEA_DOCKER_USER }}
                          -p ${{ secrets.MEDEA_DOCKER_PASS }}
                          hub.instrumentisto.com

      - name: Pull edge Medea Docker image
        run: docker pull hub.instrumentisto.com/streaming/medea:edge
        if: ${{ env.MEDEA_BRANCH == 'edge' }}
      - name: Pull review Medea Docker image
        run: docker pull hub.instrumentisto.com/streaming/medea/review:${{ env.MEDEA_BRANCH }}
        if: ${{ env.MEDEA_BRANCH != 'edge' }}

      - name: Chrome
        run: make test.e2e browser=chrome up=yes debug=no dockerized=yes
                           medea-tag=${{ env.MEDEA_BRANCH }}
                           control-tag=build-${{ github.run_number }}
      - name: Firefox
        run: make test.e2e browser=firefox up=yes debug=no dockerized=yes
                           medea-tag=${{ env.MEDEA_BRANCH }}
                           control-tag=build-${{ github.run_number }}

  test-flutter:
    name: Flutter tests
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-jason-')
            || (!startsWith(github.ref, 'refs/tags/medea-')
                && !contains(github.event.head_commit.message, '[skip ci]')) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: macos-latest
          - platform: linux
            os: ubuntu-22.04
          - platform: windows
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        if: ${{ matrix.platform != 'windows'
                && !contains(github.event.head_commit.message, '[fresh ci]') }}

      - run: make rustup.targets only=android
        if: ${{ matrix.platform == 'android' }}
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-ndk
          use-tool-cache: true
        if: ${{ matrix.platform == 'android' }}

      - uses: subosito/flutter-action@v2
      - run: flutter config --enable-linux-desktop
        if: ${{ matrix.platform == 'linux' }}
      - name: Install Flutter Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
                       cmake \
                       libgtk-3-dev liblzma-dev libpulse-dev \
                       ninja-build pkg-config xvfb
        if: ${{ matrix.platform == 'linux' }}

      - run: make cargo.build.jason platform=${{ matrix.platform }}
                                    args="--features mockable"
                                    ${{ matrix.platform == 'android'
                                        && 'targets=x86_64'
                                        || '' }}

      - name: Parse Android NDK versions
        id: ndk-version
        run: |
          echo ::set-output name=min::$(make flutter.android.version.min)
          echo ::set-output name=target::$(make flutter.android.version.compile)
        if: ${{ matrix.platform == 'android' }}
      - name: Test on min Android NDK version
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ steps.ndk-version.outputs.min }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: make test.flutter
        if: ${{ matrix.platform == 'android' }}
      - name: Test on target Android NDK version
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ steps.ndk-version.outputs.target }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: make test.flutter
        if: ${{ matrix.platform == 'android' }}

      - run: xvfb-run -a make test.flutter device=linux
        if: ${{ matrix.platform == 'linux' }}

      - run: make test.flutter device=windows
        if: ${{ matrix.platform == 'windows' }}

  ############
  # Building #
  ############

  crate-jason:
    name: Build medea-jason
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-jason-')
            || (!startsWith(github.ref, 'refs/tags/medea-')
                && !contains(github.event.head_commit.message, '[skip ci]')) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu
          - platform: linux
            os: ubuntu
          - platform: web
            os: ubuntu
          - platform: windows
            os: windows
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      - run: make rustup.targets only=android
        if: ${{ matrix.platform == 'android' }}
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-ndk
          use-tool-cache: true
        if: ${{ matrix.platform == 'android' }}

      - run: make rustup.targets only=web
        if: ${{ matrix.platform == 'web' }}
      - uses: jetli/wasm-pack-action@v0.3.0
        if: ${{ matrix.platform == 'web' }}

      - uses: dart-lang/setup-dart@v1
        if: ${{ matrix.platform == 'windows' }}

      - run: make cargo.build.jason platform=${{ matrix.platform }}
                                    dockerized=no debug=yes

  rustdoc:
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-')
            || !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        if: ${{ !contains(github.event.head_commit.message, '[fresh ci]') }}

      # Run all task sequentially to not flood the jobs list.
      - run: make docs.rust crate=medea-macro open=no
        if: ${{ startsWith(github.ref, 'refs/tags/medea-macro-')
                || !startsWith(github.ref, 'refs/tags/medea-') }}

      - run: make docs.rust crate=medea-reactive open=no
        if: ${{ startsWith(github.ref, 'refs/tags/medea-reactive-')
                || !startsWith(github.ref, 'refs/tags/medea-') }}

      - run: make docs.rust crate=medea-client-api-proto open=no
        if: ${{ startsWith(github.ref, 'refs/tags/medea-client-api-proto-')
                || !startsWith(github.ref, 'refs/tags/medea-') }}

      - run: make docs.rust crate=medea-control-api-proto open=no
        if: ${{ startsWith(github.ref, 'refs/tags/medea-control-api-proto-')
                || !startsWith(github.ref, 'refs/tags/medea-') }}

      - run: make docs.rust crate=medea-jason open=no
        if: ${{ startsWith(github.ref, 'refs/tags/medea-jason-')
                || !startsWith(github.ref, 'refs/tags/medea-') }}

  docker:
    name: Docker image
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-')
            || !contains(github.event.head_commit.message, '[skip ci]') }}
    strategy:
      matrix:
        include:
          - image: medea-control-api-mock
            cache: ${{ github.ref != 'refs/heads/master'
                       && !startsWith(github.ref, 'refs/tags/medea-control-api-mock-')
                       && !contains(github.event.head_commit.message, '[fresh ci]') }}
            export: true  # required for E2E tests
            if: true

          - image: medea-demo
            cache: ${{ github.ref != 'refs/heads/master'
                       && !startsWith(github.ref, 'refs/tags/medea-demo-')
                       && !contains(github.event.head_commit.message, '[fresh ci]') }}
            export: ${{ startsWith(github.ref, 'refs/tags/medea-demo-') }}
            if: ${{ startsWith(github.ref, 'refs/tags/medea-demo-')
                    || !startsWith(github.ref, 'refs/tags/medea-') }}
          - image: medea-demo-edge
            cache: false  # temporary disable caching due to CI issues
            #cache: ${{ github.ref != 'refs/heads/master'
            #           && !contains(github.event.head_commit.message, '[fresh ci]') }}
            export: ${{ github.ref == 'refs/heads/master' }}
            if: ${{ !startsWith(github.ref, 'refs/tags/medea-') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.if }}
      - uses: docker/setup-buildx-action@v2
        if: ${{ matrix.if }}

      - run: make docker.build debug=no no-cache=yes
                  image=${{ matrix.image }} tag=build-${{ github.run_number }}
        if: ${{ matrix.if && !matrix.cache }}

      - uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: docker-${{ matrix.image }}-build-{hash}
          restore-keys: docker-${{ matrix.image }}-build-
        continue-on-error: true
        timeout-minutes: 10
        if: ${{ matrix.if && matrix.cache }}
      - run: make docker.build debug=yes no-cache=no
                  image=${{ matrix.image }} tag=build-${{ github.run_number }}
        if: ${{ matrix.if && matrix.cache }}

      - run: make docker.tar to-file=image.tar
                  image=${{ matrix.image }} tags=build-${{ github.run_number }}
        if: ${{ matrix.if && matrix.export }}
      - uses: actions/upload-artifact@v3
        with:
          name: docker-${{ matrix.image }}-${{ github.run_number }}
          path: image.tar
          retention-days: 1
        if: ${{ matrix.if && matrix.export }}




  #############
  # Releasing #
  #############

  release-github:
    name: Release on GitHub
    needs: ["clippy", "rustfmt", "rustdoc", "test-e2e", "test-unit"]
    if: ${{ startsWith(github.ref, 'refs/tags/medea-') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Parse crate/package name and version
        id: release
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.ref }}
          regex: '^refs/tags/(medea[a-z-]*)-([0-9]+\.[0-9]+\.[0-9]+-?.*)$'

      - name: Verify release version matches Cargo manifest
        run: >-
          test "${{ steps.release.outputs.group2 }}" \
               == $(make cargo.version crate=${{ steps.release.outputs.group1 }})
        if: ${{ !startsWith(github.ref, 'refs/tags/medea-demo-') }}
      - name: Verify release version matches Yarn manifest
        run: >-
          test "${{ steps.release.outputs.group2 }}" \
               == $(make yarn.version pkg=${{ steps.release.outputs.group1 }})
        if: ${{ startsWith(github.ref, 'refs/tags/medea-demo-') }}

      - name: Parse CHANGELOG link
        id: changelog
        run: echo ::set-output
                  name=LINK::$(make cargo.changelog.link
                                    crate=${{ steps.release.outputs.group1 }}
                                    ver=${{ steps.release.outputs.group2 }})

      - uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ steps.release.outputs.group1 }}-${{ steps.release.outputs.group2 }}
          body: |
            [API docs](https://docs.rs/${{ steps.release.outputs.group1 }}/${{ steps.release.outputs.group2 }})
            [Changelog](${{ steps.changelog.outputs.LINK }})
          prerelease: ${{ contains(steps.release.outputs.group2, '-') }}

  release-cargo:
    name: Release on crates.io
    needs: ["release-github"]
    if: ${{ startsWith(github.ref, 'refs/tags/medea-')
            && !startsWith(github.ref, 'refs/tags/medea-control-api-mock-')
            && !startsWith(github.ref, 'refs/tags/medea-demo-') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Parse crate name and version
        id: crate
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.ref }}
          regex: '^refs/tags/(medea[a-z-]*)-([0-9]+\.[0-9]+\.[0-9]+-?.*)$'

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Release ${{ steps.crate.outputs.group2 }} version
              of '${{ steps.crate.outputs.group1 }}' crate
        env:
          CARGO_TOKEN: ${{ secrets.CRATESIO_TOKEN }}
        run: make release.crates crate=${{ steps.crate.outputs.group1 }}
                                 publish=yes

  release-npm:
    name: Release on NPM
    needs: ["release-github"]
    if: ${{ startsWith(github.ref, 'refs/tags/medea-jason-') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Parse package name and version
        id: package
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.ref }}
          regex: '^refs/tags/(medea[a-z-]*)-([0-9]+\.[0-9]+\.[0-9]+(-.+)?)$'

      - uses: actions/setup-node@v3
        with:
          node-version: "17"
          registry-url: https://registry.npmjs.org

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
      - uses: jetli/wasm-pack-action@v0.3.0

      - name: Release ${{ steps.package.outputs.group2 }} version
              of '${{ steps.package.outputs.group1 }}' package
        run: make release.npm crate=${{ steps.package.outputs.group1 }}
                              publish=yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_TOKEN }}

  release-helm:
    name: Release Helm chart
    needs: ["helm-lint"]
    if: ${{ github.ref == 'refs/heads/master' }}
    strategy:
      matrix:
        chart:
          - medea-demo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: trilom/file-changes-action@v1.2.4
        id: changed
      - id: chart
        run: echo ::set-output
                  name=MANIFEST::$(make helm.dir
                                        chart=${{ matrix.chart }})/Chart.yaml

      - uses: azure/setup-helm@v2.1
        if: ${{ contains(steps.changed.outputs.files,
                         steps.chart.outputs.MANIFEST) }}

      - name: Prepare Git author for push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
        if: ${{ contains(steps.changed.outputs.files,
                         steps.chart.outputs.MANIFEST) }}

      - run: make helm.package.release chart=${{ matrix.chart }} build=yes
        if: ${{ contains(steps.changed.outputs.files,
                         steps.chart.outputs.MANIFEST) }}

  release-docker:
    name: Release Docker image
    needs: ["docker"]
    if: ${{ github.ref == 'refs/heads/master'
            || startsWith(github.ref, 'refs/tags/medea-') }}
    strategy:
      matrix:
        include:
          - image: medea-control-api-mock
            tags: latest,@versions
            repos: instrumentisto,ghcr.io/instrumentisto,quay.io/instrumentisto
            readme_file: mock/control-api/README.md
            if: ${{ startsWith(github.ref, 'refs/tags/medea-control-api-mock-') }}
          - image: medea-control-api-mock
            tags: edge
            repos: instrumentisto,ghcr.io/instrumentisto,quay.io/instrumentisto
            readme_file: mock/control-api/README.md
            if: ${{ github.ref == 'refs/heads/master' }}

          - image: medea-demo
            tags: latest,@versions
            repos: instrumentisto,ghcr.io/instrumentisto,quay.io/instrumentisto
            readme_file: demo/README.md
            if: ${{ startsWith(github.ref, 'refs/tags/medea-demo-') }}
          - image: medea-demo-edge
            tags: edge
            repos: instrumentisto,ghcr.io/instrumentisto,quay.io/instrumentisto
            readme_file: demo/README.md
            if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.if }}
      - uses: docker/setup-buildx-action@v2
        if: ${{ matrix.if }}

      - uses: actions/download-artifact@v3
        with:
          name: docker-${{ matrix.image }}-${{ github.run_number }}
        if: ${{ matrix.if }}
      - run: make docker.untar from-file=image.tar
        if: ${{ matrix.if }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.if && contains(matrix.repos, 'ghcr.io') }}
      - name: Login to Quay.io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: instrumentisto+bot
          password: ${{ secrets.QUAYIO_ROBOT_TOKEN }}
        if: ${{ matrix.if && contains(matrix.repos, 'quay.io') }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: instrumentistobot
          password: ${{ secrets.DOCKERHUB_BOT_PASS }}
        if: ${{ matrix.if }}

      - name: Parse semver versions
        id: parsed
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.ref }}
          regex: '^refs/tags/medea[a-z-]*-((([0-9]+)\.[0-9]+)\.[0-9]+(-.+)?)$'
        if: ${{ matrix.if && contains(matrix.tags, '@versions')
                && startsWith(github.ref, 'refs/tags/medea-') }}
      - name: Form Docker version tags
        id: versions
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let versions = '${{ steps.parsed.outputs.group1 }}';
            if ('${{ steps.parsed.outputs.group4 }}' === '') {
              versions += ',${{ steps.parsed.outputs.group2 }}';
              if ('${{ steps.parsed.outputs.group3 }}' !== '0') {
                versions += ',${{ steps.parsed.outputs.group3 }}';
              }
            }
            return versions;
        if: ${{ matrix.if && contains(matrix.tags, '@versions')
                && startsWith(github.ref, 'refs/tags/medea-') }}
      - name: Prepare final image tags
        id: tags
        uses: bluwy/substitute-string-action@v1
        with:
          _input-text: ${{ matrix.tags }}
          "@versions": ${{ steps.versions.outputs.result }}
        if: ${{ matrix.if }}

      - run: make docker.tag tags=${{ steps.tags.outputs.result }}
                  image=${{ matrix.image }} of=build-${{ github.run_number }}
                  repos=${{ matrix.repos }}
        if: ${{ matrix.if }}
      - run: make docker.push tags=${{ steps.tags.outputs.result }}
                  image=${{ matrix.image }} repos=${{ matrix.repos }}
        if: ${{ matrix.if }}

      - name: Prepare real image name
        id: image
        uses: bluwy/substitute-string-action@v1
        with:
          _input-text: ${{ matrix.image }}
          -edge: ""
        if: ${{ matrix.if }}
      # On GitHub Container Registry README is automatically updated on pushes.
      - name: Update README on Quay.io
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_APIKEY: ${{ secrets.QUAYIO_API_TOKEN }}
        with:
          provider: quay
          destination_container_repo: >-
            quay.io/instrumentisto/${{ steps.image.outputs.result }}
          readme_file: ${{ matrix.readme_file }}
        if: ${{ matrix.if && contains(matrix.repos, 'quay.io') }}
      - name: Update README on Docker Hub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: instrumentistobot
          DOCKER_PASS: ${{ secrets.DOCKERHUB_BOT_PASS }}
        with:
          provider: dockerhub
          destination_container_repo: >-
            instrumentisto/${{ steps.image.outputs.result }}
          readme_file: ${{ matrix.readme_file }}
        if: ${{ matrix.if }}
