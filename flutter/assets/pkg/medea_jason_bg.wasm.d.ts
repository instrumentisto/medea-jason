/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function roomhandle_join(a: number, b: number, c: number): number;
export function roomhandle_on_new_connection(a: number, b: number): void;
export function roomhandle_on_close(a: number, b: number): void;
export function roomhandle_on_local_track(a: number, b: number): void;
export function roomhandle_on_failed_local_media(a: number, b: number): void;
export function roomhandle_on_connection_loss(a: number, b: number): void;
export function roomhandle_set_local_media_settings(a: number, b: number, c: number, d: number): number;
export function roomhandle_mute_audio(a: number): number;
export function roomhandle_unmute_audio(a: number): number;
export function roomhandle_mute_video(a: number, b: number): number;
export function roomhandle_unmute_video(a: number, b: number): number;
export function roomhandle_disable_audio(a: number): number;
export function roomhandle_enable_audio(a: number): number;
export function roomhandle_disable_video(a: number, b: number): number;
export function roomhandle_enable_video(a: number, b: number): number;
export function roomhandle_disable_remote_audio(a: number): number;
export function roomhandle_disable_remote_video(a: number): number;
export function roomhandle_enable_remote_audio(a: number): number;
export function roomhandle_enable_remote_video(a: number): number;
export function __wbg_roomhandle_free(a: number): void;
export function remotemediatrack_get_track(a: number): number;
export function remotemediatrack_enabled(a: number): number;
export function remotemediatrack_muted(a: number): number;
export function remotemediatrack_on_enabled(a: number, b: number): void;
export function remotemediatrack_on_disabled(a: number, b: number): void;
export function remotemediatrack_on_muted(a: number, b: number): void;
export function remotemediatrack_on_unmuted(a: number, b: number): void;
export function remotemediatrack_on_stopped(a: number, b: number): void;
export function remotemediatrack_kind(a: number): number;
export function remotemediatrack_media_source_kind(a: number): number;
export function __wbg_remotemediatrack_free(a: number): void;
export function jason_new(): number;
export function jason_init_room(a: number): number;
export function jason_media_manager(a: number): number;
export function jason_close_room(a: number, b: number): void;
export function jason_dispose(a: number): void;
export function __wbg_jason_free(a: number): void;
export function constraintsupdateexception_name(a: number, b: number): void;
export function constraintsupdateexception_recover_reason(a: number): number;
export function constraintsupdateexception_recover_fail_reasons(a: number): number;
export function constraintsupdateexception_error(a: number): number;
export function __wbg_constraintsupdateexception_free(a: number): void;
export function roomclosereason_reason(a: number, b: number): void;
export function roomclosereason_is_closed_by_server(a: number): number;
export function roomclosereason_is_err(a: number): number;
export function __wbg_roomclosereason_free(a: number): void;
export function inputdeviceinfo_device_id(a: number, b: number): void;
export function inputdeviceinfo_kind(a: number): number;
export function inputdeviceinfo_label(a: number, b: number): void;
export function inputdeviceinfo_group_id(a: number, b: number): void;
export function __wbg_inputdeviceinfo_free(a: number): void;
export function jasonerror_name(a: number, b: number): void;
export function jasonerror_message(a: number, b: number): void;
export function jasonerror_trace(a: number, b: number): void;
export function jasonerror_source(a: number): number;
export function __wbg_jasonerror_free(a: number): void;
export function reconnecthandle_reconnect_with_delay(a: number, b: number): number;
export function reconnecthandle_reconnect_with_backoff(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_reconnecthandle_free(a: number): void;
export function connectionhandle_on_close(a: number, b: number): void;
export function connectionhandle_get_remote_member_id(a: number, b: number): void;
export function connectionhandle_on_remote_track_added(a: number, b: number): void;
export function connectionhandle_on_quality_score_update(a: number, b: number): void;
export function __wbg_connectionhandle_free(a: number): void;
export function localmediatrack_get_track(a: number): number;
export function localmediatrack_kind(a: number): number;
export function localmediatrack_media_source_kind(a: number): number;
export function __wbg_localmediatrack_free(a: number): void;
export function displayvideotrackconstraints_new(): number;
export function __wbg_displayvideotrackconstraints_free(a: number): void;
export function devicevideotrackconstraints_new(): number;
export function devicevideotrackconstraints_device_id(a: number, b: number, c: number): void;
export function devicevideotrackconstraints_exact_facing_mode(a: number, b: number): void;
export function devicevideotrackconstraints_ideal_facing_mode(a: number, b: number): void;
export function devicevideotrackconstraints_exact_height(a: number, b: number): void;
export function devicevideotrackconstraints_ideal_height(a: number, b: number): void;
export function devicevideotrackconstraints_height_in_range(a: number, b: number, c: number): void;
export function devicevideotrackconstraints_exact_width(a: number, b: number): void;
export function devicevideotrackconstraints_ideal_width(a: number, b: number): void;
export function devicevideotrackconstraints_width_in_range(a: number, b: number, c: number): void;
export function __wbg_devicevideotrackconstraints_free(a: number): void;
export function audiotrackconstraints_new(): number;
export function audiotrackconstraints_device_id(a: number, b: number, c: number): void;
export function __wbg_audiotrackconstraints_free(a: number): void;
export function mediastreamsettings_new(): number;
export function mediastreamsettings_audio(a: number, b: number): void;
export function mediastreamsettings_device_video(a: number, b: number): void;
export function mediastreamsettings_display_video(a: number, b: number): void;
export function __wbg_mediastreamsettings_free(a: number): void;
export function mediamanagerhandle_enumerate_devices(a: number): number;
export function mediamanagerhandle_init_local_tracks(a: number, b: number): number;
export function __wbg_mediamanagerhandle_free(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd2d1a685c9a5698d(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdfcc78f4159794ea(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h9fb39ee6878cea01(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h020162ed1977a7df(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4a4feeabe5ee9a95(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h5fa8a471e85ae9d2(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__hb74475a1c8278b47(a: number, b: number, c: number, d: number): void;
