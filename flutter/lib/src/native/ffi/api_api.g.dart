// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class ApiApi {
  int dartFutureToUsize({required MyDartFuture handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartFutureToUsizeConstMeta;

  int opaqueToUsize({required DartHandle handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpaqueToUsizeConstMeta;

  DartHandle dartHandleToOpaque({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartHandleToOpaqueConstMeta;

  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta;

  RefCellVecLocalMediaTrack vecLocalTracksFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta;

  LocalMediaTrack? vecLocalTracksPop(
      {required RefCellVecLocalMediaTrack vec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksPopConstMeta;

  RefCellVecMediaDisplayInfo vecMediaDisplayInfoFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoFromPtrConstMeta;

  MediaDisplayInfo? vecMediaDisplayInfoPop(
      {required RefCellVecMediaDisplayInfo vec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoPopConstMeta;

  RefCellVecMediaDeviceInfo vecMediaDeviceInfoFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoFromPtrConstMeta;

  MediaDeviceInfo? vecMediaDeviceInfoPop(
      {required RefCellVecMediaDeviceInfo vec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoPopConstMeta;

  /// Creates new [`AudioTrackConstraints`] with none constraints configured.
  RefCellAudioTrackConstraints audioTrackConstraintsNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsNewConstMeta;

  /// todo
  AudioTrackConstraints audioTrackConstraintsCast(
      {required RefCellAudioTrackConstraints track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsCastConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  void audioTrackConstraintsDeviceId(
      {required RefCellAudioTrackConstraints track,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsDeviceIdConstMeta;

  /// Sets callback, invoked when this `Connection` will close.
  void connectionHandleOnClose(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`remote::Track`] is added to this
  /// [`Connection`].
  ///
  /// [`remote::Track`]: crate::media::track::remote::Track
  /// [`Connection`]: crate::connection::Connection
  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta;

  /// Sets callback, invoked when a connection quality score is updated by
  /// a server.
  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta;

  /// Returns remote `Member` ID.
  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta;

  /// Enables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta;

  /// Creates new [`DeviceVideoTrackConstraints`] with none constraints
  /// configured.
  RefCellDeviceVideoTrackConstraints deviceVideoTrackConstraintsNew(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeviceVideoTrackConstraintsNewConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  void deviceVideoTrackConstraintsDeviceId(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsDeviceIdConstMeta;

  /// Sets an exact [facingMode][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-constraindomstring
  void deviceVideoTrackConstraintsExactFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactFacingModeConstMeta;

  /// Sets an ideal [facingMode][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-constraindomstring
  void deviceVideoTrackConstraintsIdealFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealFacingModeConstMeta;

  /// Sets an exact [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsExactHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactHeightConstMeta;

  /// Sets an ideal [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsIdealHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealHeightConstMeta;

  /// Sets an exact [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsExactWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactWidthConstMeta;

  /// Sets an ideal [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsIdealWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealWidthConstMeta;

  /// Sets a range of a [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsHeightInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsHeightInRangeConstMeta;

  /// Sets a range of a [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsWidthInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsWidthInRangeConstMeta;

  /// Creates new [`DisplayVideoTrackConstraints`] with none constraints
  /// configured.
  RefCellDisplayVideoTrackConstraints displayVideoTrackConstraintsNew(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisplayVideoTrackConstraintsNewConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  void displayVideoTrackConstraintsDeviceId(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsDeviceIdConstMeta;

  /// Sets an exact [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void displayVideoTrackConstraintsExactHeight(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactHeightConstMeta;

  /// Sets an ideal [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void displayVideoTrackConstraintsIdealHeight(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealHeightConstMeta;

  /// Sets an exact [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void displayVideoTrackConstraintsExactWidth(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactWidthConstMeta;

  /// Sets an ideal [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void displayVideoTrackConstraintsIdealWidth(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealWidthConstMeta;

  /// Sets an ideal [frameRate][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  void displayVideoTrackConstraintsIdealFrameRate(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int idealFrameRate,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealFrameRateConstMeta;

  /// Sets an exact [frameRate][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  void displayVideoTrackConstraintsExactFrameRate(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int exactFrameRate,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactFrameRateConstMeta;

  /// Instantiates a new [`Jason`] interface to interact with this library.
  RefCellOptionJason jasonNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta;

  /// Creates a new [`Room`] and returns its [`RoomHandle`].
  ///
  /// [`Room`]: crate::room::Room
  RoomHandle jasonInitRoom({required RefCellOptionJason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta;

  /// Returns a [`MediaManagerHandle`].
  MediaManagerHandle jasonMediaManager(
      {required RefCellOptionJason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonCloseRoom(
      {required RefCellOptionJason jason,
      required RoomHandle roomToDelete,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonDispose({required RefCellOptionJason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta;

  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  DartHandle localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta;

  /// Returns a [`MediaKind::Audio`] if this [`LocalMediaTrack`] represents an
  /// audio track, or a [`MediaKind::Video`] if it represents a video track.
  ///
  /// [`MediaKind::Audio`]: crate::media::MediaKind::Audio
  /// [`MediaKind::Video`]: crate::media::MediaKind::Video
  int localMediaTrackKind({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta;

  /// Returns a [`MediaSourceKind::Device`] if this [`LocalMediaTrack`] is
  /// sourced from some device (webcam/microphone), or a
  /// [`MediaSourceKind::Display`] if it's captured via
  /// [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture/#dom-mediadevices-getdisplaymedia
  /// [`MediaSourceKind::Device`]: crate::media::MediaSourceKind::Device
  /// [`MediaSourceKind::Display`]: crate::media::MediaSourceKind::Display
  int localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta;

  /// Returns unique identifier of the represented device.
  String mediaDeviceInfoDeviceId(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoDeviceIdConstMeta;

  /// Returns kind of the represented device.
  ///
  /// This representation of [MediaDeviceInfo][1] ONLY for input device.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams/#device-info
  int mediaDeviceInfoKind({required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoKindConstMeta;

  /// Returns label describing the represented device (for example "External USB
  /// Webcam").
  ///
  /// If the device has no associated label, then returns an empty string.
  String mediaDeviceInfoLabel(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoLabelConstMeta;

  /// Returns group identifier of the represented device.
  ///
  /// Two devices have the same group identifier if they belong to the same
  /// physical device. For example, the audio input and output devices
  /// representing the speaker and microphone of the same headset have the
  /// same [groupId][1].
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams/#dom-mediadeviceinfo-groupid
  String? mediaDeviceInfoGroupId(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoGroupIdConstMeta;

  /// Returns a unique identifier of the represented display.
  String mediaDisplayInfoDeviceId(
      {required MediaDisplayInfo mediaDisplay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoDeviceIdConstMeta;

  /// Returns a title describing the represented display.
  String? mediaDisplayInfoTitle(
      {required MediaDisplayInfo mediaDisplay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoTitleConstMeta;

  /// Returns [`LocalMediaTrack`]s objects, built from the provided
  /// [`MediaStreamSettings`].
  ///
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  MyDartFuture mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required RefCellMediaStreamSettings caps,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta;

  /// Returns a list of [`MediaDeviceInfo`] objects representing available media
  /// input and devices, such as microphones, cameras, and so forth.
  MyDartFuture mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta;

  /// Returns a list of [`MediaDisplayInfo`] objects representing available
  /// sources that can be used for screen capturing.
  MyDartFuture mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta;

  /// Switches the current output audio device to the device with the provided
  /// `device_id`.
  MyDartFuture mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta;

  /// Sets the microphone volume level in percents.
  MyDartFuture mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta;

  /// Indicates whether it's possible to access microphone volume settings.
  MyDartFuture mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta;

  /// Returns the current microphone volume level in percents.
  MyDartFuture mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta;

  /// Subscribes onto the [`MediaManagerHandle`]'s `devicechange` event.
  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager,
      required DartHandle cb,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaManagerHandleOnDeviceChangeConstMeta;

  /// Creates new [`MediaStreamSettings`] with none constraints configured.
  RefCellMediaStreamSettings mediaStreamSettingsNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsNewConstMeta;

  /// Specifies a nature and settings of an audio [`MediaStreamTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  void mediaStreamSettingsAudio(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required RefCellAudioTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsAudioConstMeta;

  /// Set constraints for obtaining a local video sourced from a media device.
  void mediaStreamSettingsDeviceVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required RefCellDeviceVideoTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDeviceVideoConstMeta;

  /// Set constraints for capturing a local video from user's display.
  void mediaStreamSettingsDisplayVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required RefCellDisplayVideoTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDisplayVideoConstMeta;

  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta;

  /// Tries to reconnect a [`Room`] after the provided delay in milliseconds.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here..
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta;

  /// Tries to reconnect a [`Room`] in a loop with a growing backoff delay.
  ///
  /// The first attempt will be performed immediately, and the second attempt will
  /// be performed after `starting_delay_ms`.
  ///
  /// Delay between reconnection attempts won't be greater than
  /// `max_delay_ms`.
  ///
  /// After each reconnection attempt, delay between reconnections will be
  /// multiplied by the given `multiplier` until it reaches `max_delay_ms`.
  ///
  /// If `multiplier` is a negative number then it will be considered as `0.0`.
  /// reconnect_handle might cause a busy loop, so it's not recommended.
  ///
  /// Max elapsed time can be limited with an optional `max_elapsed_time_ms`
  /// argument.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta;

  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of track
  /// [`RemoteMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  DartHandle remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is muted.
  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is unmuted.
  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is stopped.
  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta;

  /// Sets callback to invoke whenever track [`RemoteMediaTrack`]'s general
  /// [`MediaDirection`] is changed.
  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta;

  /// Indicate whether track [`RemoteMediaTrack`] is muted.
  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta;

  /// Returns track [`RemoteMediaTrack`]'s kind (audio/video).
  int remoteMediaTrackKind({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta;

  /// Returns track [`RemoteMediaTrack`]'s media source kind.
  int remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaSourceKindConstMeta;

  /// Returns the current general [`MediaDirection`] of track
  /// [`RemoteMediaTrack`].
  int remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta;

  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta;

  /// Returns a close reason of a [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  String roomCloseReasonReason(
      {required RoomCloseReason roomCloseReason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonReasonConstMeta;

  /// Indicates whether a [`Room`] was closed by server.
  ///
  /// [`Room`]: crate::room::Room
  bool roomCloseReasonIsClosedByServer(
      {required RoomCloseReason roomCloseReason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonIsClosedByServerConstMeta;

  /// Indicates whether a [`Room`]'s close reason is considered as an error.
  ///
  /// [`Room`]: crate::room::Room
  bool roomCloseReasonIsErr(
      {required RoomCloseReason roomCloseReason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonIsErrConstMeta;

  /// Connects to a media server and joins the [`Room`] with the provided
  /// authorization `token`.
  ///
  /// Authorization token has a fixed format:
  /// `{{ Host URL }}/{{ Room ID }}/{{ Member ID }}?token={{ Auth Token }}`
  /// (e.g. `wss://medea.com/MyConf1/Alice?token=777`).
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta;

  /// Updates room_handle [`Room`]'s [`MediaStreamSettings`]. room_handle affects
  /// all the [`PeerConnection`]s in room_handle [`Room`]. If
  /// [`MediaStreamSettings`] are configured for some [`Room`], then room_handle
  /// [`Room`] can only send media tracks that correspond to these settings.
  /// [`MediaStreamSettings`] update will change media tracks in all sending
  /// peers, so that might cause a new [getUserMedia()][1] request to happen.
  ///
  /// Media obtaining/injection errors are additionally fired to
  /// `on_failed_local_media` callback.
  ///
  /// If `stop_first` set to `true` then affected local `Tracks` will be
  /// dropped before new [`MediaStreamSettings`] are applied. room_handle is
  /// usually required when changing video source device due to hardware
  /// limitations, e.g. having an active track sourced from device `A` may hinder
  /// [getUserMedia()][1] requests to device `B`.
  ///
  /// `rollback_on_fail` option configures [`MediaStreamSettings`] update request
  /// to automatically rollback to previous settings if new settings cannot be
  /// applied.
  ///
  /// If recovering from fail state isn't possible then affected media types will
  /// be disabled.
  ///
  /// [`Room`]: crate::room::Room
  /// [`PeerConnection`]: crate::peer::PeerConnection
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadevices-getusermedia
  MyDartFuture roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required RefCellMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleSetLocalMediaSettingsConstMeta;

  /// Mutes outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleMuteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta;

  /// Unmutes outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleUnmuteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta;

  /// Enables outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleEnableAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta;

  /// Disables outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta;

  /// Mutes outbound video in room_handle [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta;

  /// Unmutes outbound video in room_handle [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta;

  /// Enables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  MyDartFuture roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta;

  /// Disables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  MyDartFuture roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta;

  /// Enables inbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in room_handle [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in room_handle [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta;

  /// Sets callback, invoked when a new [`Connection`] with some remote `Peer`
  /// is established.
  ///
  /// [`Connection`]: crate::connection::Connection
  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta;

  /// Sets callback, invoked on room_handle [`Room`] close, providing a
  /// [`RoomCloseReason`].
  ///
  /// [`Room`]: crate::room::Room
  /// [`RoomCloseReason`]: crate::room::RoomCloseReason
  void roomHandleOnClose(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`LocalMediaTrack`] is added to
  /// room_handle [`Room`].
  ///
  /// room_handle might happen in such cases:
  /// 1. Media server initiates a media request.
  /// 2. `enable_audio`/`enable_video` is called.
  /// 3. [`MediaStreamSettings`] updated via `set_local_media_settings`.
  ///
  /// [`Room`]: crate::room::Room
  /// [`MediaStreamSettings`]: crate::media::MediaStreamSettings
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta;

  /// Sets callback, invoked when a connection with server is lost.
  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta;

  /// Sets callback, invoked on local media acquisition failures.
  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta;
}

@sealed
class AudioTrackConstraints extends FrbOpaque {
  AudioTrackConstraints.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class ConnectionHandle extends FrbOpaque {
  ConnectionHandle.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class DartHandle extends FrbOpaque {
  DartHandle.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class LocalMediaTrack extends FrbOpaque {
  LocalMediaTrack.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class MediaDeviceInfo extends FrbOpaque {
  MediaDeviceInfo.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class MediaDisplayInfo extends FrbOpaque {
  MediaDisplayInfo.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class MediaManagerHandle extends FrbOpaque {
  MediaManagerHandle.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class MyDartFuture extends FrbOpaque {
  MyDartFuture.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class ReconnectHandle extends FrbOpaque {
  ReconnectHandle.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellAudioTrackConstraints extends FrbOpaque {
  RefCellAudioTrackConstraints.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellDeviceVideoTrackConstraints extends FrbOpaque {
  RefCellDeviceVideoTrackConstraints.fromRaw(
      int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellDisplayVideoTrackConstraints extends FrbOpaque {
  RefCellDisplayVideoTrackConstraints.fromRaw(
      int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellMediaStreamSettings extends FrbOpaque {
  RefCellMediaStreamSettings.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellOptionJason extends FrbOpaque {
  RefCellOptionJason.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellVecLocalMediaTrack extends FrbOpaque {
  RefCellVecLocalMediaTrack.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellVecMediaDeviceInfo extends FrbOpaque {
  RefCellVecMediaDeviceInfo.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RefCellVecMediaDisplayInfo extends FrbOpaque {
  RefCellVecMediaDisplayInfo.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RemoteMediaTrack extends FrbOpaque {
  RemoteMediaTrack.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RoomCloseReason extends FrbOpaque {
  RoomCloseReason.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

@sealed
class RoomHandle extends FrbOpaque {
  RoomHandle.fromRaw(int ptr, int drop, int share, int size)
      : super.unsafe(ptr, drop, share, size);
}

class ApiApiImpl implements ApiApi {
  final ApiApiPlatform _platform;
  factory ApiApiImpl(ExternalLibrary dylib) =>
      ApiApiImpl.raw(ApiApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ApiApiImpl.wasm(FutureOr<WasmModule> module) =>
      ApiApiImpl(module as ExternalLibrary);
  ApiApiImpl.raw(this._platform);
  int dartFutureToUsize({required MyDartFuture handle, dynamic hint}) {
    var arg0 = _platform.api2wire_MyDartFuture(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dart_future_to_usize(arg0),
      parseSuccessData: _wire2api_SyncReturn_usize,
      constMeta: kDartFutureToUsizeConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartFutureToUsizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_future_to_usize",
        argNames: ["handle"],
      );

  int opaqueToUsize({required DartHandle handle, dynamic hint}) {
    var arg0 = _platform.api2wire_DartHandle(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_opaque_to_usize(arg0),
      parseSuccessData: _wire2api_SyncReturn_usize,
      constMeta: kOpaqueToUsizeConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueToUsizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_to_usize",
        argNames: ["handle"],
      );

  DartHandle dartHandleToOpaque({required int handle, dynamic hint}) {
    var arg0 = api2wire_usize(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dart_handle_to_opaque(arg0),
      parseSuccessData: _wire2api_SyncReturn_DartHandle,
      constMeta: kDartHandleToOpaqueConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartHandleToOpaqueConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_handle_to_opaque",
        argNames: ["handle"],
      );

  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_connection_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ConnectionHandle,
      constMeta: kConnectionHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_from_ptr",
        argNames: ["ptr"],
      );

  RefCellVecLocalMediaTrack vecLocalTracksFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_local_tracks_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RefCellVecLocalMediaTrack,
      constMeta: kVecLocalTracksFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_local_tracks_from_ptr",
        argNames: ["ptr"],
      );

  LocalMediaTrack? vecLocalTracksPop(
      {required RefCellVecLocalMediaTrack vec, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellVecLocalMediaTrack(vec);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_local_tracks_pop(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_LocalMediaTrack,
      constMeta: kVecLocalTracksPopConstMeta,
      argValues: [vec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksPopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_local_tracks_pop",
        argNames: ["vec"],
      );

  RefCellVecMediaDisplayInfo vecMediaDisplayInfoFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_display_info_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RefCellVecMediaDisplayInfo,
      constMeta: kVecMediaDisplayInfoFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_display_info_from_ptr",
        argNames: ["ptr"],
      );

  MediaDisplayInfo? vecMediaDisplayInfoPop(
      {required RefCellVecMediaDisplayInfo vec, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellVecMediaDisplayInfo(vec);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_display_info_pop(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_MediaDisplayInfo,
      constMeta: kVecMediaDisplayInfoPopConstMeta,
      argValues: [vec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoPopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_display_info_pop",
        argNames: ["vec"],
      );

  RefCellVecMediaDeviceInfo vecMediaDeviceInfoFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_device_info_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RefCellVecMediaDeviceInfo,
      constMeta: kVecMediaDeviceInfoFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_device_info_from_ptr",
        argNames: ["ptr"],
      );

  MediaDeviceInfo? vecMediaDeviceInfoPop(
      {required RefCellVecMediaDeviceInfo vec, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellVecMediaDeviceInfo(vec);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_device_info_pop(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_MediaDeviceInfo,
      constMeta: kVecMediaDeviceInfoPopConstMeta,
      argValues: [vec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoPopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_device_info_pop",
        argNames: ["vec"],
      );

  RefCellAudioTrackConstraints audioTrackConstraintsNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_audio_track_constraints_new(),
      parseSuccessData: _wire2api_SyncReturn_RefCellAudioTrackConstraints,
      constMeta: kAudioTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "audio_track_constraints_new",
        argNames: [],
      );

  AudioTrackConstraints audioTrackConstraintsCast(
      {required RefCellAudioTrackConstraints track, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellAudioTrackConstraints(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_audio_track_constraints_cast(arg0),
      parseSuccessData: _wire2api_SyncReturn_AudioTrackConstraints,
      constMeta: kAudioTrackConstraintsCastConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsCastConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "audio_track_constraints_cast",
        argNames: ["track"],
      );

  void audioTrackConstraintsDeviceId(
      {required RefCellAudioTrackConstraints track,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellAudioTrackConstraints(track);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_audio_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kAudioTrackConstraintsDeviceIdConstMeta,
      argValues: [track, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "audio_track_constraints_device_id",
        argNames: ["track", "deviceId"],
      );

  void connectionHandleOnClose(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnCloseConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_on_close",
        argNames: ["connection", "f"],
      );

  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_remote_track_added(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnRemoteTrackAddedConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_remote_track_added",
            argNames: ["connection", "f"],
          );

  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_quality_score_update(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnQualityScoreUpdateConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_quality_score_update",
            argNames: ["connection", "f"],
          );

  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_get_remote_member_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kConnectionHandleGetRemoteMemberIdConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_get_remote_member_id",
            argNames: ["connection"],
          );

  MyDartFuture connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleEnableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_audio",
            argNames: ["connection"],
          );

  MyDartFuture connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleDisableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_audio",
            argNames: ["connection"],
          );

  MyDartFuture connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleEnableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  MyDartFuture connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleDisableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  RefCellDeviceVideoTrackConstraints deviceVideoTrackConstraintsNew(
      {dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_device_video_track_constraints_new(),
      parseSuccessData: _wire2api_SyncReturn_RefCellDeviceVideoTrackConstraints,
      constMeta: kDeviceVideoTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeviceVideoTrackConstraintsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "device_video_track_constraints_new",
        argNames: [],
      );

  void deviceVideoTrackConstraintsDeviceId(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsDeviceIdConstMeta,
      argValues: [constraints, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsDeviceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_device_id",
            argNames: ["constraints", "deviceId"],
          );

  void deviceVideoTrackConstraintsExactFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u8(facingMode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_facing_mode(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactFacingModeConstMeta,
      argValues: [constraints, facingMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactFacingModeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_facing_mode",
            argNames: ["constraints", "facingMode"],
          );

  void deviceVideoTrackConstraintsIdealFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u8(facingMode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_facing_mode(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealFacingModeConstMeta,
      argValues: [constraints, facingMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealFacingModeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_facing_mode",
            argNames: ["constraints", "facingMode"],
          );

  void deviceVideoTrackConstraintsExactHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactHeightConstMeta,
      argValues: [constraints, exactHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_height",
            argNames: ["constraints", "exactHeight"],
          );

  void deviceVideoTrackConstraintsIdealHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealHeightConstMeta,
      argValues: [constraints, idealHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_height",
            argNames: ["constraints", "idealHeight"],
          );

  void deviceVideoTrackConstraintsExactWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactWidthConstMeta,
      argValues: [constraints, exactWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_width",
            argNames: ["constraints", "exactWidth"],
          );

  void deviceVideoTrackConstraintsIdealWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealWidthConstMeta,
      argValues: [constraints, idealWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_width",
            argNames: ["constraints", "idealWidth"],
          );

  void deviceVideoTrackConstraintsHeightInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(min);
    var arg2 = api2wire_u32(max);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_height_in_range(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsHeightInRangeConstMeta,
      argValues: [constraints, min, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsHeightInRangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_height_in_range",
            argNames: ["constraints", "min", "max"],
          );

  void deviceVideoTrackConstraintsWidthInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(min);
    var arg2 = api2wire_u32(max);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_width_in_range(arg0, arg1, arg2),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsWidthInRangeConstMeta,
      argValues: [constraints, min, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsWidthInRangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_width_in_range",
            argNames: ["constraints", "min", "max"],
          );

  RefCellDisplayVideoTrackConstraints displayVideoTrackConstraintsNew(
      {dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_display_video_track_constraints_new(),
      parseSuccessData:
          _wire2api_SyncReturn_RefCellDisplayVideoTrackConstraints,
      constMeta: kDisplayVideoTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsNewConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_new",
            argNames: [],
          );

  void displayVideoTrackConstraintsDeviceId(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsDeviceIdConstMeta,
      argValues: [constraints, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsDeviceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_device_id",
            argNames: ["constraints", "deviceId"],
          );

  void displayVideoTrackConstraintsExactHeight(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_exact_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsExactHeightConstMeta,
      argValues: [constraints, exactHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_exact_height",
            argNames: ["constraints", "exactHeight"],
          );

  void displayVideoTrackConstraintsIdealHeight(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_ideal_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsIdealHeightConstMeta,
      argValues: [constraints, idealHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_ideal_height",
            argNames: ["constraints", "idealHeight"],
          );

  void displayVideoTrackConstraintsExactWidth(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_exact_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsExactWidthConstMeta,
      argValues: [constraints, exactWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_exact_width",
            argNames: ["constraints", "exactWidth"],
          );

  void displayVideoTrackConstraintsIdealWidth(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_ideal_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsIdealWidthConstMeta,
      argValues: [constraints, idealWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_ideal_width",
            argNames: ["constraints", "idealWidth"],
          );

  void displayVideoTrackConstraintsIdealFrameRate(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int idealFrameRate,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealFrameRate);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_ideal_frame_rate(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsIdealFrameRateConstMeta,
      argValues: [constraints, idealFrameRate],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealFrameRateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_ideal_frame_rate",
            argNames: ["constraints", "idealFrameRate"],
          );

  void displayVideoTrackConstraintsExactFrameRate(
      {required RefCellDisplayVideoTrackConstraints constraints,
      required int exactFrameRate,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactFrameRate);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_exact_frame_rate(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsExactFrameRateConstMeta,
      argValues: [constraints, exactFrameRate],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactFrameRateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_exact_frame_rate",
            argNames: ["constraints", "exactFrameRate"],
          );

  RefCellOptionJason jasonNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_new(),
      parseSuccessData: _wire2api_SyncReturn_RefCellOptionJason,
      constMeta: kJasonNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_new",
        argNames: [],
      );

  RoomHandle jasonInitRoom({required RefCellOptionJason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellOptionJason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_init_room(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomHandle,
      constMeta: kJasonInitRoomConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_init_room",
        argNames: ["jason"],
      );

  MediaManagerHandle jasonMediaManager(
      {required RefCellOptionJason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellOptionJason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_media_manager(arg0),
      parseSuccessData: _wire2api_SyncReturn_MediaManagerHandle,
      constMeta: kJasonMediaManagerConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_media_manager",
        argNames: ["jason"],
      );

  void jasonCloseRoom(
      {required RefCellOptionJason jason,
      required RoomHandle roomToDelete,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellOptionJason(jason);
    var arg1 = _platform.api2wire_RoomHandle(roomToDelete);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_close_room(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kJasonCloseRoomConstMeta,
      argValues: [jason, roomToDelete],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_close_room",
        argNames: ["jason", "roomToDelete"],
      );

  void jasonDispose({required RefCellOptionJason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_RefCellOptionJason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_dispose(arg0),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kJasonDisposeConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_dispose",
        argNames: ["jason"],
      );

  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_LocalMediaTrack,
      constMeta: kLocalMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_from_ptr",
        argNames: ["ptr"],
      );

  DartHandle localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_get_track(arg0),
      parseSuccessData: _wire2api_SyncReturn_DartHandle,
      constMeta: kLocalMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_get_track",
        argNames: ["track"],
      );

  int localMediaTrackKind({required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kLocalMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_kind",
        argNames: ["track"],
      );

  int localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_local_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kLocalMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_media_source_kind",
        argNames: ["track"],
      );

  String mediaDeviceInfoDeviceId(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_device_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDeviceInfoDeviceIdConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_device_id",
        argNames: ["mediaDevice"],
      );

  int mediaDeviceInfoKind(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kMediaDeviceInfoKindConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_kind",
        argNames: ["mediaDevice"],
      );

  String mediaDeviceInfoLabel(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_label(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDeviceInfoLabelConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_label",
        argNames: ["mediaDevice"],
      );

  String? mediaDeviceInfoGroupId(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_group_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_String,
      constMeta: kMediaDeviceInfoGroupIdConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoGroupIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_group_id",
        argNames: ["mediaDevice"],
      );

  String mediaDisplayInfoDeviceId(
      {required MediaDisplayInfo mediaDisplay, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDisplayInfo(mediaDisplay);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_display_info_device_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDisplayInfoDeviceIdConstMeta,
      argValues: [mediaDisplay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_display_info_device_id",
        argNames: ["mediaDisplay"],
      );

  String? mediaDisplayInfoTitle(
      {required MediaDisplayInfo mediaDisplay, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDisplayInfo(mediaDisplay);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_display_info_title(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_String,
      constMeta: kMediaDisplayInfoTitleConstMeta,
      argValues: [mediaDisplay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoTitleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_display_info_title",
        argNames: ["mediaDisplay"],
      );

  MyDartFuture mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required RefCellMediaStreamSettings caps,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_RefCellMediaStreamSettings(caps);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_init_local_tracks(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleInitLocalTracksConstMeta,
      argValues: [manager, caps],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_init_local_tracks",
            argNames: ["manager", "caps"],
          );

  MyDartFuture mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_devices(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleEnumerateDevicesConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_devices",
            argNames: ["manager"],
          );

  MyDartFuture mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_displays(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleEnumerateDisplaysConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_displays",
            argNames: ["manager"],
          );

  MyDartFuture mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_output_audio_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleSetOutputAudioIdConstMeta,
      argValues: [manager, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_output_audio_id",
            argNames: ["manager", "deviceId"],
          );

  MyDartFuture mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_i64(level);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_microphone_volume(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleSetMicrophoneVolumeConstMeta,
      argValues: [manager, level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_microphone_volume",
            argNames: ["manager", "level"],
          );

  MyDartFuture mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_microphone_volume_is_available(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume_is_available",
            argNames: ["manager"],
          );

  MyDartFuture mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_microphone_volume(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleMicrophoneVolumeConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume",
            argNames: ["manager"],
          );

  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager,
      required DartHandle cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_DartHandle(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_on_device_change(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaManagerHandleOnDeviceChangeConstMeta,
      argValues: [manager, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleOnDeviceChangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_on_device_change",
            argNames: ["manager", "cb"],
          );

  RefCellMediaStreamSettings mediaStreamSettingsNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_stream_settings_new(),
      parseSuccessData: _wire2api_SyncReturn_RefCellMediaStreamSettings,
      constMeta: kMediaStreamSettingsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_new",
        argNames: [],
      );

  void mediaStreamSettingsAudio(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required RefCellAudioTrackConstraints constraints,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    var arg1 = _platform.api2wire_RefCellAudioTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_audio(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaStreamSettingsAudioConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_audio",
        argNames: ["mediaStreamSettings", "constraints"],
      );

  void mediaStreamSettingsDeviceVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required RefCellDeviceVideoTrackConstraints constraints,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    var arg1 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_device_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaStreamSettingsDeviceVideoConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDeviceVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_device_video",
        argNames: ["mediaStreamSettings", "constraints"],
      );

  void mediaStreamSettingsDisplayVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required RefCellDisplayVideoTrackConstraints constraints,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    var arg1 =
        _platform.api2wire_RefCellDisplayVideoTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_display_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaStreamSettingsDisplayVideoConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaStreamSettingsDisplayVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_stream_settings_display_video",
            argNames: ["mediaStreamSettings", "constraints"],
          );

  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_reconnect_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ReconnectHandle,
      constMeta: kReconnectHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reconnect_handle_from_ptr",
        argNames: ["ptr"],
      );

  MyDartFuture reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = _platform.api2wire_i64(delayMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_delay(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kReconnectHandleReconnectWithDelayConstMeta,
      argValues: [reconnectHandle, delayMs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_delay",
            argNames: ["reconnectHandle", "delayMs"],
          );

  MyDartFuture reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = _platform.api2wire_i64(startingDelay);
    var arg2 = api2wire_f64(multiplier);
    var arg3 = api2wire_u32(maxDelay);
    var arg4 = _platform.api2wire_opt_box_autoadd_u32(maxElapsedTimeMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_backoff(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kReconnectHandleReconnectWithBackoffConstMeta,
      argValues: [
        reconnectHandle,
        startingDelay,
        multiplier,
        maxDelay,
        maxElapsedTimeMs
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_backoff",
            argNames: [
              "reconnectHandle",
              "startingDelay",
              "multiplier",
              "maxDelay",
              "maxElapsedTimeMs"
            ],
          );

  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RemoteMediaTrack,
      constMeta: kRemoteMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_from_ptr",
        argNames: ["ptr"],
      );

  DartHandle remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_get_track(arg0),
      parseSuccessData: _wire2api_SyncReturn_DartHandle,
      constMeta: kRemoteMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_get_track",
        argNames: ["track"],
      );

  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_muted(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnMutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_muted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_unmuted(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnUnmutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_unmuted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_stopped(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnStoppedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_stopped",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required DartHandle f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_remote_media_track_on_media_direction_changed(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnMediaDirectionChangedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_on_media_direction_changed",
            argNames: ["track", "f"],
          );

  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_muted(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRemoteMediaTrackMutedConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_muted",
        argNames: ["track"],
      );

  int remoteMediaTrackKind({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_kind",
        argNames: ["track"],
      );

  int remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackMediaSourceKindConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_media_source_kind",
            argNames: ["track"],
          );

  int remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_direction(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackMediaDirectionConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_media_direction",
        argNames: ["track"],
      );

  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomCloseReason,
      constMeta: kRoomCloseReasonFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_from_ptr",
        argNames: ["ptr"],
      );

  String roomCloseReasonReason(
      {required RoomCloseReason roomCloseReason, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomCloseReason(roomCloseReason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_reason(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kRoomCloseReasonReasonConstMeta,
      argValues: [roomCloseReason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonReasonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_reason",
        argNames: ["roomCloseReason"],
      );

  bool roomCloseReasonIsClosedByServer(
      {required RoomCloseReason roomCloseReason, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomCloseReason(roomCloseReason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_close_reason_is_closed_by_server(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRoomCloseReasonIsClosedByServerConstMeta,
      argValues: [roomCloseReason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomCloseReasonIsClosedByServerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_close_reason_is_closed_by_server",
            argNames: ["roomCloseReason"],
          );

  bool roomCloseReasonIsErr(
      {required RoomCloseReason roomCloseReason, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomCloseReason(roomCloseReason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_is_err(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRoomCloseReasonIsErrConstMeta,
      argValues: [roomCloseReason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonIsErrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_is_err",
        argNames: ["roomCloseReason"],
      );

  MyDartFuture roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_String(token);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_join(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleJoinConstMeta,
      argValues: [roomHandle, token],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_join",
        argNames: ["roomHandle", "token"],
      );

  MyDartFuture roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required RefCellMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RefCellMediaStreamSettings(settings);
    var arg2 = stopFirst;
    var arg3 = rollbackOnFail;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_room_handle_set_local_media_settings(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleSetLocalMediaSettingsConstMeta,
      argValues: [roomHandle, settings, stopFirst, rollbackOnFail],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomHandleSetLocalMediaSettingsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_handle_set_local_media_settings",
            argNames: ["roomHandle", "settings", "stopFirst", "rollbackOnFail"],
          );

  MyDartFuture roomHandleMuteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleMuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleUnmuteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleUnmuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleEnableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleMuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleUnmuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartHandle(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_new_connection(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnNewConnectionConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_new_connection",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnClose(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartHandle(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnCloseConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_close",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartHandle(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_local_track(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnLocalTrackConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_local_track",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartHandle(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_connection_loss(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnConnectionLossConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_connection_loss",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required DartHandle cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartHandle(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_failed_local_media(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnFailedLocalMediaConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_failed_local_media",
        argNames: ["roomHandle", "cb"],
      );

// Section: wire2api

  AudioTrackConstraints _wire2api_AudioTrackConstraints(dynamic raw) {
    return AudioTrackConstraints.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  ConnectionHandle _wire2api_ConnectionHandle(dynamic raw) {
    return ConnectionHandle.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  DartHandle _wire2api_DartHandle(dynamic raw) {
    return DartHandle.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  LocalMediaTrack _wire2api_LocalMediaTrack(dynamic raw) {
    return LocalMediaTrack.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  MediaDeviceInfo _wire2api_MediaDeviceInfo(dynamic raw) {
    return MediaDeviceInfo.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  MediaDisplayInfo _wire2api_MediaDisplayInfo(dynamic raw) {
    return MediaDisplayInfo.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  MediaManagerHandle _wire2api_MediaManagerHandle(dynamic raw) {
    return MediaManagerHandle.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  MyDartFuture _wire2api_MyDartFuture(dynamic raw) {
    return MyDartFuture.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  ReconnectHandle _wire2api_ReconnectHandle(dynamic raw) {
    return ReconnectHandle.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellAudioTrackConstraints _wire2api_RefCellAudioTrackConstraints(
      dynamic raw) {
    return RefCellAudioTrackConstraints.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellDeviceVideoTrackConstraints
      _wire2api_RefCellDeviceVideoTrackConstraints(dynamic raw) {
    return RefCellDeviceVideoTrackConstraints.fromRaw(
        raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellDisplayVideoTrackConstraints
      _wire2api_RefCellDisplayVideoTrackConstraints(dynamic raw) {
    return RefCellDisplayVideoTrackConstraints.fromRaw(
        raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellMediaStreamSettings _wire2api_RefCellMediaStreamSettings(dynamic raw) {
    return RefCellMediaStreamSettings.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellOptionJason _wire2api_RefCellOptionJason(dynamic raw) {
    return RefCellOptionJason.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellVecLocalMediaTrack _wire2api_RefCellVecLocalMediaTrack(dynamic raw) {
    return RefCellVecLocalMediaTrack.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellVecMediaDeviceInfo _wire2api_RefCellVecMediaDeviceInfo(dynamic raw) {
    return RefCellVecMediaDeviceInfo.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RefCellVecMediaDisplayInfo _wire2api_RefCellVecMediaDisplayInfo(dynamic raw) {
    return RefCellVecMediaDisplayInfo.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RemoteMediaTrack _wire2api_RemoteMediaTrack(dynamic raw) {
    return RemoteMediaTrack.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RoomCloseReason _wire2api_RoomCloseReason(dynamic raw) {
    return RoomCloseReason.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  RoomHandle _wire2api_RoomHandle(dynamic raw) {
    return RoomHandle.fromRaw(raw[0], raw[1], raw[2], raw[3]);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  AudioTrackConstraints _wire2api_SyncReturn_AudioTrackConstraints(
      dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return AudioTrackConstraints.fromRaw(ptr, drop, lend, size);
  }

  ConnectionHandle _wire2api_SyncReturn_ConnectionHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return ConnectionHandle.fromRaw(ptr, drop, lend, size);
  }

  DartHandle _wire2api_SyncReturn_DartHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return DartHandle.fromRaw(ptr, drop, lend, size);
  }

  LocalMediaTrack _wire2api_SyncReturn_LocalMediaTrack(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return LocalMediaTrack.fromRaw(ptr, drop, lend, size);
  }

  MediaManagerHandle _wire2api_SyncReturn_MediaManagerHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MediaManagerHandle.fromRaw(ptr, drop, lend, size);
  }

  MyDartFuture _wire2api_SyncReturn_MyDartFuture(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MyDartFuture.fromRaw(ptr, drop, lend, size);
  }

  LocalMediaTrack? _wire2api_SyncReturn_Option_LocalMediaTrack(dynamic raw) {
    if (raw == null) {
      return null;
    }
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return LocalMediaTrack.fromRaw(ptr, drop, lend, size);
  }

  MediaDeviceInfo? _wire2api_SyncReturn_Option_MediaDeviceInfo(dynamic raw) {
    if (raw == null) {
      return null;
    }
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MediaDeviceInfo.fromRaw(ptr, drop, lend, size);
  }

  MediaDisplayInfo? _wire2api_SyncReturn_Option_MediaDisplayInfo(dynamic raw) {
    if (raw == null) {
      return null;
    }
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MediaDisplayInfo.fromRaw(ptr, drop, lend, size);
  }

  String? _wire2api_SyncReturn_Option_String(dynamic raw) {
    if (raw == null) {
      return null;
    }
    return utf8.decode(raw);
  }

  ReconnectHandle _wire2api_SyncReturn_ReconnectHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return ReconnectHandle.fromRaw(ptr, drop, lend, size);
  }

  RefCellAudioTrackConstraints
      _wire2api_SyncReturn_RefCellAudioTrackConstraints(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellAudioTrackConstraints.fromRaw(ptr, drop, lend, size);
  }

  RefCellDeviceVideoTrackConstraints
      _wire2api_SyncReturn_RefCellDeviceVideoTrackConstraints(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellDeviceVideoTrackConstraints.fromRaw(ptr, drop, lend, size);
  }

  RefCellDisplayVideoTrackConstraints
      _wire2api_SyncReturn_RefCellDisplayVideoTrackConstraints(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellDisplayVideoTrackConstraints.fromRaw(ptr, drop, lend, size);
  }

  RefCellMediaStreamSettings _wire2api_SyncReturn_RefCellMediaStreamSettings(
      dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellMediaStreamSettings.fromRaw(ptr, drop, lend, size);
  }

  RefCellOptionJason _wire2api_SyncReturn_RefCellOptionJason(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellOptionJason.fromRaw(ptr, drop, lend, size);
  }

  RefCellVecLocalMediaTrack _wire2api_SyncReturn_RefCellVecLocalMediaTrack(
      dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellVecLocalMediaTrack.fromRaw(ptr, drop, lend, size);
  }

  RefCellVecMediaDeviceInfo _wire2api_SyncReturn_RefCellVecMediaDeviceInfo(
      dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellVecMediaDeviceInfo.fromRaw(ptr, drop, lend, size);
  }

  RefCellVecMediaDisplayInfo _wire2api_SyncReturn_RefCellVecMediaDisplayInfo(
      dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellVecMediaDisplayInfo.fromRaw(ptr, drop, lend, size);
  }

  RemoteMediaTrack _wire2api_SyncReturn_RemoteMediaTrack(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RemoteMediaTrack.fromRaw(ptr, drop, lend, size);
  }

  RoomCloseReason _wire2api_SyncReturn_RoomCloseReason(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RoomCloseReason.fromRaw(ptr, drop, lend, size);
  }

  RoomHandle _wire2api_SyncReturn_RoomHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 4;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);
    var sizeList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2, pointBitLen * 3);
    List.copyRange(sizeList, 0, raw, pointBitLen * 3);

    int ptr = 0;
    int drop = 0;
    int lend = 0;
    int size = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
      size = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RoomHandle.fromRaw(ptr, drop, lend, size);
  }

  String _wire2api_SyncReturn_String(dynamic raw) {
    return utf8.decode(raw);
  }

  bool _wire2api_SyncReturn_bool(dynamic raw) {
    return uint8ListToBool(raw);
  }

  int _wire2api_SyncReturn_u8(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    return dataView.getUint8(0);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  int _wire2api_SyncReturn_usize(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    switch (raw.length) {
      case 8:
        {
          return dataView.getUint64(0);
        }
      case 4:
        {
          return dataView.getUint32(0);
        }
      default:
        {
          throw "Unknow lenght pointer.";
        }
    }
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  LocalMediaTrack? _wire2api_opt_LocalMediaTrack(dynamic raw) {
    return raw == null ? null : _wire2api_LocalMediaTrack(raw);
  }

  MediaDeviceInfo? _wire2api_opt_MediaDeviceInfo(dynamic raw) {
    return raw == null ? null : _wire2api_MediaDeviceInfo(raw);
  }

  MediaDisplayInfo? _wire2api_opt_MediaDisplayInfo(dynamic raw) {
    return raw == null ? null : _wire2api_MediaDisplayInfo(raw);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

class ApiApiPlatform extends FlutterRustBridgeBase<ApiApiWire> {
  ApiApiPlatform(ffi.DynamicLibrary dylib) : super(ApiApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_ConnectionHandle> api2wire_ConnectionHandle(
      ConnectionHandle raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_ConnectionHandle();
    _api_fill_to_wire_ConnectionHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DartHandle> api2wire_DartHandle(DartHandle raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_DartHandle();
    _api_fill_to_wire_DartHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LocalMediaTrack> api2wire_LocalMediaTrack(
      LocalMediaTrack raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_LocalMediaTrack();
    _api_fill_to_wire_LocalMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MediaDeviceInfo> api2wire_MediaDeviceInfo(
      MediaDeviceInfo raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_MediaDeviceInfo();
    _api_fill_to_wire_MediaDeviceInfo(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MediaDisplayInfo> api2wire_MediaDisplayInfo(
      MediaDisplayInfo raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_MediaDisplayInfo();
    _api_fill_to_wire_MediaDisplayInfo(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MediaManagerHandle> api2wire_MediaManagerHandle(
      MediaManagerHandle raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_MediaManagerHandle();
    _api_fill_to_wire_MediaManagerHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyDartFuture> api2wire_MyDartFuture(MyDartFuture raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_MyDartFuture();
    _api_fill_to_wire_MyDartFuture(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ReconnectHandle> api2wire_ReconnectHandle(
      ReconnectHandle raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_ReconnectHandle();
    _api_fill_to_wire_ReconnectHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellAudioTrackConstraints>
      api2wire_RefCellAudioTrackConstraints(RefCellAudioTrackConstraints raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellAudioTrackConstraints();
    _api_fill_to_wire_RefCellAudioTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>
      api2wire_RefCellDeviceVideoTrackConstraints(
          RefCellDeviceVideoTrackConstraints raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellDeviceVideoTrackConstraints();
    _api_fill_to_wire_RefCellDeviceVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>
      api2wire_RefCellDisplayVideoTrackConstraints(
          RefCellDisplayVideoTrackConstraints raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellDisplayVideoTrackConstraints();
    _api_fill_to_wire_RefCellDisplayVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellMediaStreamSettings>
      api2wire_RefCellMediaStreamSettings(RefCellMediaStreamSettings raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellMediaStreamSettings();
    _api_fill_to_wire_RefCellMediaStreamSettings(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellOptionJason> api2wire_RefCellOptionJason(
      RefCellOptionJason raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellOptionJason();
    _api_fill_to_wire_RefCellOptionJason(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellVecLocalMediaTrack>
      api2wire_RefCellVecLocalMediaTrack(RefCellVecLocalMediaTrack raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellVecLocalMediaTrack();
    _api_fill_to_wire_RefCellVecLocalMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellVecMediaDeviceInfo>
      api2wire_RefCellVecMediaDeviceInfo(RefCellVecMediaDeviceInfo raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellVecMediaDeviceInfo();
    _api_fill_to_wire_RefCellVecMediaDeviceInfo(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellVecMediaDisplayInfo>
      api2wire_RefCellVecMediaDisplayInfo(RefCellVecMediaDisplayInfo raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RefCellVecMediaDisplayInfo();
    _api_fill_to_wire_RefCellVecMediaDisplayInfo(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RemoteMediaTrack> api2wire_RemoteMediaTrack(
      RemoteMediaTrack raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RemoteMediaTrack();
    _api_fill_to_wire_RemoteMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RoomCloseReason> api2wire_RoomCloseReason(
      RoomCloseReason raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RoomCloseReason();
    _api_fill_to_wire_RoomCloseReason(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RoomHandle> api2wire_RoomHandle(RoomHandle raw) {
    if (raw.isStale()) {
      throw StateError('Use after dispose.');
    }
    final ptr = inner.new_RoomHandle();
    _api_fill_to_wire_RoomHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: api_fill_to_wire

  void _api_fill_to_wire_ConnectionHandle(
      ConnectionHandle apiObj, ffi.Pointer<wire_ConnectionHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_DartHandle(
      DartHandle apiObj, ffi.Pointer<wire_DartHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_LocalMediaTrack(
      LocalMediaTrack apiObj, ffi.Pointer<wire_LocalMediaTrack> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_MediaDeviceInfo(
      MediaDeviceInfo apiObj, ffi.Pointer<wire_MediaDeviceInfo> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_MediaDisplayInfo(
      MediaDisplayInfo apiObj, ffi.Pointer<wire_MediaDisplayInfo> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_MediaManagerHandle(
      MediaManagerHandle apiObj, ffi.Pointer<wire_MediaManagerHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_MyDartFuture(
      MyDartFuture apiObj, ffi.Pointer<wire_MyDartFuture> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_ReconnectHandle(
      ReconnectHandle apiObj, ffi.Pointer<wire_ReconnectHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellAudioTrackConstraints(
      RefCellAudioTrackConstraints apiObj,
      ffi.Pointer<wire_RefCellAudioTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellDeviceVideoTrackConstraints(
      RefCellDeviceVideoTrackConstraints apiObj,
      ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellDisplayVideoTrackConstraints(
      RefCellDisplayVideoTrackConstraints apiObj,
      ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellMediaStreamSettings(
      RefCellMediaStreamSettings apiObj,
      ffi.Pointer<wire_RefCellMediaStreamSettings> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellOptionJason(
      RefCellOptionJason apiObj, ffi.Pointer<wire_RefCellOptionJason> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellVecLocalMediaTrack(
      RefCellVecLocalMediaTrack apiObj,
      ffi.Pointer<wire_RefCellVecLocalMediaTrack> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellVecMediaDeviceInfo(
      RefCellVecMediaDeviceInfo apiObj,
      ffi.Pointer<wire_RefCellVecMediaDeviceInfo> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellVecMediaDisplayInfo(
      RefCellVecMediaDisplayInfo apiObj,
      ffi.Pointer<wire_RefCellVecMediaDisplayInfo> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RemoteMediaTrack(
      RemoteMediaTrack apiObj, ffi.Pointer<wire_RemoteMediaTrack> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RoomCloseReason(
      RoomCloseReason apiObj, ffi.Pointer<wire_RoomCloseReason> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RoomHandle(
      RoomHandle apiObj, ffi.Pointer<wire_RoomHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ApiApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApiApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApiApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_dart_future_to_usize(
    ffi.Pointer<wire_MyDartFuture> handle,
  ) {
    return _wire_dart_future_to_usize(
      handle,
    );
  }

  late final _wire_dart_future_to_usizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MyDartFuture>)>>('wire_dart_future_to_usize');
  late final _wire_dart_future_to_usize =
      _wire_dart_future_to_usizePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MyDartFuture>)>();

  WireSyncReturnStruct wire_opaque_to_usize(
    ffi.Pointer<wire_DartHandle> handle,
  ) {
    return _wire_opaque_to_usize(
      handle,
    );
  }

  late final _wire_opaque_to_usizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_DartHandle>)>>('wire_opaque_to_usize');
  late final _wire_opaque_to_usize = _wire_opaque_to_usizePtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_dart_handle_to_opaque(
    int handle,
  ) {
    return _wire_dart_handle_to_opaque(
      handle,
    );
  }

  late final _wire_dart_handle_to_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_dart_handle_to_opaque');
  late final _wire_dart_handle_to_opaque = _wire_dart_handle_to_opaquePtr
      .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_connection_handle_from_ptr(
    int ptr,
  ) {
    return _wire_connection_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_connection_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_connection_handle_from_ptr');
  late final _wire_connection_handle_from_ptr =
      _wire_connection_handle_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_local_tracks_from_ptr(
    int ptr,
  ) {
    return _wire_vec_local_tracks_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_local_tracks_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_vec_local_tracks_from_ptr');
  late final _wire_vec_local_tracks_from_ptr =
      _wire_vec_local_tracks_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_local_tracks_pop(
    ffi.Pointer<wire_RefCellVecLocalMediaTrack> vec,
  ) {
    return _wire_vec_local_tracks_pop(
      vec,
    );
  }

  late final _wire_vec_local_tracks_popPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellVecLocalMediaTrack>)>>(
      'wire_vec_local_tracks_pop');
  late final _wire_vec_local_tracks_pop =
      _wire_vec_local_tracks_popPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellVecLocalMediaTrack>)>();

  WireSyncReturnStruct wire_vec_media_display_info_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_display_info_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_display_info_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_vec_media_display_info_from_ptr');
  late final _wire_vec_media_display_info_from_ptr =
      _wire_vec_media_display_info_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_media_display_info_pop(
    ffi.Pointer<wire_RefCellVecMediaDisplayInfo> vec,
  ) {
    return _wire_vec_media_display_info_pop(
      vec,
    );
  }

  late final _wire_vec_media_display_info_popPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellVecMediaDisplayInfo>)>>(
      'wire_vec_media_display_info_pop');
  late final _wire_vec_media_display_info_pop =
      _wire_vec_media_display_info_popPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellVecMediaDisplayInfo>)>();

  WireSyncReturnStruct wire_vec_media_device_info_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_device_info_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_device_info_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_vec_media_device_info_from_ptr');
  late final _wire_vec_media_device_info_from_ptr =
      _wire_vec_media_device_info_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_media_device_info_pop(
    ffi.Pointer<wire_RefCellVecMediaDeviceInfo> vec,
  ) {
    return _wire_vec_media_device_info_pop(
      vec,
    );
  }

  late final _wire_vec_media_device_info_popPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellVecMediaDeviceInfo>)>>(
      'wire_vec_media_device_info_pop');
  late final _wire_vec_media_device_info_pop =
      _wire_vec_media_device_info_popPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellVecMediaDeviceInfo>)>();

  WireSyncReturnStruct wire_audio_track_constraints_new() {
    return _wire_audio_track_constraints_new();
  }

  late final _wire_audio_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_audio_track_constraints_new');
  late final _wire_audio_track_constraints_new =
      _wire_audio_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_audio_track_constraints_cast(
    ffi.Pointer<wire_RefCellAudioTrackConstraints> track,
  ) {
    return _wire_audio_track_constraints_cast(
      track,
    );
  }

  late final _wire_audio_track_constraints_castPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellAudioTrackConstraints>)>>(
      'wire_audio_track_constraints_cast');
  late final _wire_audio_track_constraints_cast =
      _wire_audio_track_constraints_castPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellAudioTrackConstraints>)>();

  WireSyncReturnStruct wire_audio_track_constraints_device_id(
    ffi.Pointer<wire_RefCellAudioTrackConstraints> track,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_audio_track_constraints_device_id(
      track,
      device_id,
    );
  }

  late final _wire_audio_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellAudioTrackConstraints>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_audio_track_constraints_device_id');
  late final _wire_audio_track_constraints_device_id =
      _wire_audio_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellAudioTrackConstraints>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_connection_handle_on_close(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_connection_handle_on_close(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_closePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_connection_handle_on_close');
  late final _wire_connection_handle_on_close =
      _wire_connection_handle_on_closePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_connection_handle_on_remote_track_added(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_connection_handle_on_remote_track_added(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_remote_track_addedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_connection_handle_on_remote_track_added');
  late final _wire_connection_handle_on_remote_track_added =
      _wire_connection_handle_on_remote_track_addedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_connection_handle_on_quality_score_update(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_connection_handle_on_quality_score_update(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_quality_score_updatePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_connection_handle_on_quality_score_update');
  late final _wire_connection_handle_on_quality_score_update =
      _wire_connection_handle_on_quality_score_updatePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_connection_handle_get_remote_member_id(
    ffi.Pointer<wire_ConnectionHandle> connection,
  ) {
    return _wire_connection_handle_get_remote_member_id(
      connection,
    );
  }

  late final _wire_connection_handle_get_remote_member_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>)>>(
      'wire_connection_handle_get_remote_member_id');
  late final _wire_connection_handle_get_remote_member_id =
      _wire_connection_handle_get_remote_member_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>)>();

  WireSyncReturnStruct wire_connection_handle_enable_remote_audio(
    ffi.Pointer<wire_ConnectionHandle> connection,
  ) {
    return _wire_connection_handle_enable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>)>>(
      'wire_connection_handle_enable_remote_audio');
  late final _wire_connection_handle_enable_remote_audio =
      _wire_connection_handle_enable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>)>();

  WireSyncReturnStruct wire_connection_handle_disable_remote_audio(
    ffi.Pointer<wire_ConnectionHandle> connection,
  ) {
    return _wire_connection_handle_disable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>)>>(
      'wire_connection_handle_disable_remote_audio');
  late final _wire_connection_handle_disable_remote_audio =
      _wire_connection_handle_disable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>)>();

  WireSyncReturnStruct wire_connection_handle_enable_remote_video(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_connection_handle_enable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_enable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>>(
      'wire_connection_handle_enable_remote_video');
  late final _wire_connection_handle_enable_remote_video =
      _wire_connection_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_connection_handle_disable_remote_video(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_connection_handle_disable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>>(
      'wire_connection_handle_disable_remote_video');
  late final _wire_connection_handle_disable_remote_video =
      _wire_connection_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_device_video_track_constraints_new() {
    return _wire_device_video_track_constraints_new();
  }

  late final _wire_device_video_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_device_video_track_constraints_new');
  late final _wire_device_video_track_constraints_new =
      _wire_device_video_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_device_video_track_constraints_device_id(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_device_video_track_constraints_device_id(
      constraints,
      device_id,
    );
  }

  late final _wire_device_video_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_device_video_track_constraints_device_id');
  late final _wire_device_video_track_constraints_device_id =
      _wire_device_video_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_facing_mode(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int facing_mode,
  ) {
    return _wire_device_video_track_constraints_exact_facing_mode(
      constraints,
      facing_mode,
    );
  }

  late final _wire_device_video_track_constraints_exact_facing_modePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                      ffi.Uint8)>>(
          'wire_device_video_track_constraints_exact_facing_mode');
  late final _wire_device_video_track_constraints_exact_facing_mode =
      _wire_device_video_track_constraints_exact_facing_modePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_facing_mode(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int facing_mode,
  ) {
    return _wire_device_video_track_constraints_ideal_facing_mode(
      constraints,
      facing_mode,
    );
  }

  late final _wire_device_video_track_constraints_ideal_facing_modePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                      ffi.Uint8)>>(
          'wire_device_video_track_constraints_ideal_facing_mode');
  late final _wire_device_video_track_constraints_ideal_facing_mode =
      _wire_device_video_track_constraints_ideal_facing_modePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_height(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int exact_height,
  ) {
    return _wire_device_video_track_constraints_exact_height(
      constraints,
      exact_height,
    );
  }

  late final _wire_device_video_track_constraints_exact_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_exact_height');
  late final _wire_device_video_track_constraints_exact_height =
      _wire_device_video_track_constraints_exact_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_height(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int ideal_height,
  ) {
    return _wire_device_video_track_constraints_ideal_height(
      constraints,
      ideal_height,
    );
  }

  late final _wire_device_video_track_constraints_ideal_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_ideal_height');
  late final _wire_device_video_track_constraints_ideal_height =
      _wire_device_video_track_constraints_ideal_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_width(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int exact_width,
  ) {
    return _wire_device_video_track_constraints_exact_width(
      constraints,
      exact_width,
    );
  }

  late final _wire_device_video_track_constraints_exact_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_exact_width');
  late final _wire_device_video_track_constraints_exact_width =
      _wire_device_video_track_constraints_exact_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_width(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int ideal_width,
  ) {
    return _wire_device_video_track_constraints_ideal_width(
      constraints,
      ideal_width,
    );
  }

  late final _wire_device_video_track_constraints_ideal_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_ideal_width');
  late final _wire_device_video_track_constraints_ideal_width =
      _wire_device_video_track_constraints_ideal_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_height_in_range(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int min,
    int max,
  ) {
    return _wire_device_video_track_constraints_height_in_range(
      constraints,
      min,
      max,
    );
  }

  late final _wire_device_video_track_constraints_height_in_rangePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                  ffi.Uint32,
                  ffi.Uint32)>>(
      'wire_device_video_track_constraints_height_in_range');
  late final _wire_device_video_track_constraints_height_in_range =
      _wire_device_video_track_constraints_height_in_rangePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              int,
              int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_width_in_range(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int min,
    int max,
  ) {
    return _wire_device_video_track_constraints_width_in_range(
      constraints,
      min,
      max,
    );
  }

  late final _wire_device_video_track_constraints_width_in_rangePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                  ffi.Uint32,
                  ffi.Uint32)>>(
      'wire_device_video_track_constraints_width_in_range');
  late final _wire_device_video_track_constraints_width_in_range =
      _wire_device_video_track_constraints_width_in_rangePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              int,
              int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_new() {
    return _wire_display_video_track_constraints_new();
  }

  late final _wire_display_video_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_display_video_track_constraints_new');
  late final _wire_display_video_track_constraints_new =
      _wire_display_video_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_display_video_track_constraints_device_id(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_display_video_track_constraints_device_id(
      constraints,
      device_id,
    );
  }

  late final _wire_display_video_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_display_video_track_constraints_device_id');
  late final _wire_display_video_track_constraints_device_id =
      _wire_display_video_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_display_video_track_constraints_exact_height(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    int exact_height,
  ) {
    return _wire_display_video_track_constraints_exact_height(
      constraints,
      exact_height,
    );
  }

  late final _wire_display_video_track_constraints_exact_heightPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
                  ffi.Uint32)>>(
      'wire_display_video_track_constraints_exact_height');
  late final _wire_display_video_track_constraints_exact_height =
      _wire_display_video_track_constraints_exact_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_ideal_height(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    int ideal_height,
  ) {
    return _wire_display_video_track_constraints_ideal_height(
      constraints,
      ideal_height,
    );
  }

  late final _wire_display_video_track_constraints_ideal_heightPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
                  ffi.Uint32)>>(
      'wire_display_video_track_constraints_ideal_height');
  late final _wire_display_video_track_constraints_ideal_height =
      _wire_display_video_track_constraints_ideal_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_exact_width(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    int exact_width,
  ) {
    return _wire_display_video_track_constraints_exact_width(
      constraints,
      exact_width,
    );
  }

  late final _wire_display_video_track_constraints_exact_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
              ffi.Uint32)>>('wire_display_video_track_constraints_exact_width');
  late final _wire_display_video_track_constraints_exact_width =
      _wire_display_video_track_constraints_exact_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_ideal_width(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    int ideal_width,
  ) {
    return _wire_display_video_track_constraints_ideal_width(
      constraints,
      ideal_width,
    );
  }

  late final _wire_display_video_track_constraints_ideal_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
              ffi.Uint32)>>('wire_display_video_track_constraints_ideal_width');
  late final _wire_display_video_track_constraints_ideal_width =
      _wire_display_video_track_constraints_ideal_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_ideal_frame_rate(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    int ideal_frame_rate,
  ) {
    return _wire_display_video_track_constraints_ideal_frame_rate(
      constraints,
      ideal_frame_rate,
    );
  }

  late final _wire_display_video_track_constraints_ideal_frame_ratePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
                      ffi.Uint32)>>(
          'wire_display_video_track_constraints_ideal_frame_rate');
  late final _wire_display_video_track_constraints_ideal_frame_rate =
      _wire_display_video_track_constraints_ideal_frame_ratePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_exact_frame_rate(
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
    int exact_frame_rate,
  ) {
    return _wire_display_video_track_constraints_exact_frame_rate(
      constraints,
      exact_frame_rate,
    );
  }

  late final _wire_display_video_track_constraints_exact_frame_ratePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>,
                      ffi.Uint32)>>(
          'wire_display_video_track_constraints_exact_frame_rate');
  late final _wire_display_video_track_constraints_exact_frame_rate =
      _wire_display_video_track_constraints_exact_frame_ratePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_jason_new() {
    return _wire_jason_new();
  }

  late final _wire_jason_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_jason_new');
  late final _wire_jason_new =
      _wire_jason_newPtr.asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_jason_init_room(
    ffi.Pointer<wire_RefCellOptionJason> jason,
  ) {
    return _wire_jason_init_room(
      jason,
    );
  }

  late final _wire_jason_init_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellOptionJason>)>>('wire_jason_init_room');
  late final _wire_jason_init_room = _wire_jason_init_roomPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_RefCellOptionJason>)>();

  WireSyncReturnStruct wire_jason_media_manager(
    ffi.Pointer<wire_RefCellOptionJason> jason,
  ) {
    return _wire_jason_media_manager(
      jason,
    );
  }

  late final _wire_jason_media_managerPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellOptionJason>)>>(
      'wire_jason_media_manager');
  late final _wire_jason_media_manager =
      _wire_jason_media_managerPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellOptionJason>)>();

  WireSyncReturnStruct wire_jason_close_room(
    ffi.Pointer<wire_RefCellOptionJason> jason,
    ffi.Pointer<wire_RoomHandle> room_to_delete,
  ) {
    return _wire_jason_close_room(
      jason,
      room_to_delete,
    );
  }

  late final _wire_jason_close_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RefCellOptionJason>,
              ffi.Pointer<wire_RoomHandle>)>>('wire_jason_close_room');
  late final _wire_jason_close_room = _wire_jason_close_roomPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_RefCellOptionJason>,
          ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_jason_dispose(
    ffi.Pointer<wire_RefCellOptionJason> jason,
  ) {
    return _wire_jason_dispose(
      jason,
    );
  }

  late final _wire_jason_disposePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellOptionJason>)>>('wire_jason_dispose');
  late final _wire_jason_dispose = _wire_jason_disposePtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_RefCellOptionJason>)>();

  WireSyncReturnStruct wire_local_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_local_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_local_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_local_media_track_from_ptr');
  late final _wire_local_media_track_from_ptr =
      _wire_local_media_track_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_local_media_track_get_track(
    ffi.Pointer<wire_LocalMediaTrack> track,
  ) {
    return _wire_local_media_track_get_track(
      track,
    );
  }

  late final _wire_local_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_LocalMediaTrack>)>>(
      'wire_local_media_track_get_track');
  late final _wire_local_media_track_get_track =
      _wire_local_media_track_get_trackPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_LocalMediaTrack>)>();

  WireSyncReturnStruct wire_local_media_track_kind(
    ffi.Pointer<wire_LocalMediaTrack> track,
  ) {
    return _wire_local_media_track_kind(
      track,
    );
  }

  late final _wire_local_media_track_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_LocalMediaTrack>)>>(
      'wire_local_media_track_kind');
  late final _wire_local_media_track_kind =
      _wire_local_media_track_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_LocalMediaTrack>)>();

  WireSyncReturnStruct wire_local_media_track_media_source_kind(
    ffi.Pointer<wire_LocalMediaTrack> track,
  ) {
    return _wire_local_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_local_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_LocalMediaTrack>)>>(
      'wire_local_media_track_media_source_kind');
  late final _wire_local_media_track_media_source_kind =
      _wire_local_media_track_media_source_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_LocalMediaTrack>)>();

  WireSyncReturnStruct wire_media_device_info_device_id(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_device_id(
      media_device,
    );
  }

  late final _wire_media_device_info_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_device_id');
  late final _wire_media_device_info_device_id =
      _wire_media_device_info_device_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_device_info_kind(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_kind(
      media_device,
    );
  }

  late final _wire_media_device_info_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_kind');
  late final _wire_media_device_info_kind =
      _wire_media_device_info_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_device_info_label(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_label(
      media_device,
    );
  }

  late final _wire_media_device_info_labelPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_label');
  late final _wire_media_device_info_label =
      _wire_media_device_info_labelPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_device_info_group_id(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_group_id(
      media_device,
    );
  }

  late final _wire_media_device_info_group_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_group_id');
  late final _wire_media_device_info_group_id =
      _wire_media_device_info_group_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_display_info_device_id(
    ffi.Pointer<wire_MediaDisplayInfo> media_display,
  ) {
    return _wire_media_display_info_device_id(
      media_display,
    );
  }

  late final _wire_media_display_info_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDisplayInfo>)>>(
      'wire_media_display_info_device_id');
  late final _wire_media_display_info_device_id =
      _wire_media_display_info_device_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDisplayInfo>)>();

  WireSyncReturnStruct wire_media_display_info_title(
    ffi.Pointer<wire_MediaDisplayInfo> media_display,
  ) {
    return _wire_media_display_info_title(
      media_display,
    );
  }

  late final _wire_media_display_info_titlePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDisplayInfo>)>>(
      'wire_media_display_info_title');
  late final _wire_media_display_info_title =
      _wire_media_display_info_titlePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDisplayInfo>)>();

  WireSyncReturnStruct wire_media_manager_handle_init_local_tracks(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    ffi.Pointer<wire_RefCellMediaStreamSettings> caps,
  ) {
    return _wire_media_manager_handle_init_local_tracks(
      manager,
      caps,
    );
  }

  late final _wire_media_manager_handle_init_local_tracksPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>,
                  ffi.Pointer<wire_RefCellMediaStreamSettings>)>>(
      'wire_media_manager_handle_init_local_tracks');
  late final _wire_media_manager_handle_init_local_tracks =
      _wire_media_manager_handle_init_local_tracksPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Pointer<wire_RefCellMediaStreamSettings>)>();

  WireSyncReturnStruct wire_media_manager_handle_enumerate_devices(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_enumerate_devices(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_devicesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>)>>(
      'wire_media_manager_handle_enumerate_devices');
  late final _wire_media_manager_handle_enumerate_devices =
      _wire_media_manager_handle_enumerate_devicesPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_enumerate_displays(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_enumerate_displays(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_displaysPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>)>>(
      'wire_media_manager_handle_enumerate_displays');
  late final _wire_media_manager_handle_enumerate_displays =
      _wire_media_manager_handle_enumerate_displaysPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_set_output_audio_id(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_media_manager_handle_set_output_audio_id(
      manager,
      device_id,
    );
  }

  late final _wire_media_manager_handle_set_output_audio_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_media_manager_handle_set_output_audio_id');
  late final _wire_media_manager_handle_set_output_audio_id =
      _wire_media_manager_handle_set_output_audio_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_media_manager_handle_set_microphone_volume(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    int level,
  ) {
    return _wire_media_manager_handle_set_microphone_volume(
      manager,
      level,
    );
  }

  late final _wire_media_manager_handle_set_microphone_volumePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Int64)>>('wire_media_manager_handle_set_microphone_volume');
  late final _wire_media_manager_handle_set_microphone_volume =
      _wire_media_manager_handle_set_microphone_volumePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>, int)>();

  WireSyncReturnStruct wire_media_manager_handle_microphone_volume_is_available(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_microphone_volume_is_available(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volume_is_availablePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_MediaManagerHandle>)>>(
          'wire_media_manager_handle_microphone_volume_is_available');
  late final _wire_media_manager_handle_microphone_volume_is_available =
      _wire_media_manager_handle_microphone_volume_is_availablePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_microphone_volume(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_microphone_volume(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volumePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>)>>(
      'wire_media_manager_handle_microphone_volume');
  late final _wire_media_manager_handle_microphone_volume =
      _wire_media_manager_handle_microphone_volumePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_on_device_change(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    ffi.Pointer<wire_DartHandle> cb,
  ) {
    return _wire_media_manager_handle_on_device_change(
      manager,
      cb,
    );
  }

  late final _wire_media_manager_handle_on_device_changePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_media_manager_handle_on_device_change');
  late final _wire_media_manager_handle_on_device_change =
      _wire_media_manager_handle_on_device_changePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_media_stream_settings_new() {
    return _wire_media_stream_settings_new();
  }

  late final _wire_media_stream_settings_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_media_stream_settings_new');
  late final _wire_media_stream_settings_new =
      _wire_media_stream_settings_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_media_stream_settings_audio(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
    ffi.Pointer<wire_RefCellAudioTrackConstraints> constraints,
  ) {
    return _wire_media_stream_settings_audio(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>,
                  ffi.Pointer<wire_RefCellAudioTrackConstraints>)>>(
      'wire_media_stream_settings_audio');
  late final _wire_media_stream_settings_audio =
      _wire_media_stream_settings_audioPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Pointer<wire_RefCellAudioTrackConstraints>)>();

  WireSyncReturnStruct wire_media_stream_settings_device_video(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
  ) {
    return _wire_media_stream_settings_device_video(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_device_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>,
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>)>>(
      'wire_media_stream_settings_device_video');
  late final _wire_media_stream_settings_device_video =
      _wire_media_stream_settings_device_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>)>();

  WireSyncReturnStruct wire_media_stream_settings_display_video(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
    ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> constraints,
  ) {
    return _wire_media_stream_settings_display_video(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_display_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>,
                  ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>)>>(
      'wire_media_stream_settings_display_video');
  late final _wire_media_stream_settings_display_video =
      _wire_media_stream_settings_display_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>)>();

  WireSyncReturnStruct wire_reconnect_handle_from_ptr(
    int ptr,
  ) {
    return _wire_reconnect_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_reconnect_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_reconnect_handle_from_ptr');
  late final _wire_reconnect_handle_from_ptr =
      _wire_reconnect_handle_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_reconnect_handle_reconnect_with_delay(
    ffi.Pointer<wire_ReconnectHandle> reconnect_handle,
    int delay_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_delay(
      reconnect_handle,
      delay_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_delayPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ReconnectHandle>,
              ffi.Int64)>>('wire_reconnect_handle_reconnect_with_delay');
  late final _wire_reconnect_handle_reconnect_with_delay =
      _wire_reconnect_handle_reconnect_with_delayPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_ReconnectHandle>, int)>();

  WireSyncReturnStruct wire_reconnect_handle_reconnect_with_backoff(
    ffi.Pointer<wire_ReconnectHandle> reconnect_handle,
    int starting_delay,
    double multiplier,
    int max_delay,
    ffi.Pointer<ffi.Uint32> max_elapsed_time_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_backoff(
      reconnect_handle,
      starting_delay,
      multiplier,
      max_delay,
      max_elapsed_time_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_backoffPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ReconnectHandle>,
                  ffi.Int64, ffi.Double, ffi.Uint32, ffi.Pointer<ffi.Uint32>)>>(
      'wire_reconnect_handle_reconnect_with_backoff');
  late final _wire_reconnect_handle_reconnect_with_backoff =
      _wire_reconnect_handle_reconnect_with_backoffPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ReconnectHandle>, int,
              double, int, ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturnStruct wire_remote_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_remote_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_remote_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_remote_media_track_from_ptr');
  late final _wire_remote_media_track_from_ptr =
      _wire_remote_media_track_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_remote_media_track_get_track(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_get_track(
      track,
    );
  }

  late final _wire_remote_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_get_track');
  late final _wire_remote_media_track_get_track =
      _wire_remote_media_track_get_trackPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_on_muted(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_remote_media_track_on_muted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_mutedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_remote_media_track_on_muted');
  late final _wire_remote_media_track_on_muted =
      _wire_remote_media_track_on_mutedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_remote_media_track_on_unmuted(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_remote_media_track_on_unmuted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_unmutedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_remote_media_track_on_unmuted');
  late final _wire_remote_media_track_on_unmuted =
      _wire_remote_media_track_on_unmutedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_remote_media_track_on_stopped(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_remote_media_track_on_stopped(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_stoppedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_remote_media_track_on_stopped');
  late final _wire_remote_media_track_on_stopped =
      _wire_remote_media_track_on_stoppedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_remote_media_track_on_media_direction_changed(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_remote_media_track_on_media_direction_changed(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_media_direction_changedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_remote_media_track_on_media_direction_changed');
  late final _wire_remote_media_track_on_media_direction_changed =
      _wire_remote_media_track_on_media_direction_changedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_remote_media_track_muted(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_muted(
      track,
    );
  }

  late final _wire_remote_media_track_mutedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_muted');
  late final _wire_remote_media_track_muted =
      _wire_remote_media_track_mutedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_kind(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_kind(
      track,
    );
  }

  late final _wire_remote_media_track_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_kind');
  late final _wire_remote_media_track_kind =
      _wire_remote_media_track_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_media_source_kind(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_remote_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_media_source_kind');
  late final _wire_remote_media_track_media_source_kind =
      _wire_remote_media_track_media_source_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_media_direction(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_media_direction(
      track,
    );
  }

  late final _wire_remote_media_track_media_directionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_media_direction');
  late final _wire_remote_media_track_media_direction =
      _wire_remote_media_track_media_directionPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_room_close_reason_from_ptr(
    int ptr,
  ) {
    return _wire_room_close_reason_from_ptr(
      ptr,
    );
  }

  late final _wire_room_close_reason_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_room_close_reason_from_ptr');
  late final _wire_room_close_reason_from_ptr =
      _wire_room_close_reason_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_room_close_reason_reason(
    ffi.Pointer<wire_RoomCloseReason> room_close_reason,
  ) {
    return _wire_room_close_reason_reason(
      room_close_reason,
    );
  }

  late final _wire_room_close_reason_reasonPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomCloseReason>)>>(
      'wire_room_close_reason_reason');
  late final _wire_room_close_reason_reason =
      _wire_room_close_reason_reasonPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomCloseReason>)>();

  WireSyncReturnStruct wire_room_close_reason_is_closed_by_server(
    ffi.Pointer<wire_RoomCloseReason> room_close_reason,
  ) {
    return _wire_room_close_reason_is_closed_by_server(
      room_close_reason,
    );
  }

  late final _wire_room_close_reason_is_closed_by_serverPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomCloseReason>)>>(
      'wire_room_close_reason_is_closed_by_server');
  late final _wire_room_close_reason_is_closed_by_server =
      _wire_room_close_reason_is_closed_by_serverPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomCloseReason>)>();

  WireSyncReturnStruct wire_room_close_reason_is_err(
    ffi.Pointer<wire_RoomCloseReason> room_close_reason,
  ) {
    return _wire_room_close_reason_is_err(
      room_close_reason,
    );
  }

  late final _wire_room_close_reason_is_errPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomCloseReason>)>>(
      'wire_room_close_reason_is_err');
  late final _wire_room_close_reason_is_err =
      _wire_room_close_reason_is_errPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomCloseReason>)>();

  WireSyncReturnStruct wire_room_handle_join(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_uint_8_list> token,
  ) {
    return _wire_room_handle_join(
      room_handle,
      token,
    );
  }

  late final _wire_room_handle_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_room_handle_join');
  late final _wire_room_handle_join = _wire_room_handle_joinPtr.asFunction<
      WireSyncReturnStruct Function(
          ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_room_handle_set_local_media_settings(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RefCellMediaStreamSettings> settings,
    bool stop_first,
    bool rollback_on_fail,
  ) {
    return _wire_room_handle_set_local_media_settings(
      room_handle,
      settings,
      stop_first,
      rollback_on_fail,
    );
  }

  late final _wire_room_handle_set_local_media_settingsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Bool,
              ffi.Bool)>>('wire_room_handle_set_local_media_settings');
  late final _wire_room_handle_set_local_media_settings =
      _wire_room_handle_set_local_media_settingsPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_RefCellMediaStreamSettings>, bool, bool)>();

  WireSyncReturnStruct wire_room_handle_mute_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_mute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_mute_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_mute_audio');
  late final _wire_room_handle_mute_audio =
      _wire_room_handle_mute_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_unmute_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_unmute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_unmute_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_unmute_audio');
  late final _wire_room_handle_unmute_audio =
      _wire_room_handle_unmute_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_enable_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_enable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_enable_audio');
  late final _wire_room_handle_enable_audio =
      _wire_room_handle_enable_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_disable_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_disable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_disable_audio');
  late final _wire_room_handle_disable_audio =
      _wire_room_handle_disable_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_mute_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_mute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_mute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_mute_video');
  late final _wire_room_handle_mute_video =
      _wire_room_handle_mute_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_unmute_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_unmute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_unmute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_unmute_video');
  late final _wire_room_handle_unmute_video =
      _wire_room_handle_unmute_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_enable_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_enable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_enable_video');
  late final _wire_room_handle_enable_video =
      _wire_room_handle_enable_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_disable_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_disable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_disable_video');
  late final _wire_room_handle_disable_video =
      _wire_room_handle_disable_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_enable_remote_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_enable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>>(
      'wire_room_handle_enable_remote_audio');
  late final _wire_room_handle_enable_remote_audio =
      _wire_room_handle_enable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_disable_remote_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_disable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>>(
      'wire_room_handle_disable_remote_audio');
  late final _wire_room_handle_disable_remote_audio =
      _wire_room_handle_disable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_enable_remote_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_enable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_remote_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_enable_remote_video');
  late final _wire_room_handle_enable_remote_video =
      _wire_room_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_disable_remote_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_disable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>>(
      'wire_room_handle_disable_remote_video');
  late final _wire_room_handle_disable_remote_video =
      _wire_room_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_on_new_connection(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_DartHandle> cb,
  ) {
    return _wire_room_handle_on_new_connection(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_new_connectionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>>(
      'wire_room_handle_on_new_connection');
  late final _wire_room_handle_on_new_connection =
      _wire_room_handle_on_new_connectionPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_room_handle_on_close(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_DartHandle> cb,
  ) {
    return _wire_room_handle_on_close(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_DartHandle>)>>('wire_room_handle_on_close');
  late final _wire_room_handle_on_close =
      _wire_room_handle_on_closePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_room_handle_on_local_track(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_DartHandle> cb,
  ) {
    return _wire_room_handle_on_local_track(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_local_trackPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>>(
      'wire_room_handle_on_local_track');
  late final _wire_room_handle_on_local_track =
      _wire_room_handle_on_local_trackPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_room_handle_on_connection_loss(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_DartHandle> cb,
  ) {
    return _wire_room_handle_on_connection_loss(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_connection_lossPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>>(
      'wire_room_handle_on_connection_loss');
  late final _wire_room_handle_on_connection_loss =
      _wire_room_handle_on_connection_lossPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_room_handle_on_failed_local_media(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_DartHandle> cb,
  ) {
    return _wire_room_handle_on_failed_local_media(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_failed_local_mediaPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>>(
      'wire_room_handle_on_failed_local_media');
  late final _wire_room_handle_on_failed_local_media =
      _wire_room_handle_on_failed_local_mediaPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_DartHandle>)>();

  ffi.Pointer<wire_ConnectionHandle> new_ConnectionHandle() {
    return _new_ConnectionHandle();
  }

  late final _new_ConnectionHandlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ConnectionHandle> Function()>>(
      'new_ConnectionHandle');
  late final _new_ConnectionHandle = _new_ConnectionHandlePtr
      .asFunction<ffi.Pointer<wire_ConnectionHandle> Function()>();

  ffi.Pointer<wire_DartHandle> new_DartHandle() {
    return _new_DartHandle();
  }

  late final _new_DartHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartHandle> Function()>>(
          'new_DartHandle');
  late final _new_DartHandle =
      _new_DartHandlePtr.asFunction<ffi.Pointer<wire_DartHandle> Function()>();

  ffi.Pointer<wire_LocalMediaTrack> new_LocalMediaTrack() {
    return _new_LocalMediaTrack();
  }

  late final _new_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalMediaTrack> Function()>>(
          'new_LocalMediaTrack');
  late final _new_LocalMediaTrack = _new_LocalMediaTrackPtr
      .asFunction<ffi.Pointer<wire_LocalMediaTrack> Function()>();

  ffi.Pointer<wire_MediaDeviceInfo> new_MediaDeviceInfo() {
    return _new_MediaDeviceInfo();
  }

  late final _new_MediaDeviceInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MediaDeviceInfo> Function()>>(
          'new_MediaDeviceInfo');
  late final _new_MediaDeviceInfo = _new_MediaDeviceInfoPtr
      .asFunction<ffi.Pointer<wire_MediaDeviceInfo> Function()>();

  ffi.Pointer<wire_MediaDisplayInfo> new_MediaDisplayInfo() {
    return _new_MediaDisplayInfo();
  }

  late final _new_MediaDisplayInfoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_MediaDisplayInfo> Function()>>(
      'new_MediaDisplayInfo');
  late final _new_MediaDisplayInfo = _new_MediaDisplayInfoPtr
      .asFunction<ffi.Pointer<wire_MediaDisplayInfo> Function()>();

  ffi.Pointer<wire_MediaManagerHandle> new_MediaManagerHandle() {
    return _new_MediaManagerHandle();
  }

  late final _new_MediaManagerHandlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_MediaManagerHandle> Function()>>(
      'new_MediaManagerHandle');
  late final _new_MediaManagerHandle = _new_MediaManagerHandlePtr
      .asFunction<ffi.Pointer<wire_MediaManagerHandle> Function()>();

  ffi.Pointer<wire_MyDartFuture> new_MyDartFuture() {
    return _new_MyDartFuture();
  }

  late final _new_MyDartFuturePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyDartFuture> Function()>>(
          'new_MyDartFuture');
  late final _new_MyDartFuture = _new_MyDartFuturePtr
      .asFunction<ffi.Pointer<wire_MyDartFuture> Function()>();

  ffi.Pointer<wire_ReconnectHandle> new_ReconnectHandle() {
    return _new_ReconnectHandle();
  }

  late final _new_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ReconnectHandle> Function()>>(
          'new_ReconnectHandle');
  late final _new_ReconnectHandle = _new_ReconnectHandlePtr
      .asFunction<ffi.Pointer<wire_ReconnectHandle> Function()>();

  ffi.Pointer<wire_RefCellAudioTrackConstraints>
      new_RefCellAudioTrackConstraints() {
    return _new_RefCellAudioTrackConstraints();
  }

  late final _new_RefCellAudioTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellAudioTrackConstraints>
              Function()>>('new_RefCellAudioTrackConstraints');
  late final _new_RefCellAudioTrackConstraints =
      _new_RefCellAudioTrackConstraintsPtr.asFunction<
          ffi.Pointer<wire_RefCellAudioTrackConstraints> Function()>();

  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>
      new_RefCellDeviceVideoTrackConstraints() {
    return _new_RefCellDeviceVideoTrackConstraints();
  }

  late final _new_RefCellDeviceVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>
              Function()>>('new_RefCellDeviceVideoTrackConstraints');
  late final _new_RefCellDeviceVideoTrackConstraints =
      _new_RefCellDeviceVideoTrackConstraintsPtr.asFunction<
          ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>
      new_RefCellDisplayVideoTrackConstraints() {
    return _new_RefCellDisplayVideoTrackConstraints();
  }

  late final _new_RefCellDisplayVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints>
              Function()>>('new_RefCellDisplayVideoTrackConstraints');
  late final _new_RefCellDisplayVideoTrackConstraints =
      _new_RefCellDisplayVideoTrackConstraintsPtr.asFunction<
          ffi.Pointer<wire_RefCellDisplayVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_RefCellMediaStreamSettings>
      new_RefCellMediaStreamSettings() {
    return _new_RefCellMediaStreamSettings();
  }

  late final _new_RefCellMediaStreamSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellMediaStreamSettings>
              Function()>>('new_RefCellMediaStreamSettings');
  late final _new_RefCellMediaStreamSettings =
      _new_RefCellMediaStreamSettingsPtr.asFunction<
          ffi.Pointer<wire_RefCellMediaStreamSettings> Function()>();

  ffi.Pointer<wire_RefCellOptionJason> new_RefCellOptionJason() {
    return _new_RefCellOptionJason();
  }

  late final _new_RefCellOptionJasonPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_RefCellOptionJason> Function()>>(
      'new_RefCellOptionJason');
  late final _new_RefCellOptionJason = _new_RefCellOptionJasonPtr
      .asFunction<ffi.Pointer<wire_RefCellOptionJason> Function()>();

  ffi.Pointer<wire_RefCellVecLocalMediaTrack> new_RefCellVecLocalMediaTrack() {
    return _new_RefCellVecLocalMediaTrack();
  }

  late final _new_RefCellVecLocalMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellVecLocalMediaTrack>
              Function()>>('new_RefCellVecLocalMediaTrack');
  late final _new_RefCellVecLocalMediaTrack = _new_RefCellVecLocalMediaTrackPtr
      .asFunction<ffi.Pointer<wire_RefCellVecLocalMediaTrack> Function()>();

  ffi.Pointer<wire_RefCellVecMediaDeviceInfo> new_RefCellVecMediaDeviceInfo() {
    return _new_RefCellVecMediaDeviceInfo();
  }

  late final _new_RefCellVecMediaDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellVecMediaDeviceInfo>
              Function()>>('new_RefCellVecMediaDeviceInfo');
  late final _new_RefCellVecMediaDeviceInfo = _new_RefCellVecMediaDeviceInfoPtr
      .asFunction<ffi.Pointer<wire_RefCellVecMediaDeviceInfo> Function()>();

  ffi.Pointer<wire_RefCellVecMediaDisplayInfo>
      new_RefCellVecMediaDisplayInfo() {
    return _new_RefCellVecMediaDisplayInfo();
  }

  late final _new_RefCellVecMediaDisplayInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellVecMediaDisplayInfo>
              Function()>>('new_RefCellVecMediaDisplayInfo');
  late final _new_RefCellVecMediaDisplayInfo =
      _new_RefCellVecMediaDisplayInfoPtr.asFunction<
          ffi.Pointer<wire_RefCellVecMediaDisplayInfo> Function()>();

  ffi.Pointer<wire_RemoteMediaTrack> new_RemoteMediaTrack() {
    return _new_RemoteMediaTrack();
  }

  late final _new_RemoteMediaTrackPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_RemoteMediaTrack> Function()>>(
      'new_RemoteMediaTrack');
  late final _new_RemoteMediaTrack = _new_RemoteMediaTrackPtr
      .asFunction<ffi.Pointer<wire_RemoteMediaTrack> Function()>();

  ffi.Pointer<wire_RoomCloseReason> new_RoomCloseReason() {
    return _new_RoomCloseReason();
  }

  late final _new_RoomCloseReasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RoomCloseReason> Function()>>(
          'new_RoomCloseReason');
  late final _new_RoomCloseReason = _new_RoomCloseReasonPtr
      .asFunction<ffi.Pointer<wire_RoomCloseReason> Function()>();

  ffi.Pointer<wire_RoomHandle> new_RoomHandle() {
    return _new_RoomHandle();
  }

  late final _new_RoomHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RoomHandle> Function()>>(
          'new_RoomHandle');
  late final _new_RoomHandle =
      _new_RoomHandlePtr.asFunction<ffi.Pointer<wire_RoomHandle> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_box_autoadd_u32_0(
    ffi.Pointer<ffi.Uint32> raw,
  ) {
    return _drop_box_autoadd_u32_0(
      raw,
    );
  }

  late final _drop_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint32>)>>(
          'drop_box_autoadd_u32_0');
  late final _drop_box_autoadd_u32_0 = _drop_box_autoadd_u32_0Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Uint32>)>();

  void drop_box_autoadd_u8_0(
    ffi.Pointer<ffi.Uint8> raw,
  ) {
    return _drop_box_autoadd_u8_0(
      raw,
    );
  }

  late final _drop_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'drop_box_autoadd_u8_0');
  late final _drop_box_autoadd_u8_0 = _drop_box_autoadd_u8_0Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_MyDartFuture extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DartHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellVecLocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellVecMediaDisplayInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellVecMediaDeviceInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellAudioTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ConnectionHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellDeviceVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellDisplayVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellOptionJason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RoomHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaDeviceInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaDisplayInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaManagerHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RefCellMediaStreamSettings extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_ReconnectHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RemoteMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RoomCloseReason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLong;
