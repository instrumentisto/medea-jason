// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.53.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class ApiApi {
  /// Creates new [`AudioTrackConstraints`] with none constraints configured.
  AudioTrackConstraints audioTrackConstraintsNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsNewConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  AudioTrackConstraints audioTrackConstraintsDeviceId(
      {required AudioTrackConstraints track,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsDeviceIdConstMeta;

  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta;

  /// Sets callback, invoked when this `Connection` will close.
  void connectionHandleOnClose(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`remote::Track`] is added to this
  /// [`Connection`].
  ///
  /// [`remote::Track`]: crate::media::track::remote::Track
  /// [`Connection`]: crate::connection::Connection
  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta;

  /// Sets callback, invoked when a connection quality score is updated by
  /// a server.
  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta;

  /// Returns remote `Member` ID.
  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta;

  /// Enables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta;

  /// Creates new [`DeviceVideoTrackConstraints`] with none constraints
  /// configured.
  ApiWrapDeviceVideoTrackConstraints deviceVideoTrackConstraintsNew(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeviceVideoTrackConstraintsNewConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  void deviceVideoTrackConstraintsDeviceId(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsDeviceIdConstMeta;

  /// Sets an exact [facingMode][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-constraindomstring
  void deviceVideoTrackConstraintsExactFacingMode(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactFacingModeConstMeta;

  /// Sets an ideal [facingMode][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-constraindomstring
  void deviceVideoTrackConstraintsIdealFacingMode(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealFacingModeConstMeta;

  /// Sets an exact [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsExactHeight(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactHeightConstMeta;

  /// Sets an ideal [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsIdealHeight(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealHeightConstMeta;

  /// Sets an exact [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsExactWidth(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactWidthConstMeta;

  /// Sets an ideal [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsIdealWidth(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealWidthConstMeta;

  /// Sets a range of a [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsHeightInRange(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsHeightInRangeConstMeta;

  /// Sets a range of a [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsWidthInRange(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsWidthInRangeConstMeta;

  /// Creates new [`DisplayVideoTrackConstraints`] with none constraints
  /// configured.
  ApiWrapDisplayVideoTrackConstraints displayVideoTrackConstraintsNew(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisplayVideoTrackConstraintsNewConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  void displayVideoTrackConstraintsDeviceId(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsDeviceIdConstMeta;

  /// Sets an exact [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void displayVideoTrackConstraintsExactHeight(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactHeightConstMeta;

  /// Sets an ideal [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void displayVideoTrackConstraintsIdealHeight(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealHeightConstMeta;

  /// Sets an exact [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void displayVideoTrackConstraintsExactWidth(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactWidthConstMeta;

  /// Sets an ideal [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void displayVideoTrackConstraintsIdealWidth(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealWidthConstMeta;

  /// Sets an ideal [frameRate][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  void displayVideoTrackConstraintsIdealFrameRate(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int idealFrameRate,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealFrameRateConstMeta;

  /// Sets an exact [frameRate][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  void displayVideoTrackConstraintsExactFrameRate(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int exactFrameRate,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactFrameRateConstMeta;

  /// Instantiates a new [`Jason`] interface to interact with this library.
  Jason jasonNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta;

  /// Creates a new [`Room`] and returns its [`RoomHandle`].
  ///
  /// [`Room`]: crate::room::Room
  RoomHandle jasonInitRoom({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta;

  /// Returns a [`MediaManagerHandle`].
  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonDispose({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta;

  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta;

  ApiWrapVecLocalMediaTrack vecLocalTracksFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta;

  LocalMediaTrack? vecLocalTracksPop(
      {required ApiWrapVecLocalMediaTrack vec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksPopConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  Object localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta;

  /// Returns a [`MediaKind::Audio`] if this [`LocalMediaTrack`] represents an
  /// audio track, or a [`MediaKind::Video`] if it represents a video track.
  ///
  /// [`MediaKind::Audio`]: crate::media::MediaKind::Audio
  /// [`MediaKind::Video`]: crate::media::MediaKind::Video
  int localMediaTrackKind({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta;

  /// Returns a [`MediaSourceKind::Device`] if this [`LocalMediaTrack`] is
  /// sourced from some device (webcam/microphone), or a
  /// [`MediaSourceKind::Display`] if it's captured via
  /// [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture/#dom-mediadevices-getdisplaymedia
  /// [`MediaSourceKind::Device`]: crate::media::MediaSourceKind::Device
  /// [`MediaSourceKind::Display`]: crate::media::MediaSourceKind::Display
  int localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta;

  ApiWrapVecMediaDeviceInfo vecMediaDeviceInfoFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoFromPtrConstMeta;

  MediaDeviceInfo? vecMediaDeviceInfoPop(
      {required ApiWrapVecMediaDeviceInfo vec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoPopConstMeta;

  /// Returns unique identifier of the represented device.
  String mediaDeviceInfoDeviceId(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoDeviceIdConstMeta;

  /// Returns kind of the represented device.
  ///
  /// This representation of [MediaDeviceInfo][1] ONLY for input device.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams/#device-info
  int mediaDeviceInfoKind({required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoKindConstMeta;

  /// Returns label describing the represented device (for example "External USB
  /// Webcam").
  ///
  /// If the device has no associated label, then returns an empty string.
  String mediaDeviceInfoLabel(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoLabelConstMeta;

  /// Returns group identifier of the represented device.
  ///
  /// Two devices have the same group identifier if they belong to the same
  /// physical device. For example, the audio input and output devices
  /// representing the speaker and microphone of the same headset have the
  /// same [groupId][1].
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams/#dom-mediadeviceinfo-groupid
  String? mediaDeviceInfoGroupId(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoGroupIdConstMeta;

  ApiWrapVecMediaDisplayInfo vecMediaDisplayInfoFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoFromPtrConstMeta;

  MediaDisplayInfo? vecMediaDisplayInfoPop(
      {required ApiWrapVecMediaDisplayInfo vec, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoPopConstMeta;

  /// Returns a unique identifier of the represented display.
  String mediaDisplayInfoDeviceId(
      {required MediaDisplayInfo mediaDisplay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoDeviceIdConstMeta;

  /// Returns a title describing the represented display.
  String? mediaDisplayInfoTitle(
      {required MediaDisplayInfo mediaDisplay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoTitleConstMeta;

  /// Returns [`LocalMediaTrack`]s objects, built from the provided
  /// [`MediaStreamSettings`].
  ///
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  Object mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required MediaStreamSettings caps,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta;

  /// Returns a list of [`MediaDeviceInfo`] objects representing available media
  /// input and devices, such as microphones, cameras, and so forth.
  Object mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta;

  /// Returns a list of [`MediaDisplayInfo`] objects representing available
  /// sources that can be used for screen capturing.
  Object mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta;

  /// Switches the current output audio device to the device with the provided
  /// `device_id`.
  Object mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta;

  /// Sets the microphone volume level in percents.
  Object mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta;

  /// Indicates whether it's possible to access microphone volume settings.
  Object mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta;

  /// Returns the current microphone volume level in percents.
  Object mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta;

  /// Subscribes onto the [`MediaManagerHandle`]'s `devicechange` event.
  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaManagerHandleOnDeviceChangeConstMeta;

  /// Creates new [`MediaStreamSettings`] with none constraints configured.
  MediaStreamSettings mediaStreamSettingsNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsNewConstMeta;

  /// Specifies a nature and settings of an audio [`MediaStreamTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  MediaStreamSettings mediaStreamSettingsAudio(
      {required MediaStreamSettings mediaStreamSettings,
      required AudioTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsAudioConstMeta;

  /// Set constraints for obtaining a local video sourced from a media device.
  MediaStreamSettings mediaStreamSettingsDeviceVideo(
      {required MediaStreamSettings mediaStreamSettings,
      required ApiWrapDeviceVideoTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDeviceVideoConstMeta;

  /// Set constraints for capturing a local video from user's display.
  MediaStreamSettings mediaStreamSettingsDisplayVideo(
      {required MediaStreamSettings mediaStreamSettings,
      required ApiWrapDisplayVideoTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDisplayVideoConstMeta;

  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta;

  /// Tries to reconnect a [`Room`] after the provided delay in milliseconds.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here..
  ///
  /// [`Room`]: crate::room::Room
  Object reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta;

  /// Tries to reconnect a [`Room`] in a loop with a growing backoff delay.
  ///
  /// The first attempt will be performed immediately, and the second attempt will
  /// be performed after `starting_delay_ms`.
  ///
  /// Delay between reconnection attempts won't be greater than
  /// `max_delay_ms`.
  ///
  /// After each reconnection attempt, delay between reconnections will be
  /// multiplied by the given `multiplier` until it reaches `max_delay_ms`.
  ///
  /// If `multiplier` is a negative number then it will be considered as `0.0`.
  /// reconnect_handle might cause a busy loop, so it's not recommended.
  ///
  /// Max elapsed time can be limited with an optional `max_elapsed_time_ms`
  /// argument.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here.
  ///
  /// [`Room`]: crate::room::Room
  Object reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta;

  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of track
  /// [`RemoteMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is muted.
  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is unmuted.
  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is stopped.
  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta;

  /// Sets callback to invoke whenever track [`RemoteMediaTrack`]'s general
  /// [`MediaDirection`] is changed.
  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta;

  /// Indicate whether track [`RemoteMediaTrack`] is muted.
  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta;

  /// Returns track [`RemoteMediaTrack`]'s kind (audio/video).
  int remoteMediaTrackKind({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta;

  /// Returns track [`RemoteMediaTrack`]'s media source kind.
  int remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaSourceKindConstMeta;

  /// Returns the current general [`MediaDirection`] of track
  /// [`RemoteMediaTrack`].
  int remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta;

  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta;

  /// Returns a close reason of a [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  String roomCloseReasonReason(
      {required RoomCloseReason roomCloseReason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonReasonConstMeta;

  /// Indicates whether a [`Room`] was closed by server.
  ///
  /// [`Room`]: crate::room::Room
  bool roomCloseReasonIsClosedByServer(
      {required RoomCloseReason roomCloseReason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonIsClosedByServerConstMeta;

  /// Indicates whether a [`Room`]'s close reason is considered as an error.
  ///
  /// [`Room`]: crate::room::Room
  bool roomCloseReasonIsErr(
      {required RoomCloseReason roomCloseReason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonIsErrConstMeta;

  /// Connects to a media server and joins the [`Room`] with the provided
  /// authorization `token`.
  ///
  /// Authorization token has a fixed format:
  /// `{{ Host URL }}/{{ Room ID }}/{{ Member ID }}?token={{ Auth Token }}`
  /// (e.g. `wss://medea.com/MyConf1/Alice?token=777`).
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta;

  /// Updates room_handle [`Room`]'s [`MediaStreamSettings`]. room_handle affects
  /// all the [`PeerConnection`]s in room_handle [`Room`]. If
  /// [`MediaStreamSettings`] are configured for some [`Room`], then room_handle
  /// [`Room`] can only send media tracks that correspond to these settings.
  /// [`MediaStreamSettings`] update will change media tracks in all sending
  /// peers, so that might cause a new [getUserMedia()][1] request to happen.
  ///
  /// Media obtaining/injection errors are additionally fired to
  /// `on_failed_local_media` callback.
  ///
  /// If `stop_first` set to `true` then affected local `Tracks` will be
  /// dropped before new [`MediaStreamSettings`] are applied. room_handle is
  /// usually required when changing video source device due to hardware
  /// limitations, e.g. having an active track sourced from device `A` may hinder
  /// [getUserMedia()][1] requests to device `B`.
  ///
  /// `rollback_on_fail` option configures [`MediaStreamSettings`] update request
  /// to automatically rollback to previous settings if new settings cannot be
  /// applied.
  ///
  /// If recovering from fail state isn't possible then affected media types will
  /// be disabled.
  ///
  /// [`Room`]: crate::room::Room
  /// [`PeerConnection`]: crate::peer::PeerConnection
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadevices-getusermedia
  Object roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required MediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleSetLocalMediaSettingsConstMeta;

  /// Mutes outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleMuteAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta;

  /// Unmutes outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleUnmuteAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta;

  /// Enables outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleEnableAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta;

  /// Disables outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleDisableAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta;

  /// Mutes outbound video in room_handle [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta;

  /// Unmutes outbound video in room_handle [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta;

  /// Enables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  Object roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta;

  /// Disables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  Object roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta;

  /// Enables inbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in room_handle [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in room_handle [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta;

  /// Sets callback, invoked when a new [`Connection`] with some remote `Peer`
  /// is established.
  ///
  /// [`Connection`]: crate::connection::Connection
  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta;

  /// Sets callback, invoked on room_handle [`Room`] close, providing a
  /// [`RoomCloseReason`].
  ///
  /// [`Room`]: crate::room::Room
  /// [`RoomCloseReason`]: crate::room::RoomCloseReason
  void roomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`LocalMediaTrack`] is added to
  /// room_handle [`Room`].
  ///
  /// room_handle might happen in such cases:
  /// 1. Media server initiates a media request.
  /// 2. `enable_audio`/`enable_video` is called.
  /// 3. [`MediaStreamSettings`] updated via `set_local_media_settings`.
  ///
  /// [`Room`]: crate::room::Room
  /// [`MediaStreamSettings`]: crate::media::MediaStreamSettings
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta;

  /// Sets callback, invoked when a connection with server is lost.
  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta;

  /// Sets callback, invoked on local media acquisition failures.
  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta;

  DropFnType get dropOpaqueApiWrapDeviceVideoTrackConstraints;
  ShareFnType get shareOpaqueApiWrapDeviceVideoTrackConstraints;
  OpaqueTypeFinalizer get ApiWrapDeviceVideoTrackConstraintsFinalizer;

  DropFnType get dropOpaqueApiWrapDisplayVideoTrackConstraints;
  ShareFnType get shareOpaqueApiWrapDisplayVideoTrackConstraints;
  OpaqueTypeFinalizer get ApiWrapDisplayVideoTrackConstraintsFinalizer;

  DropFnType get dropOpaqueApiWrapVecLocalMediaTrack;
  ShareFnType get shareOpaqueApiWrapVecLocalMediaTrack;
  OpaqueTypeFinalizer get ApiWrapVecLocalMediaTrackFinalizer;

  DropFnType get dropOpaqueApiWrapVecMediaDeviceInfo;
  ShareFnType get shareOpaqueApiWrapVecMediaDeviceInfo;
  OpaqueTypeFinalizer get ApiWrapVecMediaDeviceInfoFinalizer;

  DropFnType get dropOpaqueApiWrapVecMediaDisplayInfo;
  ShareFnType get shareOpaqueApiWrapVecMediaDisplayInfo;
  OpaqueTypeFinalizer get ApiWrapVecMediaDisplayInfoFinalizer;

  DropFnType get dropOpaqueAudioTrackConstraints;
  ShareFnType get shareOpaqueAudioTrackConstraints;
  OpaqueTypeFinalizer get AudioTrackConstraintsFinalizer;

  DropFnType get dropOpaqueConnectionHandle;
  ShareFnType get shareOpaqueConnectionHandle;
  OpaqueTypeFinalizer get ConnectionHandleFinalizer;

  DropFnType get dropOpaqueJason;
  ShareFnType get shareOpaqueJason;
  OpaqueTypeFinalizer get JasonFinalizer;

  DropFnType get dropOpaqueLocalMediaTrack;
  ShareFnType get shareOpaqueLocalMediaTrack;
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer;

  DropFnType get dropOpaqueMediaDeviceInfo;
  ShareFnType get shareOpaqueMediaDeviceInfo;
  OpaqueTypeFinalizer get MediaDeviceInfoFinalizer;

  DropFnType get dropOpaqueMediaDisplayInfo;
  ShareFnType get shareOpaqueMediaDisplayInfo;
  OpaqueTypeFinalizer get MediaDisplayInfoFinalizer;

  DropFnType get dropOpaqueMediaManagerHandle;
  ShareFnType get shareOpaqueMediaManagerHandle;
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer;

  DropFnType get dropOpaqueMediaStreamSettings;
  ShareFnType get shareOpaqueMediaStreamSettings;
  OpaqueTypeFinalizer get MediaStreamSettingsFinalizer;

  DropFnType get dropOpaqueReconnectHandle;
  ShareFnType get shareOpaqueReconnectHandle;
  OpaqueTypeFinalizer get ReconnectHandleFinalizer;

  DropFnType get dropOpaqueRemoteMediaTrack;
  ShareFnType get shareOpaqueRemoteMediaTrack;
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer;

  DropFnType get dropOpaqueRoomCloseReason;
  ShareFnType get shareOpaqueRoomCloseReason;
  OpaqueTypeFinalizer get RoomCloseReasonFinalizer;

  DropFnType get dropOpaqueRoomHandle;
  ShareFnType get shareOpaqueRoomHandle;
  OpaqueTypeFinalizer get RoomHandleFinalizer;
}

@sealed
class ApiWrapDeviceVideoTrackConstraints extends FrbOpaque {
  final ApiApi bridge;
  ApiWrapDeviceVideoTrackConstraints.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueApiWrapDeviceVideoTrackConstraints;

  @override
  ShareFnType get shareFn =>
      bridge.shareOpaqueApiWrapDeviceVideoTrackConstraints;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ApiWrapDeviceVideoTrackConstraintsFinalizer;
}

@sealed
class ApiWrapDisplayVideoTrackConstraints extends FrbOpaque {
  final ApiApi bridge;
  ApiWrapDisplayVideoTrackConstraints.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueApiWrapDisplayVideoTrackConstraints;

  @override
  ShareFnType get shareFn =>
      bridge.shareOpaqueApiWrapDisplayVideoTrackConstraints;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ApiWrapDisplayVideoTrackConstraintsFinalizer;
}

@sealed
class ApiWrapVecLocalMediaTrack extends FrbOpaque {
  final ApiApi bridge;
  ApiWrapVecLocalMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueApiWrapVecLocalMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueApiWrapVecLocalMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ApiWrapVecLocalMediaTrackFinalizer;
}

@sealed
class ApiWrapVecMediaDeviceInfo extends FrbOpaque {
  final ApiApi bridge;
  ApiWrapVecMediaDeviceInfo.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueApiWrapVecMediaDeviceInfo;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueApiWrapVecMediaDeviceInfo;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ApiWrapVecMediaDeviceInfoFinalizer;
}

@sealed
class ApiWrapVecMediaDisplayInfo extends FrbOpaque {
  final ApiApi bridge;
  ApiWrapVecMediaDisplayInfo.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueApiWrapVecMediaDisplayInfo;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueApiWrapVecMediaDisplayInfo;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ApiWrapVecMediaDisplayInfoFinalizer;
}

@sealed
class AudioTrackConstraints extends FrbOpaque {
  final ApiApi bridge;
  AudioTrackConstraints.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueAudioTrackConstraints;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueAudioTrackConstraints;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.AudioTrackConstraintsFinalizer;
}

@sealed
class ConnectionHandle extends FrbOpaque {
  final ApiApi bridge;
  ConnectionHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueConnectionHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueConnectionHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ConnectionHandleFinalizer;
}

@sealed
class Jason extends FrbOpaque {
  final ApiApi bridge;
  Jason.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueJason;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueJason;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.JasonFinalizer;
}

@sealed
class LocalMediaTrack extends FrbOpaque {
  final ApiApi bridge;
  LocalMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueLocalMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueLocalMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.LocalMediaTrackFinalizer;
}

@sealed
class MediaDeviceInfo extends FrbOpaque {
  final ApiApi bridge;
  MediaDeviceInfo.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMediaDeviceInfo;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMediaDeviceInfo;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MediaDeviceInfoFinalizer;
}

@sealed
class MediaDisplayInfo extends FrbOpaque {
  final ApiApi bridge;
  MediaDisplayInfo.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMediaDisplayInfo;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMediaDisplayInfo;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MediaDisplayInfoFinalizer;
}

@sealed
class MediaManagerHandle extends FrbOpaque {
  final ApiApi bridge;
  MediaManagerHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMediaManagerHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMediaManagerHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MediaManagerHandleFinalizer;
}

@sealed
class MediaStreamSettings extends FrbOpaque {
  final ApiApi bridge;
  MediaStreamSettings.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMediaStreamSettings;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMediaStreamSettings;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.MediaStreamSettingsFinalizer;
}

@sealed
class ReconnectHandle extends FrbOpaque {
  final ApiApi bridge;
  ReconnectHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueReconnectHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueReconnectHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ReconnectHandleFinalizer;
}

@sealed
class RemoteMediaTrack extends FrbOpaque {
  final ApiApi bridge;
  RemoteMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRemoteMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRemoteMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RemoteMediaTrackFinalizer;
}

@sealed
class RoomCloseReason extends FrbOpaque {
  final ApiApi bridge;
  RoomCloseReason.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRoomCloseReason;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRoomCloseReason;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RoomCloseReasonFinalizer;
}

@sealed
class RoomHandle extends FrbOpaque {
  final ApiApi bridge;
  RoomHandle.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRoomHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRoomHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RoomHandleFinalizer;
}

class ApiApiImpl implements ApiApi {
  final ApiApiPlatform _platform;
  factory ApiApiImpl(ExternalLibrary dylib) =>
      ApiApiImpl.raw(ApiApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ApiApiImpl.wasm(FutureOr<WasmModule> module) =>
      ApiApiImpl(module as ExternalLibrary);
  ApiApiImpl.raw(this._platform);
  AudioTrackConstraints audioTrackConstraintsNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_audio_track_constraints_new(),
      parseSuccessData: _wire2api_SyncReturn_AudioTrackConstraints,
      constMeta: kAudioTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "audio_track_constraints_new",
        argNames: [],
      );

  AudioTrackConstraints audioTrackConstraintsDeviceId(
      {required AudioTrackConstraints track,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_AudioTrackConstraints(track);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_audio_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_AudioTrackConstraints,
      constMeta: kAudioTrackConstraintsDeviceIdConstMeta,
      argValues: [track, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAudioTrackConstraintsDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "audio_track_constraints_device_id",
        argNames: ["track", "deviceId"],
      );

  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_connection_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ConnectionHandle,
      constMeta: kConnectionHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_from_ptr",
        argNames: ["ptr"],
      );

  void connectionHandleOnClose(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnCloseConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_on_close",
        argNames: ["connection", "f"],
      );

  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_remote_track_added(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnRemoteTrackAddedConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_remote_track_added",
            argNames: ["connection", "f"],
          );

  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_quality_score_update(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnQualityScoreUpdateConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_quality_score_update",
            argNames: ["connection", "f"],
          );

  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_get_remote_member_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kConnectionHandleGetRemoteMemberIdConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_get_remote_member_id",
            argNames: ["connection"],
          );

  Object connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kConnectionHandleEnableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_audio",
            argNames: ["connection"],
          );

  Object connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kConnectionHandleDisableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_audio",
            argNames: ["connection"],
          );

  Object connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kConnectionHandleEnableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  Object connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kConnectionHandleDisableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  ApiWrapDeviceVideoTrackConstraints deviceVideoTrackConstraintsNew(
      {dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_device_video_track_constraints_new(),
      parseSuccessData: _wire2api_SyncReturn_ApiWrapDeviceVideoTrackConstraints,
      constMeta: kDeviceVideoTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeviceVideoTrackConstraintsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "device_video_track_constraints_new",
        argNames: [],
      );

  void deviceVideoTrackConstraintsDeviceId(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsDeviceIdConstMeta,
      argValues: [constraints, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsDeviceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_device_id",
            argNames: ["constraints", "deviceId"],
          );

  void deviceVideoTrackConstraintsExactFacingMode(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u8(facingMode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_facing_mode(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactFacingModeConstMeta,
      argValues: [constraints, facingMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactFacingModeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_facing_mode",
            argNames: ["constraints", "facingMode"],
          );

  void deviceVideoTrackConstraintsIdealFacingMode(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int facingMode,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_i64(facingMode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_facing_mode(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealFacingModeConstMeta,
      argValues: [constraints, facingMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealFacingModeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_facing_mode",
            argNames: ["constraints", "facingMode"],
          );

  void deviceVideoTrackConstraintsExactHeight(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactHeightConstMeta,
      argValues: [constraints, exactHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_height",
            argNames: ["constraints", "exactHeight"],
          );

  void deviceVideoTrackConstraintsIdealHeight(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealHeightConstMeta,
      argValues: [constraints, idealHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_height",
            argNames: ["constraints", "idealHeight"],
          );

  void deviceVideoTrackConstraintsExactWidth(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactWidthConstMeta,
      argValues: [constraints, exactWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_width",
            argNames: ["constraints", "exactWidth"],
          );

  void deviceVideoTrackConstraintsIdealWidth(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealWidthConstMeta,
      argValues: [constraints, idealWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_width",
            argNames: ["constraints", "idealWidth"],
          );

  void deviceVideoTrackConstraintsHeightInRange(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_i64(min);
    var arg2 = _platform.api2wire_i64(max);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_height_in_range(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsHeightInRangeConstMeta,
      argValues: [constraints, min, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsHeightInRangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_height_in_range",
            argNames: ["constraints", "min", "max"],
          );

  void deviceVideoTrackConstraintsWidthInRange(
      {required ApiWrapDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(min);
    var arg2 = api2wire_u32(max);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_width_in_range(arg0, arg1, arg2),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsWidthInRangeConstMeta,
      argValues: [constraints, min, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsWidthInRangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_width_in_range",
            argNames: ["constraints", "min", "max"],
          );

  ApiWrapDisplayVideoTrackConstraints displayVideoTrackConstraintsNew(
      {dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_display_video_track_constraints_new(),
      parseSuccessData:
          _wire2api_SyncReturn_ApiWrapDisplayVideoTrackConstraints,
      constMeta: kDisplayVideoTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsNewConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_new",
            argNames: [],
          );

  void displayVideoTrackConstraintsDeviceId(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsDeviceIdConstMeta,
      argValues: [constraints, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsDeviceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_device_id",
            argNames: ["constraints", "deviceId"],
          );

  void displayVideoTrackConstraintsExactHeight(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_exact_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsExactHeightConstMeta,
      argValues: [constraints, exactHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_exact_height",
            argNames: ["constraints", "exactHeight"],
          );

  void displayVideoTrackConstraintsIdealHeight(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_ideal_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsIdealHeightConstMeta,
      argValues: [constraints, idealHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_ideal_height",
            argNames: ["constraints", "idealHeight"],
          );

  void displayVideoTrackConstraintsExactWidth(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_exact_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsExactWidthConstMeta,
      argValues: [constraints, exactWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_exact_width",
            argNames: ["constraints", "exactWidth"],
          );

  void displayVideoTrackConstraintsIdealWidth(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_ideal_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsIdealWidthConstMeta,
      argValues: [constraints, idealWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_ideal_width",
            argNames: ["constraints", "idealWidth"],
          );

  void displayVideoTrackConstraintsIdealFrameRate(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int idealFrameRate,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealFrameRate);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_ideal_frame_rate(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsIdealFrameRateConstMeta,
      argValues: [constraints, idealFrameRate],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsIdealFrameRateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_ideal_frame_rate",
            argNames: ["constraints", "idealFrameRate"],
          );

  void displayVideoTrackConstraintsExactFrameRate(
      {required ApiWrapDisplayVideoTrackConstraints constraints,
      required int exactFrameRate,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactFrameRate);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_display_video_track_constraints_exact_frame_rate(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDisplayVideoTrackConstraintsExactFrameRateConstMeta,
      argValues: [constraints, exactFrameRate],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisplayVideoTrackConstraintsExactFrameRateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "display_video_track_constraints_exact_frame_rate",
            argNames: ["constraints", "exactFrameRate"],
          );

  Jason jasonNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_new(),
      parseSuccessData: _wire2api_SyncReturn_Jason,
      constMeta: kJasonNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_new",
        argNames: [],
      );

  RoomHandle jasonInitRoom({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_init_room(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomHandle,
      constMeta: kJasonInitRoomConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_init_room",
        argNames: ["jason"],
      );

  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_media_manager(arg0),
      parseSuccessData: _wire2api_SyncReturn_MediaManagerHandle,
      constMeta: kJasonMediaManagerConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_media_manager",
        argNames: ["jason"],
      );

  void jasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    var arg1 = _platform.api2wire_RoomHandle(roomToDelete);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_close_room(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kJasonCloseRoomConstMeta,
      argValues: [jason, roomToDelete],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_close_room",
        argNames: ["jason", "roomToDelete"],
      );

  void jasonDispose({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_dispose(arg0),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kJasonDisposeConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_dispose",
        argNames: ["jason"],
      );

  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_LocalMediaTrack,
      constMeta: kLocalMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_from_ptr",
        argNames: ["ptr"],
      );

  ApiWrapVecLocalMediaTrack vecLocalTracksFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_local_tracks_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ApiWrapVecLocalMediaTrack,
      constMeta: kVecLocalTracksFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_local_tracks_from_ptr",
        argNames: ["ptr"],
      );

  LocalMediaTrack? vecLocalTracksPop(
      {required ApiWrapVecLocalMediaTrack vec, dynamic hint}) {
    var arg0 = _platform.api2wire_ApiWrapVecLocalMediaTrack(vec);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_local_tracks_pop(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_LocalMediaTrack,
      constMeta: kVecLocalTracksPopConstMeta,
      argValues: [vec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksPopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_local_tracks_pop",
        argNames: ["vec"],
      );

  Object localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_get_track(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kLocalMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_get_track",
        argNames: ["track"],
      );

  int localMediaTrackKind({required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kLocalMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_kind",
        argNames: ["track"],
      );

  int localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_local_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kLocalMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_media_source_kind",
        argNames: ["track"],
      );

  ApiWrapVecMediaDeviceInfo vecMediaDeviceInfoFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_device_info_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ApiWrapVecMediaDeviceInfo,
      constMeta: kVecMediaDeviceInfoFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_device_info_from_ptr",
        argNames: ["ptr"],
      );

  MediaDeviceInfo? vecMediaDeviceInfoPop(
      {required ApiWrapVecMediaDeviceInfo vec, dynamic hint}) {
    var arg0 = _platform.api2wire_ApiWrapVecMediaDeviceInfo(vec);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_device_info_pop(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_MediaDeviceInfo,
      constMeta: kVecMediaDeviceInfoPopConstMeta,
      argValues: [vec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoPopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_device_info_pop",
        argNames: ["vec"],
      );

  String mediaDeviceInfoDeviceId(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_device_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDeviceInfoDeviceIdConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_device_id",
        argNames: ["mediaDevice"],
      );

  int mediaDeviceInfoKind(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kMediaDeviceInfoKindConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_kind",
        argNames: ["mediaDevice"],
      );

  String mediaDeviceInfoLabel(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_label(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDeviceInfoLabelConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_label",
        argNames: ["mediaDevice"],
      );

  String? mediaDeviceInfoGroupId(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_group_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_String,
      constMeta: kMediaDeviceInfoGroupIdConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoGroupIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_group_id",
        argNames: ["mediaDevice"],
      );

  ApiWrapVecMediaDisplayInfo vecMediaDisplayInfoFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_display_info_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ApiWrapVecMediaDisplayInfo,
      constMeta: kVecMediaDisplayInfoFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_display_info_from_ptr",
        argNames: ["ptr"],
      );

  MediaDisplayInfo? vecMediaDisplayInfoPop(
      {required ApiWrapVecMediaDisplayInfo vec, dynamic hint}) {
    var arg0 = _platform.api2wire_ApiWrapVecMediaDisplayInfo(vec);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_display_info_pop(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_MediaDisplayInfo,
      constMeta: kVecMediaDisplayInfoPopConstMeta,
      argValues: [vec],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoPopConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_display_info_pop",
        argNames: ["vec"],
      );

  String mediaDisplayInfoDeviceId(
      {required MediaDisplayInfo mediaDisplay, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDisplayInfo(mediaDisplay);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_display_info_device_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDisplayInfoDeviceIdConstMeta,
      argValues: [mediaDisplay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_display_info_device_id",
        argNames: ["mediaDisplay"],
      );

  String? mediaDisplayInfoTitle(
      {required MediaDisplayInfo mediaDisplay, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDisplayInfo(mediaDisplay);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_display_info_title(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_String,
      constMeta: kMediaDisplayInfoTitleConstMeta,
      argValues: [mediaDisplay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoTitleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_display_info_title",
        argNames: ["mediaDisplay"],
      );

  Object mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required MediaStreamSettings caps,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_MediaStreamSettings(caps);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_init_local_tracks(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleInitLocalTracksConstMeta,
      argValues: [manager, caps],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_init_local_tracks",
            argNames: ["manager", "caps"],
          );

  Object mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_devices(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleEnumerateDevicesConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_devices",
            argNames: ["manager"],
          );

  Object mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_displays(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleEnumerateDisplaysConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_displays",
            argNames: ["manager"],
          );

  Object mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_output_audio_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleSetOutputAudioIdConstMeta,
      argValues: [manager, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_output_audio_id",
            argNames: ["manager", "deviceId"],
          );

  Object mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_i64(level);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_microphone_volume(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleSetMicrophoneVolumeConstMeta,
      argValues: [manager, level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_microphone_volume",
            argNames: ["manager", "level"],
          );

  Object mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_microphone_volume_is_available(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume_is_available",
            argNames: ["manager"],
          );

  Object mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_microphone_volume(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kMediaManagerHandleMicrophoneVolumeConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume",
            argNames: ["manager"],
          );

  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_on_device_change(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaManagerHandleOnDeviceChangeConstMeta,
      argValues: [manager, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleOnDeviceChangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_on_device_change",
            argNames: ["manager", "cb"],
          );

  MediaStreamSettings mediaStreamSettingsNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_stream_settings_new(),
      parseSuccessData: _wire2api_SyncReturn_MediaStreamSettings,
      constMeta: kMediaStreamSettingsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_new",
        argNames: [],
      );

  MediaStreamSettings mediaStreamSettingsAudio(
      {required MediaStreamSettings mediaStreamSettings,
      required AudioTrackConstraints constraints,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaStreamSettings(mediaStreamSettings);
    var arg1 = _platform.api2wire_AudioTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_audio(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MediaStreamSettings,
      constMeta: kMediaStreamSettingsAudioConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_audio",
        argNames: ["mediaStreamSettings", "constraints"],
      );

  MediaStreamSettings mediaStreamSettingsDeviceVideo(
      {required MediaStreamSettings mediaStreamSettings,
      required ApiWrapDeviceVideoTrackConstraints constraints,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaStreamSettings(mediaStreamSettings);
    var arg1 =
        _platform.api2wire_ApiWrapDeviceVideoTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_device_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MediaStreamSettings,
      constMeta: kMediaStreamSettingsDeviceVideoConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDeviceVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_device_video",
        argNames: ["mediaStreamSettings", "constraints"],
      );

  MediaStreamSettings mediaStreamSettingsDisplayVideo(
      {required MediaStreamSettings mediaStreamSettings,
      required ApiWrapDisplayVideoTrackConstraints constraints,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaStreamSettings(mediaStreamSettings);
    var arg1 =
        _platform.api2wire_ApiWrapDisplayVideoTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_display_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MediaStreamSettings,
      constMeta: kMediaStreamSettingsDisplayVideoConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaStreamSettingsDisplayVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_stream_settings_display_video",
            argNames: ["mediaStreamSettings", "constraints"],
          );

  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_reconnect_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_ReconnectHandle,
      constMeta: kReconnectHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reconnect_handle_from_ptr",
        argNames: ["ptr"],
      );

  Object reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = _platform.api2wire_i64(delayMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_delay(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kReconnectHandleReconnectWithDelayConstMeta,
      argValues: [reconnectHandle, delayMs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_delay",
            argNames: ["reconnectHandle", "delayMs"],
          );

  Object reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = _platform.api2wire_i64(startingDelay);
    var arg2 = api2wire_f64(multiplier);
    var arg3 = api2wire_u32(maxDelay);
    var arg4 = _platform.api2wire_opt_box_autoadd_u32(maxElapsedTimeMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_backoff(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kReconnectHandleReconnectWithBackoffConstMeta,
      argValues: [
        reconnectHandle,
        startingDelay,
        multiplier,
        maxDelay,
        maxElapsedTimeMs
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_backoff",
            argNames: [
              "reconnectHandle",
              "startingDelay",
              "multiplier",
              "maxDelay",
              "maxElapsedTimeMs"
            ],
          );

  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RemoteMediaTrack,
      constMeta: kRemoteMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_from_ptr",
        argNames: ["ptr"],
      );

  Object remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_get_track(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRemoteMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_get_track",
        argNames: ["track"],
      );

  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_muted(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnMutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_muted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_unmuted(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnUnmutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_unmuted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_stopped(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnStoppedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_stopped",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_remote_media_track_on_media_direction_changed(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnMediaDirectionChangedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_on_media_direction_changed",
            argNames: ["track", "f"],
          );

  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_muted(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRemoteMediaTrackMutedConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_muted",
        argNames: ["track"],
      );

  int remoteMediaTrackKind({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_kind",
        argNames: ["track"],
      );

  int remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackMediaSourceKindConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_media_source_kind",
            argNames: ["track"],
          );

  int remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_direction(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackMediaDirectionConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_media_direction",
        argNames: ["track"],
      );

  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_from_ptr(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomCloseReason,
      constMeta: kRoomCloseReasonFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_from_ptr",
        argNames: ["ptr"],
      );

  String roomCloseReasonReason(
      {required RoomCloseReason roomCloseReason, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomCloseReason(roomCloseReason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_reason(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kRoomCloseReasonReasonConstMeta,
      argValues: [roomCloseReason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonReasonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_reason",
        argNames: ["roomCloseReason"],
      );

  bool roomCloseReasonIsClosedByServer(
      {required RoomCloseReason roomCloseReason, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomCloseReason(roomCloseReason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_close_reason_is_closed_by_server(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRoomCloseReasonIsClosedByServerConstMeta,
      argValues: [roomCloseReason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomCloseReasonIsClosedByServerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_close_reason_is_closed_by_server",
            argNames: ["roomCloseReason"],
          );

  bool roomCloseReasonIsErr(
      {required RoomCloseReason roomCloseReason, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomCloseReason(roomCloseReason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_is_err(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRoomCloseReasonIsErrConstMeta,
      argValues: [roomCloseReason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonIsErrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_is_err",
        argNames: ["roomCloseReason"],
      );

  Object roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_String(token);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_join(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleJoinConstMeta,
      argValues: [roomHandle, token],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_join",
        argNames: ["roomHandle", "token"],
      );

  Object roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required MediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_MediaStreamSettings(settings);
    var arg2 = stopFirst;
    var arg3 = rollbackOnFail;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_room_handle_set_local_media_settings(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleSetLocalMediaSettingsConstMeta,
      argValues: [roomHandle, settings, stopFirst, rollbackOnFail],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomHandleSetLocalMediaSettingsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_handle_set_local_media_settings",
            argNames: ["roomHandle", "settings", "stopFirst", "rollbackOnFail"],
          );

  Object roomHandleMuteAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleMuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleUnmuteAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleUnmuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleEnableAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleEnableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleDisableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleMuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleUnmuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleEnableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleDisableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleEnableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleDisableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleEnableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_Object,
      constMeta: kRoomHandleDisableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_new_connection(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnNewConnectionConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_new_connection",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnCloseConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_close",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_local_track(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnLocalTrackConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_local_track",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_connection_loss(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnConnectionLossConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_connection_loss",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_failed_local_media(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnFailedLocalMediaConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_failed_local_media",
        argNames: ["roomHandle", "cb"],
      );

  DropFnType get dropOpaqueApiWrapDeviceVideoTrackConstraints =>
      _platform.inner.drop_opaque_ApiWrapDeviceVideoTrackConstraints;
  ShareFnType get shareOpaqueApiWrapDeviceVideoTrackConstraints =>
      _platform.inner.share_opaque_ApiWrapDeviceVideoTrackConstraints;
  OpaqueTypeFinalizer get ApiWrapDeviceVideoTrackConstraintsFinalizer =>
      _platform.ApiWrapDeviceVideoTrackConstraintsFinalizer;

  DropFnType get dropOpaqueApiWrapDisplayVideoTrackConstraints =>
      _platform.inner.drop_opaque_ApiWrapDisplayVideoTrackConstraints;
  ShareFnType get shareOpaqueApiWrapDisplayVideoTrackConstraints =>
      _platform.inner.share_opaque_ApiWrapDisplayVideoTrackConstraints;
  OpaqueTypeFinalizer get ApiWrapDisplayVideoTrackConstraintsFinalizer =>
      _platform.ApiWrapDisplayVideoTrackConstraintsFinalizer;

  DropFnType get dropOpaqueApiWrapVecLocalMediaTrack =>
      _platform.inner.drop_opaque_ApiWrapVecLocalMediaTrack;
  ShareFnType get shareOpaqueApiWrapVecLocalMediaTrack =>
      _platform.inner.share_opaque_ApiWrapVecLocalMediaTrack;
  OpaqueTypeFinalizer get ApiWrapVecLocalMediaTrackFinalizer =>
      _platform.ApiWrapVecLocalMediaTrackFinalizer;

  DropFnType get dropOpaqueApiWrapVecMediaDeviceInfo =>
      _platform.inner.drop_opaque_ApiWrapVecMediaDeviceInfo;
  ShareFnType get shareOpaqueApiWrapVecMediaDeviceInfo =>
      _platform.inner.share_opaque_ApiWrapVecMediaDeviceInfo;
  OpaqueTypeFinalizer get ApiWrapVecMediaDeviceInfoFinalizer =>
      _platform.ApiWrapVecMediaDeviceInfoFinalizer;

  DropFnType get dropOpaqueApiWrapVecMediaDisplayInfo =>
      _platform.inner.drop_opaque_ApiWrapVecMediaDisplayInfo;
  ShareFnType get shareOpaqueApiWrapVecMediaDisplayInfo =>
      _platform.inner.share_opaque_ApiWrapVecMediaDisplayInfo;
  OpaqueTypeFinalizer get ApiWrapVecMediaDisplayInfoFinalizer =>
      _platform.ApiWrapVecMediaDisplayInfoFinalizer;

  DropFnType get dropOpaqueAudioTrackConstraints =>
      _platform.inner.drop_opaque_AudioTrackConstraints;
  ShareFnType get shareOpaqueAudioTrackConstraints =>
      _platform.inner.share_opaque_AudioTrackConstraints;
  OpaqueTypeFinalizer get AudioTrackConstraintsFinalizer =>
      _platform.AudioTrackConstraintsFinalizer;

  DropFnType get dropOpaqueConnectionHandle =>
      _platform.inner.drop_opaque_ConnectionHandle;
  ShareFnType get shareOpaqueConnectionHandle =>
      _platform.inner.share_opaque_ConnectionHandle;
  OpaqueTypeFinalizer get ConnectionHandleFinalizer =>
      _platform.ConnectionHandleFinalizer;

  DropFnType get dropOpaqueJason => _platform.inner.drop_opaque_Jason;
  ShareFnType get shareOpaqueJason => _platform.inner.share_opaque_Jason;
  OpaqueTypeFinalizer get JasonFinalizer => _platform.JasonFinalizer;

  DropFnType get dropOpaqueLocalMediaTrack =>
      _platform.inner.drop_opaque_LocalMediaTrack;
  ShareFnType get shareOpaqueLocalMediaTrack =>
      _platform.inner.share_opaque_LocalMediaTrack;
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer =>
      _platform.LocalMediaTrackFinalizer;

  DropFnType get dropOpaqueMediaDeviceInfo =>
      _platform.inner.drop_opaque_MediaDeviceInfo;
  ShareFnType get shareOpaqueMediaDeviceInfo =>
      _platform.inner.share_opaque_MediaDeviceInfo;
  OpaqueTypeFinalizer get MediaDeviceInfoFinalizer =>
      _platform.MediaDeviceInfoFinalizer;

  DropFnType get dropOpaqueMediaDisplayInfo =>
      _platform.inner.drop_opaque_MediaDisplayInfo;
  ShareFnType get shareOpaqueMediaDisplayInfo =>
      _platform.inner.share_opaque_MediaDisplayInfo;
  OpaqueTypeFinalizer get MediaDisplayInfoFinalizer =>
      _platform.MediaDisplayInfoFinalizer;

  DropFnType get dropOpaqueMediaManagerHandle =>
      _platform.inner.drop_opaque_MediaManagerHandle;
  ShareFnType get shareOpaqueMediaManagerHandle =>
      _platform.inner.share_opaque_MediaManagerHandle;
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer =>
      _platform.MediaManagerHandleFinalizer;

  DropFnType get dropOpaqueMediaStreamSettings =>
      _platform.inner.drop_opaque_MediaStreamSettings;
  ShareFnType get shareOpaqueMediaStreamSettings =>
      _platform.inner.share_opaque_MediaStreamSettings;
  OpaqueTypeFinalizer get MediaStreamSettingsFinalizer =>
      _platform.MediaStreamSettingsFinalizer;

  DropFnType get dropOpaqueReconnectHandle =>
      _platform.inner.drop_opaque_ReconnectHandle;
  ShareFnType get shareOpaqueReconnectHandle =>
      _platform.inner.share_opaque_ReconnectHandle;
  OpaqueTypeFinalizer get ReconnectHandleFinalizer =>
      _platform.ReconnectHandleFinalizer;

  DropFnType get dropOpaqueRemoteMediaTrack =>
      _platform.inner.drop_opaque_RemoteMediaTrack;
  ShareFnType get shareOpaqueRemoteMediaTrack =>
      _platform.inner.share_opaque_RemoteMediaTrack;
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer =>
      _platform.RemoteMediaTrackFinalizer;

  DropFnType get dropOpaqueRoomCloseReason =>
      _platform.inner.drop_opaque_RoomCloseReason;
  ShareFnType get shareOpaqueRoomCloseReason =>
      _platform.inner.share_opaque_RoomCloseReason;
  OpaqueTypeFinalizer get RoomCloseReasonFinalizer =>
      _platform.RoomCloseReasonFinalizer;

  DropFnType get dropOpaqueRoomHandle => _platform.inner.drop_opaque_RoomHandle;
  ShareFnType get shareOpaqueRoomHandle =>
      _platform.inner.share_opaque_RoomHandle;
  OpaqueTypeFinalizer get RoomHandleFinalizer => _platform.RoomHandleFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ApiWrapDeviceVideoTrackConstraints
      _wire2api_ApiWrapDeviceVideoTrackConstraints(dynamic raw) {
    return ApiWrapDeviceVideoTrackConstraints.fromRaw(raw[0], raw[1], this);
  }

  ApiWrapDisplayVideoTrackConstraints
      _wire2api_ApiWrapDisplayVideoTrackConstraints(dynamic raw) {
    return ApiWrapDisplayVideoTrackConstraints.fromRaw(raw[0], raw[1], this);
  }

  ApiWrapVecLocalMediaTrack _wire2api_ApiWrapVecLocalMediaTrack(dynamic raw) {
    return ApiWrapVecLocalMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  ApiWrapVecMediaDeviceInfo _wire2api_ApiWrapVecMediaDeviceInfo(dynamic raw) {
    return ApiWrapVecMediaDeviceInfo.fromRaw(raw[0], raw[1], this);
  }

  ApiWrapVecMediaDisplayInfo _wire2api_ApiWrapVecMediaDisplayInfo(dynamic raw) {
    return ApiWrapVecMediaDisplayInfo.fromRaw(raw[0], raw[1], this);
  }

  AudioTrackConstraints _wire2api_AudioTrackConstraints(dynamic raw) {
    return AudioTrackConstraints.fromRaw(raw[0], raw[1], this);
  }

  ConnectionHandle _wire2api_ConnectionHandle(dynamic raw) {
    return ConnectionHandle.fromRaw(raw[0], raw[1], this);
  }

  Object _wire2api_DartOpaque(dynamic raw) {
    return _platform.inner.get_dart_object(raw);
  }

  Jason _wire2api_Jason(dynamic raw) {
    return Jason.fromRaw(raw[0], raw[1], this);
  }

  LocalMediaTrack _wire2api_LocalMediaTrack(dynamic raw) {
    return LocalMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  MediaDeviceInfo _wire2api_MediaDeviceInfo(dynamic raw) {
    return MediaDeviceInfo.fromRaw(raw[0], raw[1], this);
  }

  MediaDisplayInfo _wire2api_MediaDisplayInfo(dynamic raw) {
    return MediaDisplayInfo.fromRaw(raw[0], raw[1], this);
  }

  MediaManagerHandle _wire2api_MediaManagerHandle(dynamic raw) {
    return MediaManagerHandle.fromRaw(raw[0], raw[1], this);
  }

  MediaStreamSettings _wire2api_MediaStreamSettings(dynamic raw) {
    return MediaStreamSettings.fromRaw(raw[0], raw[1], this);
  }

  ReconnectHandle _wire2api_ReconnectHandle(dynamic raw) {
    return ReconnectHandle.fromRaw(raw[0], raw[1], this);
  }

  RemoteMediaTrack _wire2api_RemoteMediaTrack(dynamic raw) {
    return RemoteMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  RoomCloseReason _wire2api_RoomCloseReason(dynamic raw) {
    return RoomCloseReason.fromRaw(raw[0], raw[1], this);
  }

  RoomHandle _wire2api_RoomHandle(dynamic raw) {
    return RoomHandle.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  ApiWrapDeviceVideoTrackConstraints
      _wire2api_SyncReturn_ApiWrapDeviceVideoTrackConstraints(dynamic raw) {
    return ApiWrapDeviceVideoTrackConstraints.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  ApiWrapDisplayVideoTrackConstraints
      _wire2api_SyncReturn_ApiWrapDisplayVideoTrackConstraints(dynamic raw) {
    return ApiWrapDisplayVideoTrackConstraints.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  ApiWrapVecLocalMediaTrack _wire2api_SyncReturn_ApiWrapVecLocalMediaTrack(
      dynamic raw) {
    return ApiWrapVecLocalMediaTrack.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  ApiWrapVecMediaDeviceInfo _wire2api_SyncReturn_ApiWrapVecMediaDeviceInfo(
      dynamic raw) {
    return ApiWrapVecMediaDeviceInfo.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  ApiWrapVecMediaDisplayInfo _wire2api_SyncReturn_ApiWrapVecMediaDisplayInfo(
      dynamic raw) {
    return ApiWrapVecMediaDisplayInfo.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  AudioTrackConstraints _wire2api_SyncReturn_AudioTrackConstraints(
      dynamic raw) {
    return AudioTrackConstraints.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  ConnectionHandle _wire2api_SyncReturn_ConnectionHandle(dynamic raw) {
    return ConnectionHandle.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  Jason _wire2api_SyncReturn_Jason(dynamic raw) {
    return Jason.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  LocalMediaTrack _wire2api_SyncReturn_LocalMediaTrack(dynamic raw) {
    return LocalMediaTrack.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  MediaManagerHandle _wire2api_SyncReturn_MediaManagerHandle(dynamic raw) {
    return MediaManagerHandle.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  MediaStreamSettings _wire2api_SyncReturn_MediaStreamSettings(dynamic raw) {
    return MediaStreamSettings.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  Object _wire2api_SyncReturn_Object(dynamic raw) {
    return _platform.inner.get_dart_object(getOpaquePtr(raw));
  }

  LocalMediaTrack? _wire2api_SyncReturn_Option_LocalMediaTrack(dynamic raw) {
    if (raw == null) {
      return null;
    }
    return LocalMediaTrack.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  MediaDeviceInfo? _wire2api_SyncReturn_Option_MediaDeviceInfo(dynamic raw) {
    if (raw == null) {
      return null;
    }
    return MediaDeviceInfo.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  MediaDisplayInfo? _wire2api_SyncReturn_Option_MediaDisplayInfo(dynamic raw) {
    if (raw == null) {
      return null;
    }
    return MediaDisplayInfo.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  String? _wire2api_SyncReturn_Option_String(dynamic raw) {
    if (raw == null) {
      return null;
    }
    return utf8.decode(raw);
  }

  ReconnectHandle _wire2api_SyncReturn_ReconnectHandle(dynamic raw) {
    return ReconnectHandle.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  RemoteMediaTrack _wire2api_SyncReturn_RemoteMediaTrack(dynamic raw) {
    return RemoteMediaTrack.fromRaw(
        getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  RoomCloseReason _wire2api_SyncReturn_RoomCloseReason(dynamic raw) {
    return RoomCloseReason.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  RoomHandle _wire2api_SyncReturn_RoomHandle(dynamic raw) {
    return RoomHandle.fromRaw(getOpaquePtr(raw), getOpaqueSize(raw), this);
  }

  String _wire2api_SyncReturn_String(dynamic raw) {
    return utf8.decode(raw);
  }

  bool _wire2api_SyncReturn_bool(dynamic raw) {
    return uint8ListToBool(raw);
  }

  int _wire2api_SyncReturn_u8(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    return dataView.getUint8(0);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  LocalMediaTrack? _wire2api_opt_LocalMediaTrack(dynamic raw) {
    return raw == null ? null : _wire2api_LocalMediaTrack(raw);
  }

  MediaDeviceInfo? _wire2api_opt_MediaDeviceInfo(dynamic raw) {
    return raw == null ? null : _wire2api_MediaDeviceInfo(raw);
  }

  MediaDisplayInfo? _wire2api_opt_MediaDisplayInfo(dynamic raw) {
    return raw == null ? null : _wire2api_MediaDisplayInfo(raw);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class ApiApiPlatform extends FlutterRustBridgeBase<ApiApiWire> {
  ApiApiPlatform(ffi.DynamicLibrary dylib) : super(ApiApiWire(dylib));

// Section: api2wire

  @protected
  wire_ApiWrapDeviceVideoTrackConstraints
      api2wire_ApiWrapDeviceVideoTrackConstraints(
          ApiWrapDeviceVideoTrackConstraints raw) {
    final ptr = inner.new_ApiWrapDeviceVideoTrackConstraints();
    _api_fill_to_wire_ApiWrapDeviceVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  wire_ApiWrapDisplayVideoTrackConstraints
      api2wire_ApiWrapDisplayVideoTrackConstraints(
          ApiWrapDisplayVideoTrackConstraints raw) {
    final ptr = inner.new_ApiWrapDisplayVideoTrackConstraints();
    _api_fill_to_wire_ApiWrapDisplayVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  wire_ApiWrapVecLocalMediaTrack api2wire_ApiWrapVecLocalMediaTrack(
      ApiWrapVecLocalMediaTrack raw) {
    final ptr = inner.new_ApiWrapVecLocalMediaTrack();
    _api_fill_to_wire_ApiWrapVecLocalMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_ApiWrapVecMediaDeviceInfo api2wire_ApiWrapVecMediaDeviceInfo(
      ApiWrapVecMediaDeviceInfo raw) {
    final ptr = inner.new_ApiWrapVecMediaDeviceInfo();
    _api_fill_to_wire_ApiWrapVecMediaDeviceInfo(raw, ptr);
    return ptr;
  }

  @protected
  wire_ApiWrapVecMediaDisplayInfo api2wire_ApiWrapVecMediaDisplayInfo(
      ApiWrapVecMediaDisplayInfo raw) {
    final ptr = inner.new_ApiWrapVecMediaDisplayInfo();
    _api_fill_to_wire_ApiWrapVecMediaDisplayInfo(raw, ptr);
    return ptr;
  }

  @protected
  wire_AudioTrackConstraints api2wire_AudioTrackConstraints(
      AudioTrackConstraints raw) {
    final ptr = inner.new_AudioTrackConstraints();
    _api_fill_to_wire_AudioTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  wire_ConnectionHandle api2wire_ConnectionHandle(ConnectionHandle raw) {
    final ptr = inner.new_ConnectionHandle();
    _api_fill_to_wire_ConnectionHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_DartOpaque api2wire_DartOpaque(Object raw) {
    inner.dartApi.initApi();
    final ptr = inner.new_DartOpaque();
    _api_fill_to_wire_DartOpaque(raw, ptr);
    return ptr;
  }

  @protected
  wire_Jason api2wire_Jason(Jason raw) {
    final ptr = inner.new_Jason();
    _api_fill_to_wire_Jason(raw, ptr);
    return ptr;
  }

  @protected
  wire_LocalMediaTrack api2wire_LocalMediaTrack(LocalMediaTrack raw) {
    final ptr = inner.new_LocalMediaTrack();
    _api_fill_to_wire_LocalMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_MediaDeviceInfo api2wire_MediaDeviceInfo(MediaDeviceInfo raw) {
    final ptr = inner.new_MediaDeviceInfo();
    _api_fill_to_wire_MediaDeviceInfo(raw, ptr);
    return ptr;
  }

  @protected
  wire_MediaDisplayInfo api2wire_MediaDisplayInfo(MediaDisplayInfo raw) {
    final ptr = inner.new_MediaDisplayInfo();
    _api_fill_to_wire_MediaDisplayInfo(raw, ptr);
    return ptr;
  }

  @protected
  wire_MediaManagerHandle api2wire_MediaManagerHandle(MediaManagerHandle raw) {
    final ptr = inner.new_MediaManagerHandle();
    _api_fill_to_wire_MediaManagerHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_MediaStreamSettings api2wire_MediaStreamSettings(
      MediaStreamSettings raw) {
    final ptr = inner.new_MediaStreamSettings();
    _api_fill_to_wire_MediaStreamSettings(raw, ptr);
    return ptr;
  }

  @protected
  wire_ReconnectHandle api2wire_ReconnectHandle(ReconnectHandle raw) {
    final ptr = inner.new_ReconnectHandle();
    _api_fill_to_wire_ReconnectHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_RemoteMediaTrack api2wire_RemoteMediaTrack(RemoteMediaTrack raw) {
    final ptr = inner.new_RemoteMediaTrack();
    _api_fill_to_wire_RemoteMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_RoomCloseReason api2wire_RoomCloseReason(RoomCloseReason raw) {
    final ptr = inner.new_RoomCloseReason();
    _api_fill_to_wire_RoomCloseReason(raw, ptr);
    return ptr;
  }

  @protected
  wire_RoomHandle api2wire_RoomHandle(RoomHandle raw) {
    final ptr = inner.new_RoomHandle();
    _api_fill_to_wire_RoomHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _ApiWrapDeviceVideoTrackConstraintsFinalizer =
      OpaqueTypeFinalizer(
          inner._drop_opaque_ApiWrapDeviceVideoTrackConstraintsPtr);
  OpaqueTypeFinalizer get ApiWrapDeviceVideoTrackConstraintsFinalizer =>
      _ApiWrapDeviceVideoTrackConstraintsFinalizer;
  late final OpaqueTypeFinalizer _ApiWrapDisplayVideoTrackConstraintsFinalizer =
      OpaqueTypeFinalizer(
          inner._drop_opaque_ApiWrapDisplayVideoTrackConstraintsPtr);
  OpaqueTypeFinalizer get ApiWrapDisplayVideoTrackConstraintsFinalizer =>
      _ApiWrapDisplayVideoTrackConstraintsFinalizer;
  late final OpaqueTypeFinalizer _ApiWrapVecLocalMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ApiWrapVecLocalMediaTrackPtr);
  OpaqueTypeFinalizer get ApiWrapVecLocalMediaTrackFinalizer =>
      _ApiWrapVecLocalMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _ApiWrapVecMediaDeviceInfoFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ApiWrapVecMediaDeviceInfoPtr);
  OpaqueTypeFinalizer get ApiWrapVecMediaDeviceInfoFinalizer =>
      _ApiWrapVecMediaDeviceInfoFinalizer;
  late final OpaqueTypeFinalizer _ApiWrapVecMediaDisplayInfoFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ApiWrapVecMediaDisplayInfoPtr);
  OpaqueTypeFinalizer get ApiWrapVecMediaDisplayInfoFinalizer =>
      _ApiWrapVecMediaDisplayInfoFinalizer;
  late final OpaqueTypeFinalizer _AudioTrackConstraintsFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_AudioTrackConstraintsPtr);
  OpaqueTypeFinalizer get AudioTrackConstraintsFinalizer =>
      _AudioTrackConstraintsFinalizer;
  late final OpaqueTypeFinalizer _ConnectionHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ConnectionHandlePtr);
  OpaqueTypeFinalizer get ConnectionHandleFinalizer =>
      _ConnectionHandleFinalizer;
  late final OpaqueTypeFinalizer _JasonFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_JasonPtr);
  OpaqueTypeFinalizer get JasonFinalizer => _JasonFinalizer;
  late final OpaqueTypeFinalizer _LocalMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_LocalMediaTrackPtr);
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer => _LocalMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _MediaDeviceInfoFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MediaDeviceInfoPtr);
  OpaqueTypeFinalizer get MediaDeviceInfoFinalizer => _MediaDeviceInfoFinalizer;
  late final OpaqueTypeFinalizer _MediaDisplayInfoFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MediaDisplayInfoPtr);
  OpaqueTypeFinalizer get MediaDisplayInfoFinalizer =>
      _MediaDisplayInfoFinalizer;
  late final OpaqueTypeFinalizer _MediaManagerHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MediaManagerHandlePtr);
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer =>
      _MediaManagerHandleFinalizer;
  late final OpaqueTypeFinalizer _MediaStreamSettingsFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MediaStreamSettingsPtr);
  OpaqueTypeFinalizer get MediaStreamSettingsFinalizer =>
      _MediaStreamSettingsFinalizer;
  late final OpaqueTypeFinalizer _ReconnectHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ReconnectHandlePtr);
  OpaqueTypeFinalizer get ReconnectHandleFinalizer => _ReconnectHandleFinalizer;
  late final OpaqueTypeFinalizer _RemoteMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RemoteMediaTrackPtr);
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer =>
      _RemoteMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _RoomCloseReasonFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RoomCloseReasonPtr);
  OpaqueTypeFinalizer get RoomCloseReasonFinalizer => _RoomCloseReasonFinalizer;
  late final OpaqueTypeFinalizer _RoomHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RoomHandlePtr);
  OpaqueTypeFinalizer get RoomHandleFinalizer => _RoomHandleFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_ApiWrapDeviceVideoTrackConstraints(
      ApiWrapDeviceVideoTrackConstraints apiObj,
      wire_ApiWrapDeviceVideoTrackConstraints wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ApiWrapDisplayVideoTrackConstraints(
      ApiWrapDisplayVideoTrackConstraints apiObj,
      wire_ApiWrapDisplayVideoTrackConstraints wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ApiWrapVecLocalMediaTrack(
      ApiWrapVecLocalMediaTrack apiObj,
      wire_ApiWrapVecLocalMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ApiWrapVecMediaDeviceInfo(
      ApiWrapVecMediaDeviceInfo apiObj,
      wire_ApiWrapVecMediaDeviceInfo wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ApiWrapVecMediaDisplayInfo(
      ApiWrapVecMediaDisplayInfo apiObj,
      wire_ApiWrapVecMediaDisplayInfo wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_AudioTrackConstraints(
      AudioTrackConstraints apiObj, wire_AudioTrackConstraints wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ConnectionHandle(
      ConnectionHandle apiObj, wire_ConnectionHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DartOpaque(Object apiObj, wire_DartOpaque wireObj) {
    wireObj.handle = inner.new_dart_opaque(apiObj);
    wireObj.port = dropPort;
  }

  void _api_fill_to_wire_Jason(Jason apiObj, wire_Jason wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_LocalMediaTrack(
      LocalMediaTrack apiObj, wire_LocalMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MediaDeviceInfo(
      MediaDeviceInfo apiObj, wire_MediaDeviceInfo wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MediaDisplayInfo(
      MediaDisplayInfo apiObj, wire_MediaDisplayInfo wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MediaManagerHandle(
      MediaManagerHandle apiObj, wire_MediaManagerHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MediaStreamSettings(
      MediaStreamSettings apiObj, wire_MediaStreamSettings wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ReconnectHandle(
      ReconnectHandle apiObj, wire_ReconnectHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RemoteMediaTrack(
      RemoteMediaTrack apiObj, wire_RemoteMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RoomCloseReason(
      RoomCloseReason apiObj, wire_RoomCloseReason wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RoomHandle(
      RoomHandle apiObj, wire_RoomHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ApiApiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApiApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApiApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturnStruct wire_audio_track_constraints_new() {
    return _wire_audio_track_constraints_new();
  }

  late final _wire_audio_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_audio_track_constraints_new');
  late final _wire_audio_track_constraints_new =
      _wire_audio_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_audio_track_constraints_device_id(
    wire_AudioTrackConstraints track,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_audio_track_constraints_device_id(
      track,
      device_id,
    );
  }

  late final _wire_audio_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_AudioTrackConstraints, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_audio_track_constraints_device_id');
  late final _wire_audio_track_constraints_device_id =
      _wire_audio_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_AudioTrackConstraints, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_connection_handle_from_ptr(
    int ptr,
  ) {
    return _wire_connection_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_connection_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_connection_handle_from_ptr');
  late final _wire_connection_handle_from_ptr =
      _wire_connection_handle_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_connection_handle_on_close(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_close(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_ConnectionHandle,
              wire_DartOpaque)>>('wire_connection_handle_on_close');
  late final _wire_connection_handle_on_close =
      _wire_connection_handle_on_closePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_connection_handle_on_remote_track_added(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_remote_track_added(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_remote_track_addedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ConnectionHandle, wire_DartOpaque)>>(
      'wire_connection_handle_on_remote_track_added');
  late final _wire_connection_handle_on_remote_track_added =
      _wire_connection_handle_on_remote_track_addedPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_connection_handle_on_quality_score_update(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_quality_score_update(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_quality_score_updatePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ConnectionHandle, wire_DartOpaque)>>(
      'wire_connection_handle_on_quality_score_update');
  late final _wire_connection_handle_on_quality_score_update =
      _wire_connection_handle_on_quality_score_updatePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_connection_handle_get_remote_member_id(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_get_remote_member_id(
      connection,
    );
  }

  late final _wire_connection_handle_get_remote_member_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_get_remote_member_id');
  late final _wire_connection_handle_get_remote_member_id =
      _wire_connection_handle_get_remote_member_idPtr
          .asFunction<WireSyncReturnStruct Function(wire_ConnectionHandle)>();

  WireSyncReturnStruct wire_connection_handle_enable_remote_audio(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_enable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_enable_remote_audio');
  late final _wire_connection_handle_enable_remote_audio =
      _wire_connection_handle_enable_remote_audioPtr
          .asFunction<WireSyncReturnStruct Function(wire_ConnectionHandle)>();

  WireSyncReturnStruct wire_connection_handle_disable_remote_audio(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_disable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_disable_remote_audio');
  late final _wire_connection_handle_disable_remote_audio =
      _wire_connection_handle_disable_remote_audioPtr
          .asFunction<WireSyncReturnStruct Function(wire_ConnectionHandle)>();

  WireSyncReturnStruct wire_connection_handle_enable_remote_video(
    wire_ConnectionHandle connection,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_connection_handle_enable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_enable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ConnectionHandle, ffi.Pointer<ffi.Uint8>)>>(
      'wire_connection_handle_enable_remote_video');
  late final _wire_connection_handle_enable_remote_video =
      _wire_connection_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ConnectionHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_connection_handle_disable_remote_video(
    wire_ConnectionHandle connection,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_connection_handle_disable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ConnectionHandle, ffi.Pointer<ffi.Uint8>)>>(
      'wire_connection_handle_disable_remote_video');
  late final _wire_connection_handle_disable_remote_video =
      _wire_connection_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ConnectionHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_device_video_track_constraints_new() {
    return _wire_device_video_track_constraints_new();
  }

  late final _wire_device_video_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_device_video_track_constraints_new');
  late final _wire_device_video_track_constraints_new =
      _wire_device_video_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_device_video_track_constraints_device_id(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_device_video_track_constraints_device_id(
      constraints,
      device_id,
    );
  }

  late final _wire_device_video_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ApiWrapDeviceVideoTrackConstraints,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_device_video_track_constraints_device_id');
  late final _wire_device_video_track_constraints_device_id =
      _wire_device_video_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(wire_ApiWrapDeviceVideoTrackConstraints,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_facing_mode(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int facing_mode,
  ) {
    return _wire_device_video_track_constraints_exact_facing_mode(
      constraints,
      facing_mode,
    );
  }

  late final _wire_device_video_track_constraints_exact_facing_modePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      wire_ApiWrapDeviceVideoTrackConstraints, ffi.Uint8)>>(
          'wire_device_video_track_constraints_exact_facing_mode');
  late final _wire_device_video_track_constraints_exact_facing_mode =
      _wire_device_video_track_constraints_exact_facing_modePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_facing_mode(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int facing_mode,
  ) {
    return _wire_device_video_track_constraints_ideal_facing_mode(
      constraints,
      facing_mode,
    );
  }

  late final _wire_device_video_track_constraints_ideal_facing_modePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      wire_ApiWrapDeviceVideoTrackConstraints, ffi.Int64)>>(
          'wire_device_video_track_constraints_ideal_facing_mode');
  late final _wire_device_video_track_constraints_ideal_facing_mode =
      _wire_device_video_track_constraints_ideal_facing_modePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_height(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int exact_height,
  ) {
    return _wire_device_video_track_constraints_exact_height(
      constraints,
      exact_height,
    );
  }

  late final _wire_device_video_track_constraints_exact_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_ApiWrapDeviceVideoTrackConstraints,
              ffi.Uint32)>>('wire_device_video_track_constraints_exact_height');
  late final _wire_device_video_track_constraints_exact_height =
      _wire_device_video_track_constraints_exact_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_height(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int ideal_height,
  ) {
    return _wire_device_video_track_constraints_ideal_height(
      constraints,
      ideal_height,
    );
  }

  late final _wire_device_video_track_constraints_ideal_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_ApiWrapDeviceVideoTrackConstraints,
              ffi.Uint32)>>('wire_device_video_track_constraints_ideal_height');
  late final _wire_device_video_track_constraints_ideal_height =
      _wire_device_video_track_constraints_ideal_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_width(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int exact_width,
  ) {
    return _wire_device_video_track_constraints_exact_width(
      constraints,
      exact_width,
    );
  }

  late final _wire_device_video_track_constraints_exact_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_ApiWrapDeviceVideoTrackConstraints,
              ffi.Uint32)>>('wire_device_video_track_constraints_exact_width');
  late final _wire_device_video_track_constraints_exact_width =
      _wire_device_video_track_constraints_exact_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_width(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int ideal_width,
  ) {
    return _wire_device_video_track_constraints_ideal_width(
      constraints,
      ideal_width,
    );
  }

  late final _wire_device_video_track_constraints_ideal_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_ApiWrapDeviceVideoTrackConstraints,
              ffi.Uint32)>>('wire_device_video_track_constraints_ideal_width');
  late final _wire_device_video_track_constraints_ideal_width =
      _wire_device_video_track_constraints_ideal_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_height_in_range(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int min,
    int max,
  ) {
    return _wire_device_video_track_constraints_height_in_range(
      constraints,
      min,
      max,
    );
  }

  late final _wire_device_video_track_constraints_height_in_rangePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ApiWrapDeviceVideoTrackConstraints,
                  ffi.Int64,
                  ffi.Int64)>>(
      'wire_device_video_track_constraints_height_in_range');
  late final _wire_device_video_track_constraints_height_in_range =
      _wire_device_video_track_constraints_height_in_rangePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_width_in_range(
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
    int min,
    int max,
  ) {
    return _wire_device_video_track_constraints_width_in_range(
      constraints,
      min,
      max,
    );
  }

  late final _wire_device_video_track_constraints_width_in_rangePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ApiWrapDeviceVideoTrackConstraints,
                  ffi.Uint32,
                  ffi.Uint32)>>(
      'wire_device_video_track_constraints_width_in_range');
  late final _wire_device_video_track_constraints_width_in_range =
      _wire_device_video_track_constraints_width_in_rangePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDeviceVideoTrackConstraints, int, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_new() {
    return _wire_display_video_track_constraints_new();
  }

  late final _wire_display_video_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_display_video_track_constraints_new');
  late final _wire_display_video_track_constraints_new =
      _wire_display_video_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_display_video_track_constraints_device_id(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_display_video_track_constraints_device_id(
      constraints,
      device_id,
    );
  }

  late final _wire_display_video_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ApiWrapDisplayVideoTrackConstraints,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_display_video_track_constraints_device_id');
  late final _wire_display_video_track_constraints_device_id =
      _wire_display_video_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_display_video_track_constraints_exact_height(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    int exact_height,
  ) {
    return _wire_display_video_track_constraints_exact_height(
      constraints,
      exact_height,
    );
  }

  late final _wire_display_video_track_constraints_exact_heightPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ApiWrapDisplayVideoTrackConstraints, ffi.Uint32)>>(
      'wire_display_video_track_constraints_exact_height');
  late final _wire_display_video_track_constraints_exact_height =
      _wire_display_video_track_constraints_exact_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_ideal_height(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    int ideal_height,
  ) {
    return _wire_display_video_track_constraints_ideal_height(
      constraints,
      ideal_height,
    );
  }

  late final _wire_display_video_track_constraints_ideal_heightPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_ApiWrapDisplayVideoTrackConstraints, ffi.Uint32)>>(
      'wire_display_video_track_constraints_ideal_height');
  late final _wire_display_video_track_constraints_ideal_height =
      _wire_display_video_track_constraints_ideal_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_exact_width(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    int exact_width,
  ) {
    return _wire_display_video_track_constraints_exact_width(
      constraints,
      exact_width,
    );
  }

  late final _wire_display_video_track_constraints_exact_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints,
              ffi.Uint32)>>('wire_display_video_track_constraints_exact_width');
  late final _wire_display_video_track_constraints_exact_width =
      _wire_display_video_track_constraints_exact_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_ideal_width(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    int ideal_width,
  ) {
    return _wire_display_video_track_constraints_ideal_width(
      constraints,
      ideal_width,
    );
  }

  late final _wire_display_video_track_constraints_ideal_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints,
              ffi.Uint32)>>('wire_display_video_track_constraints_ideal_width');
  late final _wire_display_video_track_constraints_ideal_width =
      _wire_display_video_track_constraints_ideal_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_ideal_frame_rate(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    int ideal_frame_rate,
  ) {
    return _wire_display_video_track_constraints_ideal_frame_rate(
      constraints,
      ideal_frame_rate,
    );
  }

  late final _wire_display_video_track_constraints_ideal_frame_ratePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      wire_ApiWrapDisplayVideoTrackConstraints, ffi.Uint32)>>(
          'wire_display_video_track_constraints_ideal_frame_rate');
  late final _wire_display_video_track_constraints_ideal_frame_rate =
      _wire_display_video_track_constraints_ideal_frame_ratePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_display_video_track_constraints_exact_frame_rate(
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
    int exact_frame_rate,
  ) {
    return _wire_display_video_track_constraints_exact_frame_rate(
      constraints,
      exact_frame_rate,
    );
  }

  late final _wire_display_video_track_constraints_exact_frame_ratePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      wire_ApiWrapDisplayVideoTrackConstraints, ffi.Uint32)>>(
          'wire_display_video_track_constraints_exact_frame_rate');
  late final _wire_display_video_track_constraints_exact_frame_rate =
      _wire_display_video_track_constraints_exact_frame_ratePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapDisplayVideoTrackConstraints, int)>();

  WireSyncReturnStruct wire_jason_new() {
    return _wire_jason_new();
  }

  late final _wire_jason_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_jason_new');
  late final _wire_jason_new =
      _wire_jason_newPtr.asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_jason_init_room(
    wire_Jason jason,
  ) {
    return _wire_jason_init_room(
      jason,
    );
  }

  late final _wire_jason_init_roomPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(wire_Jason)>>(
          'wire_jason_init_room');
  late final _wire_jason_init_room = _wire_jason_init_roomPtr
      .asFunction<WireSyncReturnStruct Function(wire_Jason)>();

  WireSyncReturnStruct wire_jason_media_manager(
    wire_Jason jason,
  ) {
    return _wire_jason_media_manager(
      jason,
    );
  }

  late final _wire_jason_media_managerPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(wire_Jason)>>(
          'wire_jason_media_manager');
  late final _wire_jason_media_manager = _wire_jason_media_managerPtr
      .asFunction<WireSyncReturnStruct Function(wire_Jason)>();

  WireSyncReturnStruct wire_jason_close_room(
    wire_Jason jason,
    wire_RoomHandle room_to_delete,
  ) {
    return _wire_jason_close_room(
      jason,
      room_to_delete,
    );
  }

  late final _wire_jason_close_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_Jason, wire_RoomHandle)>>('wire_jason_close_room');
  late final _wire_jason_close_room = _wire_jason_close_roomPtr
      .asFunction<WireSyncReturnStruct Function(wire_Jason, wire_RoomHandle)>();

  WireSyncReturnStruct wire_jason_dispose(
    wire_Jason jason,
  ) {
    return _wire_jason_dispose(
      jason,
    );
  }

  late final _wire_jason_disposePtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(wire_Jason)>>(
          'wire_jason_dispose');
  late final _wire_jason_dispose = _wire_jason_disposePtr
      .asFunction<WireSyncReturnStruct Function(wire_Jason)>();

  WireSyncReturnStruct wire_local_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_local_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_local_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_local_media_track_from_ptr');
  late final _wire_local_media_track_from_ptr =
      _wire_local_media_track_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_local_tracks_from_ptr(
    int ptr,
  ) {
    return _wire_vec_local_tracks_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_local_tracks_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_vec_local_tracks_from_ptr');
  late final _wire_vec_local_tracks_from_ptr =
      _wire_vec_local_tracks_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_local_tracks_pop(
    wire_ApiWrapVecLocalMediaTrack vec,
  ) {
    return _wire_vec_local_tracks_pop(
      vec,
    );
  }

  late final _wire_vec_local_tracks_popPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_ApiWrapVecLocalMediaTrack)>>('wire_vec_local_tracks_pop');
  late final _wire_vec_local_tracks_pop =
      _wire_vec_local_tracks_popPtr.asFunction<
          WireSyncReturnStruct Function(wire_ApiWrapVecLocalMediaTrack)>();

  WireSyncReturnStruct wire_local_media_track_get_track(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_get_track(
      track,
    );
  }

  late final _wire_local_media_track_get_trackPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_LocalMediaTrack)>>('wire_local_media_track_get_track');
  late final _wire_local_media_track_get_track =
      _wire_local_media_track_get_trackPtr
          .asFunction<WireSyncReturnStruct Function(wire_LocalMediaTrack)>();

  WireSyncReturnStruct wire_local_media_track_kind(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_kind(
      track,
    );
  }

  late final _wire_local_media_track_kindPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_LocalMediaTrack)>>('wire_local_media_track_kind');
  late final _wire_local_media_track_kind = _wire_local_media_track_kindPtr
      .asFunction<WireSyncReturnStruct Function(wire_LocalMediaTrack)>();

  WireSyncReturnStruct wire_local_media_track_media_source_kind(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_local_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_media_source_kind');
  late final _wire_local_media_track_media_source_kind =
      _wire_local_media_track_media_source_kindPtr
          .asFunction<WireSyncReturnStruct Function(wire_LocalMediaTrack)>();

  WireSyncReturnStruct wire_vec_media_device_info_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_device_info_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_device_info_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_vec_media_device_info_from_ptr');
  late final _wire_vec_media_device_info_from_ptr =
      _wire_vec_media_device_info_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_media_device_info_pop(
    wire_ApiWrapVecMediaDeviceInfo vec,
  ) {
    return _wire_vec_media_device_info_pop(
      vec,
    );
  }

  late final _wire_vec_media_device_info_popPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_ApiWrapVecMediaDeviceInfo)>>(
      'wire_vec_media_device_info_pop');
  late final _wire_vec_media_device_info_pop =
      _wire_vec_media_device_info_popPtr.asFunction<
          WireSyncReturnStruct Function(wire_ApiWrapVecMediaDeviceInfo)>();

  WireSyncReturnStruct wire_media_device_info_device_id(
    wire_MediaDeviceInfo media_device,
  ) {
    return _wire_media_device_info_device_id(
      media_device,
    );
  }

  late final _wire_media_device_info_device_idPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_MediaDeviceInfo)>>('wire_media_device_info_device_id');
  late final _wire_media_device_info_device_id =
      _wire_media_device_info_device_idPtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaDeviceInfo)>();

  WireSyncReturnStruct wire_media_device_info_kind(
    wire_MediaDeviceInfo media_device,
  ) {
    return _wire_media_device_info_kind(
      media_device,
    );
  }

  late final _wire_media_device_info_kindPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_MediaDeviceInfo)>>('wire_media_device_info_kind');
  late final _wire_media_device_info_kind = _wire_media_device_info_kindPtr
      .asFunction<WireSyncReturnStruct Function(wire_MediaDeviceInfo)>();

  WireSyncReturnStruct wire_media_device_info_label(
    wire_MediaDeviceInfo media_device,
  ) {
    return _wire_media_device_info_label(
      media_device,
    );
  }

  late final _wire_media_device_info_labelPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_MediaDeviceInfo)>>('wire_media_device_info_label');
  late final _wire_media_device_info_label = _wire_media_device_info_labelPtr
      .asFunction<WireSyncReturnStruct Function(wire_MediaDeviceInfo)>();

  WireSyncReturnStruct wire_media_device_info_group_id(
    wire_MediaDeviceInfo media_device,
  ) {
    return _wire_media_device_info_group_id(
      media_device,
    );
  }

  late final _wire_media_device_info_group_idPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_MediaDeviceInfo)>>('wire_media_device_info_group_id');
  late final _wire_media_device_info_group_id =
      _wire_media_device_info_group_idPtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaDeviceInfo)>();

  WireSyncReturnStruct wire_vec_media_display_info_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_display_info_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_display_info_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_vec_media_display_info_from_ptr');
  late final _wire_vec_media_display_info_from_ptr =
      _wire_vec_media_display_info_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_vec_media_display_info_pop(
    wire_ApiWrapVecMediaDisplayInfo vec,
  ) {
    return _wire_vec_media_display_info_pop(
      vec,
    );
  }

  late final _wire_vec_media_display_info_popPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_ApiWrapVecMediaDisplayInfo)>>(
      'wire_vec_media_display_info_pop');
  late final _wire_vec_media_display_info_pop =
      _wire_vec_media_display_info_popPtr.asFunction<
          WireSyncReturnStruct Function(wire_ApiWrapVecMediaDisplayInfo)>();

  WireSyncReturnStruct wire_media_display_info_device_id(
    wire_MediaDisplayInfo media_display,
  ) {
    return _wire_media_display_info_device_id(
      media_display,
    );
  }

  late final _wire_media_display_info_device_idPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_MediaDisplayInfo)>>('wire_media_display_info_device_id');
  late final _wire_media_display_info_device_id =
      _wire_media_display_info_device_idPtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaDisplayInfo)>();

  WireSyncReturnStruct wire_media_display_info_title(
    wire_MediaDisplayInfo media_display,
  ) {
    return _wire_media_display_info_title(
      media_display,
    );
  }

  late final _wire_media_display_info_titlePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_MediaDisplayInfo)>>('wire_media_display_info_title');
  late final _wire_media_display_info_title = _wire_media_display_info_titlePtr
      .asFunction<WireSyncReturnStruct Function(wire_MediaDisplayInfo)>();

  WireSyncReturnStruct wire_media_manager_handle_init_local_tracks(
    wire_MediaManagerHandle manager,
    wire_MediaStreamSettings caps,
  ) {
    return _wire_media_manager_handle_init_local_tracks(
      manager,
      caps,
    );
  }

  late final _wire_media_manager_handle_init_local_tracksPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_MediaManagerHandle, wire_MediaStreamSettings)>>(
      'wire_media_manager_handle_init_local_tracks');
  late final _wire_media_manager_handle_init_local_tracks =
      _wire_media_manager_handle_init_local_tracksPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_MediaManagerHandle, wire_MediaStreamSettings)>();

  WireSyncReturnStruct wire_media_manager_handle_enumerate_devices(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_enumerate_devices(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_devicesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_enumerate_devices');
  late final _wire_media_manager_handle_enumerate_devices =
      _wire_media_manager_handle_enumerate_devicesPtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaManagerHandle)>();

  WireSyncReturnStruct wire_media_manager_handle_enumerate_displays(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_enumerate_displays(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_displaysPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_enumerate_displays');
  late final _wire_media_manager_handle_enumerate_displays =
      _wire_media_manager_handle_enumerate_displaysPtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaManagerHandle)>();

  WireSyncReturnStruct wire_media_manager_handle_set_output_audio_id(
    wire_MediaManagerHandle manager,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_media_manager_handle_set_output_audio_id(
      manager,
      device_id,
    );
  }

  late final _wire_media_manager_handle_set_output_audio_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_MediaManagerHandle, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_media_manager_handle_set_output_audio_id');
  late final _wire_media_manager_handle_set_output_audio_id =
      _wire_media_manager_handle_set_output_audio_idPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_MediaManagerHandle, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_media_manager_handle_set_microphone_volume(
    wire_MediaManagerHandle manager,
    int level,
  ) {
    return _wire_media_manager_handle_set_microphone_volume(
      manager,
      level,
    );
  }

  late final _wire_media_manager_handle_set_microphone_volumePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_MediaManagerHandle,
              ffi.Int64)>>('wire_media_manager_handle_set_microphone_volume');
  late final _wire_media_manager_handle_set_microphone_volume =
      _wire_media_manager_handle_set_microphone_volumePtr.asFunction<
          WireSyncReturnStruct Function(wire_MediaManagerHandle, int)>();

  WireSyncReturnStruct wire_media_manager_handle_microphone_volume_is_available(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_microphone_volume_is_available(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volume_is_availablePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(wire_MediaManagerHandle)>>(
          'wire_media_manager_handle_microphone_volume_is_available');
  late final _wire_media_manager_handle_microphone_volume_is_available =
      _wire_media_manager_handle_microphone_volume_is_availablePtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaManagerHandle)>();

  WireSyncReturnStruct wire_media_manager_handle_microphone_volume(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_microphone_volume(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volumePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_microphone_volume');
  late final _wire_media_manager_handle_microphone_volume =
      _wire_media_manager_handle_microphone_volumePtr
          .asFunction<WireSyncReturnStruct Function(wire_MediaManagerHandle)>();

  WireSyncReturnStruct wire_media_manager_handle_on_device_change(
    wire_MediaManagerHandle manager,
    wire_DartOpaque cb,
  ) {
    return _wire_media_manager_handle_on_device_change(
      manager,
      cb,
    );
  }

  late final _wire_media_manager_handle_on_device_changePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_MediaManagerHandle,
              wire_DartOpaque)>>('wire_media_manager_handle_on_device_change');
  late final _wire_media_manager_handle_on_device_change =
      _wire_media_manager_handle_on_device_changePtr.asFunction<
          WireSyncReturnStruct Function(
              wire_MediaManagerHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_media_stream_settings_new() {
    return _wire_media_stream_settings_new();
  }

  late final _wire_media_stream_settings_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_media_stream_settings_new');
  late final _wire_media_stream_settings_new =
      _wire_media_stream_settings_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_media_stream_settings_audio(
    wire_MediaStreamSettings media_stream_settings,
    wire_AudioTrackConstraints constraints,
  ) {
    return _wire_media_stream_settings_audio(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_MediaStreamSettings,
              wire_AudioTrackConstraints)>>('wire_media_stream_settings_audio');
  late final _wire_media_stream_settings_audio =
      _wire_media_stream_settings_audioPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_MediaStreamSettings, wire_AudioTrackConstraints)>();

  WireSyncReturnStruct wire_media_stream_settings_device_video(
    wire_MediaStreamSettings media_stream_settings,
    wire_ApiWrapDeviceVideoTrackConstraints constraints,
  ) {
    return _wire_media_stream_settings_device_video(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_device_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_MediaStreamSettings,
                  wire_ApiWrapDeviceVideoTrackConstraints)>>(
      'wire_media_stream_settings_device_video');
  late final _wire_media_stream_settings_device_video =
      _wire_media_stream_settings_device_videoPtr.asFunction<
          WireSyncReturnStruct Function(wire_MediaStreamSettings,
              wire_ApiWrapDeviceVideoTrackConstraints)>();

  WireSyncReturnStruct wire_media_stream_settings_display_video(
    wire_MediaStreamSettings media_stream_settings,
    wire_ApiWrapDisplayVideoTrackConstraints constraints,
  ) {
    return _wire_media_stream_settings_display_video(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_display_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_MediaStreamSettings,
                  wire_ApiWrapDisplayVideoTrackConstraints)>>(
      'wire_media_stream_settings_display_video');
  late final _wire_media_stream_settings_display_video =
      _wire_media_stream_settings_display_videoPtr.asFunction<
          WireSyncReturnStruct Function(wire_MediaStreamSettings,
              wire_ApiWrapDisplayVideoTrackConstraints)>();

  WireSyncReturnStruct wire_reconnect_handle_from_ptr(
    int ptr,
  ) {
    return _wire_reconnect_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_reconnect_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_reconnect_handle_from_ptr');
  late final _wire_reconnect_handle_from_ptr =
      _wire_reconnect_handle_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_reconnect_handle_reconnect_with_delay(
    wire_ReconnectHandle reconnect_handle,
    int delay_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_delay(
      reconnect_handle,
      delay_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_delayPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_ReconnectHandle,
              ffi.Int64)>>('wire_reconnect_handle_reconnect_with_delay');
  late final _wire_reconnect_handle_reconnect_with_delay =
      _wire_reconnect_handle_reconnect_with_delayPtr.asFunction<
          WireSyncReturnStruct Function(wire_ReconnectHandle, int)>();

  WireSyncReturnStruct wire_reconnect_handle_reconnect_with_backoff(
    wire_ReconnectHandle reconnect_handle,
    int starting_delay,
    double multiplier,
    int max_delay,
    ffi.Pointer<ffi.Uint32> max_elapsed_time_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_backoff(
      reconnect_handle,
      starting_delay,
      multiplier,
      max_delay,
      max_elapsed_time_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_backoffPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_ReconnectHandle, ffi.Int64,
                  ffi.Double, ffi.Uint32, ffi.Pointer<ffi.Uint32>)>>(
      'wire_reconnect_handle_reconnect_with_backoff');
  late final _wire_reconnect_handle_reconnect_with_backoff =
      _wire_reconnect_handle_reconnect_with_backoffPtr.asFunction<
          WireSyncReturnStruct Function(wire_ReconnectHandle, int, double, int,
              ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturnStruct wire_remote_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_remote_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_remote_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_remote_media_track_from_ptr');
  late final _wire_remote_media_track_from_ptr =
      _wire_remote_media_track_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_remote_media_track_get_track(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_get_track(
      track,
    );
  }

  late final _wire_remote_media_track_get_trackPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack)>>('wire_remote_media_track_get_track');
  late final _wire_remote_media_track_get_track =
      _wire_remote_media_track_get_trackPtr
          .asFunction<WireSyncReturnStruct Function(wire_RemoteMediaTrack)>();

  WireSyncReturnStruct wire_remote_media_track_on_muted(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_muted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_mutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_muted');
  late final _wire_remote_media_track_on_muted =
      _wire_remote_media_track_on_mutedPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturnStruct wire_remote_media_track_on_unmuted(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_unmuted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_unmutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_unmuted');
  late final _wire_remote_media_track_on_unmuted =
      _wire_remote_media_track_on_unmutedPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturnStruct wire_remote_media_track_on_stopped(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_stopped(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_stoppedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_stopped');
  late final _wire_remote_media_track_on_stopped =
      _wire_remote_media_track_on_stoppedPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturnStruct wire_remote_media_track_on_media_direction_changed(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_media_direction_changed(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_media_direction_changedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_RemoteMediaTrack, wire_DartOpaque)>>(
      'wire_remote_media_track_on_media_direction_changed');
  late final _wire_remote_media_track_on_media_direction_changed =
      _wire_remote_media_track_on_media_direction_changedPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturnStruct wire_remote_media_track_muted(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_muted(
      track,
    );
  }

  late final _wire_remote_media_track_mutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack)>>('wire_remote_media_track_muted');
  late final _wire_remote_media_track_muted = _wire_remote_media_track_mutedPtr
      .asFunction<WireSyncReturnStruct Function(wire_RemoteMediaTrack)>();

  WireSyncReturnStruct wire_remote_media_track_kind(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_kind(
      track,
    );
  }

  late final _wire_remote_media_track_kindPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RemoteMediaTrack)>>('wire_remote_media_track_kind');
  late final _wire_remote_media_track_kind = _wire_remote_media_track_kindPtr
      .asFunction<WireSyncReturnStruct Function(wire_RemoteMediaTrack)>();

  WireSyncReturnStruct wire_remote_media_track_media_source_kind(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_remote_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_media_source_kind');
  late final _wire_remote_media_track_media_source_kind =
      _wire_remote_media_track_media_source_kindPtr
          .asFunction<WireSyncReturnStruct Function(wire_RemoteMediaTrack)>();

  WireSyncReturnStruct wire_remote_media_track_media_direction(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_media_direction(
      track,
    );
  }

  late final _wire_remote_media_track_media_directionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_media_direction');
  late final _wire_remote_media_track_media_direction =
      _wire_remote_media_track_media_directionPtr
          .asFunction<WireSyncReturnStruct Function(wire_RemoteMediaTrack)>();

  WireSyncReturnStruct wire_room_close_reason_from_ptr(
    int ptr,
  ) {
    return _wire_room_close_reason_from_ptr(
      ptr,
    );
  }

  late final _wire_room_close_reason_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function(uintptr_t)>>(
          'wire_room_close_reason_from_ptr');
  late final _wire_room_close_reason_from_ptr =
      _wire_room_close_reason_from_ptrPtr
          .asFunction<WireSyncReturnStruct Function(int)>();

  WireSyncReturnStruct wire_room_close_reason_reason(
    wire_RoomCloseReason room_close_reason,
  ) {
    return _wire_room_close_reason_reason(
      room_close_reason,
    );
  }

  late final _wire_room_close_reason_reasonPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RoomCloseReason)>>('wire_room_close_reason_reason');
  late final _wire_room_close_reason_reason = _wire_room_close_reason_reasonPtr
      .asFunction<WireSyncReturnStruct Function(wire_RoomCloseReason)>();

  WireSyncReturnStruct wire_room_close_reason_is_closed_by_server(
    wire_RoomCloseReason room_close_reason,
  ) {
    return _wire_room_close_reason_is_closed_by_server(
      room_close_reason,
    );
  }

  late final _wire_room_close_reason_is_closed_by_serverPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(wire_RoomCloseReason)>>(
      'wire_room_close_reason_is_closed_by_server');
  late final _wire_room_close_reason_is_closed_by_server =
      _wire_room_close_reason_is_closed_by_serverPtr
          .asFunction<WireSyncReturnStruct Function(wire_RoomCloseReason)>();

  WireSyncReturnStruct wire_room_close_reason_is_err(
    wire_RoomCloseReason room_close_reason,
  ) {
    return _wire_room_close_reason_is_err(
      room_close_reason,
    );
  }

  late final _wire_room_close_reason_is_errPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RoomCloseReason)>>('wire_room_close_reason_is_err');
  late final _wire_room_close_reason_is_err = _wire_room_close_reason_is_errPtr
      .asFunction<WireSyncReturnStruct Function(wire_RoomCloseReason)>();

  WireSyncReturnStruct wire_room_handle_join(
    wire_RoomHandle room_handle,
    ffi.Pointer<wire_uint_8_list> token,
  ) {
    return _wire_room_handle_join(
      room_handle,
      token,
    );
  }

  late final _wire_room_handle_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              ffi.Pointer<wire_uint_8_list>)>>('wire_room_handle_join');
  late final _wire_room_handle_join = _wire_room_handle_joinPtr.asFunction<
      WireSyncReturnStruct Function(
          wire_RoomHandle, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_room_handle_set_local_media_settings(
    wire_RoomHandle room_handle,
    wire_MediaStreamSettings settings,
    bool stop_first,
    bool rollback_on_fail,
  ) {
    return _wire_room_handle_set_local_media_settings(
      room_handle,
      settings,
      stop_first,
      rollback_on_fail,
    );
  }

  late final _wire_room_handle_set_local_media_settingsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle,
              wire_MediaStreamSettings,
              ffi.Bool,
              ffi.Bool)>>('wire_room_handle_set_local_media_settings');
  late final _wire_room_handle_set_local_media_settings =
      _wire_room_handle_set_local_media_settingsPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, wire_MediaStreamSettings, bool, bool)>();

  WireSyncReturnStruct wire_room_handle_mute_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_mute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_mute_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturnStruct Function(wire_RoomHandle)>>(
      'wire_room_handle_mute_audio');
  late final _wire_room_handle_mute_audio = _wire_room_handle_mute_audioPtr
      .asFunction<WireSyncReturnStruct Function(wire_RoomHandle)>();

  WireSyncReturnStruct wire_room_handle_unmute_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_unmute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_unmute_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturnStruct Function(wire_RoomHandle)>>(
      'wire_room_handle_unmute_audio');
  late final _wire_room_handle_unmute_audio = _wire_room_handle_unmute_audioPtr
      .asFunction<WireSyncReturnStruct Function(wire_RoomHandle)>();

  WireSyncReturnStruct wire_room_handle_enable_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_enable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturnStruct Function(wire_RoomHandle)>>(
      'wire_room_handle_enable_audio');
  late final _wire_room_handle_enable_audio = _wire_room_handle_enable_audioPtr
      .asFunction<WireSyncReturnStruct Function(wire_RoomHandle)>();

  WireSyncReturnStruct wire_room_handle_disable_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_disable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturnStruct Function(wire_RoomHandle)>>(
      'wire_room_handle_disable_audio');
  late final _wire_room_handle_disable_audio =
      _wire_room_handle_disable_audioPtr
          .asFunction<WireSyncReturnStruct Function(wire_RoomHandle)>();

  WireSyncReturnStruct wire_room_handle_mute_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_mute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_mute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_mute_video');
  late final _wire_room_handle_mute_video =
      _wire_room_handle_mute_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_unmute_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_unmute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_unmute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_unmute_video');
  late final _wire_room_handle_unmute_video =
      _wire_room_handle_unmute_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_enable_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_enable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_enable_video');
  late final _wire_room_handle_enable_video =
      _wire_room_handle_enable_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_disable_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_disable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_disable_video');
  late final _wire_room_handle_disable_video =
      _wire_room_handle_disable_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_enable_remote_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_enable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturnStruct Function(wire_RoomHandle)>>(
      'wire_room_handle_enable_remote_audio');
  late final _wire_room_handle_enable_remote_audio =
      _wire_room_handle_enable_remote_audioPtr
          .asFunction<WireSyncReturnStruct Function(wire_RoomHandle)>();

  WireSyncReturnStruct wire_room_handle_disable_remote_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_disable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturnStruct Function(wire_RoomHandle)>>(
      'wire_room_handle_disable_remote_audio');
  late final _wire_room_handle_disable_remote_audio =
      _wire_room_handle_disable_remote_audioPtr
          .asFunction<WireSyncReturnStruct Function(wire_RoomHandle)>();

  WireSyncReturnStruct wire_room_handle_enable_remote_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_enable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_remote_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_enable_remote_video');
  late final _wire_room_handle_enable_remote_video =
      _wire_room_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_disable_remote_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_disable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>>(
      'wire_room_handle_disable_remote_video');
  late final _wire_room_handle_disable_remote_video =
      _wire_room_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_on_new_connection(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_new_connection(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_new_connectionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_new_connection');
  late final _wire_room_handle_on_new_connection =
      _wire_room_handle_on_new_connectionPtr.asFunction<
          WireSyncReturnStruct Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_room_handle_on_close(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_close(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              wire_RoomHandle, wire_DartOpaque)>>('wire_room_handle_on_close');
  late final _wire_room_handle_on_close =
      _wire_room_handle_on_closePtr.asFunction<
          WireSyncReturnStruct Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_room_handle_on_local_track(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_local_track(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_local_trackPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_local_track');
  late final _wire_room_handle_on_local_track =
      _wire_room_handle_on_local_trackPtr.asFunction<
          WireSyncReturnStruct Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_room_handle_on_connection_loss(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_connection_loss(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_connection_lossPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_connection_loss');
  late final _wire_room_handle_on_connection_loss =
      _wire_room_handle_on_connection_lossPtr.asFunction<
          WireSyncReturnStruct Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturnStruct wire_room_handle_on_failed_local_media(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_failed_local_media(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_failed_local_mediaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_failed_local_media');
  late final _wire_room_handle_on_failed_local_media =
      _wire_room_handle_on_failed_local_mediaPtr.asFunction<
          WireSyncReturnStruct Function(wire_RoomHandle, wire_DartOpaque)>();

  wire_ApiWrapDeviceVideoTrackConstraints
      new_ApiWrapDeviceVideoTrackConstraints() {
    return _new_ApiWrapDeviceVideoTrackConstraints();
  }

  late final _new_ApiWrapDeviceVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          wire_ApiWrapDeviceVideoTrackConstraints
              Function()>>('new_ApiWrapDeviceVideoTrackConstraints');
  late final _new_ApiWrapDeviceVideoTrackConstraints =
      _new_ApiWrapDeviceVideoTrackConstraintsPtr
          .asFunction<wire_ApiWrapDeviceVideoTrackConstraints Function()>();

  wire_ApiWrapDisplayVideoTrackConstraints
      new_ApiWrapDisplayVideoTrackConstraints() {
    return _new_ApiWrapDisplayVideoTrackConstraints();
  }

  late final _new_ApiWrapDisplayVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          wire_ApiWrapDisplayVideoTrackConstraints
              Function()>>('new_ApiWrapDisplayVideoTrackConstraints');
  late final _new_ApiWrapDisplayVideoTrackConstraints =
      _new_ApiWrapDisplayVideoTrackConstraintsPtr
          .asFunction<wire_ApiWrapDisplayVideoTrackConstraints Function()>();

  wire_ApiWrapVecLocalMediaTrack new_ApiWrapVecLocalMediaTrack() {
    return _new_ApiWrapVecLocalMediaTrack();
  }

  late final _new_ApiWrapVecLocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_ApiWrapVecLocalMediaTrack Function()>>(
          'new_ApiWrapVecLocalMediaTrack');
  late final _new_ApiWrapVecLocalMediaTrack = _new_ApiWrapVecLocalMediaTrackPtr
      .asFunction<wire_ApiWrapVecLocalMediaTrack Function()>();

  wire_ApiWrapVecMediaDeviceInfo new_ApiWrapVecMediaDeviceInfo() {
    return _new_ApiWrapVecMediaDeviceInfo();
  }

  late final _new_ApiWrapVecMediaDeviceInfoPtr =
      _lookup<ffi.NativeFunction<wire_ApiWrapVecMediaDeviceInfo Function()>>(
          'new_ApiWrapVecMediaDeviceInfo');
  late final _new_ApiWrapVecMediaDeviceInfo = _new_ApiWrapVecMediaDeviceInfoPtr
      .asFunction<wire_ApiWrapVecMediaDeviceInfo Function()>();

  wire_ApiWrapVecMediaDisplayInfo new_ApiWrapVecMediaDisplayInfo() {
    return _new_ApiWrapVecMediaDisplayInfo();
  }

  late final _new_ApiWrapVecMediaDisplayInfoPtr =
      _lookup<ffi.NativeFunction<wire_ApiWrapVecMediaDisplayInfo Function()>>(
          'new_ApiWrapVecMediaDisplayInfo');
  late final _new_ApiWrapVecMediaDisplayInfo =
      _new_ApiWrapVecMediaDisplayInfoPtr
          .asFunction<wire_ApiWrapVecMediaDisplayInfo Function()>();

  wire_AudioTrackConstraints new_AudioTrackConstraints() {
    return _new_AudioTrackConstraints();
  }

  late final _new_AudioTrackConstraintsPtr =
      _lookup<ffi.NativeFunction<wire_AudioTrackConstraints Function()>>(
          'new_AudioTrackConstraints');
  late final _new_AudioTrackConstraints = _new_AudioTrackConstraintsPtr
      .asFunction<wire_AudioTrackConstraints Function()>();

  wire_ConnectionHandle new_ConnectionHandle() {
    return _new_ConnectionHandle();
  }

  late final _new_ConnectionHandlePtr =
      _lookup<ffi.NativeFunction<wire_ConnectionHandle Function()>>(
          'new_ConnectionHandle');
  late final _new_ConnectionHandle =
      _new_ConnectionHandlePtr.asFunction<wire_ConnectionHandle Function()>();

  wire_DartOpaque new_DartOpaque() {
    return _new_DartOpaque();
  }

  late final _new_DartOpaquePtr =
      _lookup<ffi.NativeFunction<wire_DartOpaque Function()>>('new_DartOpaque');
  late final _new_DartOpaque =
      _new_DartOpaquePtr.asFunction<wire_DartOpaque Function()>();

  wire_Jason new_Jason() {
    return _new_Jason();
  }

  late final _new_JasonPtr =
      _lookup<ffi.NativeFunction<wire_Jason Function()>>('new_Jason');
  late final _new_Jason = _new_JasonPtr.asFunction<wire_Jason Function()>();

  wire_LocalMediaTrack new_LocalMediaTrack() {
    return _new_LocalMediaTrack();
  }

  late final _new_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_LocalMediaTrack Function()>>(
          'new_LocalMediaTrack');
  late final _new_LocalMediaTrack =
      _new_LocalMediaTrackPtr.asFunction<wire_LocalMediaTrack Function()>();

  wire_MediaDeviceInfo new_MediaDeviceInfo() {
    return _new_MediaDeviceInfo();
  }

  late final _new_MediaDeviceInfoPtr =
      _lookup<ffi.NativeFunction<wire_MediaDeviceInfo Function()>>(
          'new_MediaDeviceInfo');
  late final _new_MediaDeviceInfo =
      _new_MediaDeviceInfoPtr.asFunction<wire_MediaDeviceInfo Function()>();

  wire_MediaDisplayInfo new_MediaDisplayInfo() {
    return _new_MediaDisplayInfo();
  }

  late final _new_MediaDisplayInfoPtr =
      _lookup<ffi.NativeFunction<wire_MediaDisplayInfo Function()>>(
          'new_MediaDisplayInfo');
  late final _new_MediaDisplayInfo =
      _new_MediaDisplayInfoPtr.asFunction<wire_MediaDisplayInfo Function()>();

  wire_MediaManagerHandle new_MediaManagerHandle() {
    return _new_MediaManagerHandle();
  }

  late final _new_MediaManagerHandlePtr =
      _lookup<ffi.NativeFunction<wire_MediaManagerHandle Function()>>(
          'new_MediaManagerHandle');
  late final _new_MediaManagerHandle = _new_MediaManagerHandlePtr
      .asFunction<wire_MediaManagerHandle Function()>();

  wire_MediaStreamSettings new_MediaStreamSettings() {
    return _new_MediaStreamSettings();
  }

  late final _new_MediaStreamSettingsPtr =
      _lookup<ffi.NativeFunction<wire_MediaStreamSettings Function()>>(
          'new_MediaStreamSettings');
  late final _new_MediaStreamSettings = _new_MediaStreamSettingsPtr
      .asFunction<wire_MediaStreamSettings Function()>();

  wire_ReconnectHandle new_ReconnectHandle() {
    return _new_ReconnectHandle();
  }

  late final _new_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<wire_ReconnectHandle Function()>>(
          'new_ReconnectHandle');
  late final _new_ReconnectHandle =
      _new_ReconnectHandlePtr.asFunction<wire_ReconnectHandle Function()>();

  wire_RemoteMediaTrack new_RemoteMediaTrack() {
    return _new_RemoteMediaTrack();
  }

  late final _new_RemoteMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_RemoteMediaTrack Function()>>(
          'new_RemoteMediaTrack');
  late final _new_RemoteMediaTrack =
      _new_RemoteMediaTrackPtr.asFunction<wire_RemoteMediaTrack Function()>();

  wire_RoomCloseReason new_RoomCloseReason() {
    return _new_RoomCloseReason();
  }

  late final _new_RoomCloseReasonPtr =
      _lookup<ffi.NativeFunction<wire_RoomCloseReason Function()>>(
          'new_RoomCloseReason');
  late final _new_RoomCloseReason =
      _new_RoomCloseReasonPtr.asFunction<wire_RoomCloseReason Function()>();

  wire_RoomHandle new_RoomHandle() {
    return _new_RoomHandle();
  }

  late final _new_RoomHandlePtr =
      _lookup<ffi.NativeFunction<wire_RoomHandle Function()>>('new_RoomHandle');
  late final _new_RoomHandle =
      _new_RoomHandlePtr.asFunction<wire_RoomHandle Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_ApiWrapDeviceVideoTrackConstraints(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ApiWrapDeviceVideoTrackConstraints(
      ptr,
    );
  }

  late final _drop_opaque_ApiWrapDeviceVideoTrackConstraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ApiWrapDeviceVideoTrackConstraints');
  late final _drop_opaque_ApiWrapDeviceVideoTrackConstraints =
      _drop_opaque_ApiWrapDeviceVideoTrackConstraintsPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ApiWrapDeviceVideoTrackConstraints(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ApiWrapDeviceVideoTrackConstraints(
      ptr,
    );
  }

  late final _share_opaque_ApiWrapDeviceVideoTrackConstraintsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_ApiWrapDeviceVideoTrackConstraints');
  late final _share_opaque_ApiWrapDeviceVideoTrackConstraints =
      _share_opaque_ApiWrapDeviceVideoTrackConstraintsPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ApiWrapDisplayVideoTrackConstraints(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ApiWrapDisplayVideoTrackConstraints(
      ptr,
    );
  }

  late final _drop_opaque_ApiWrapDisplayVideoTrackConstraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ApiWrapDisplayVideoTrackConstraints');
  late final _drop_opaque_ApiWrapDisplayVideoTrackConstraints =
      _drop_opaque_ApiWrapDisplayVideoTrackConstraintsPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ApiWrapDisplayVideoTrackConstraints(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ApiWrapDisplayVideoTrackConstraints(
      ptr,
    );
  }

  late final _share_opaque_ApiWrapDisplayVideoTrackConstraintsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_ApiWrapDisplayVideoTrackConstraints');
  late final _share_opaque_ApiWrapDisplayVideoTrackConstraints =
      _share_opaque_ApiWrapDisplayVideoTrackConstraintsPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ApiWrapVecLocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ApiWrapVecLocalMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_ApiWrapVecLocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ApiWrapVecLocalMediaTrack');
  late final _drop_opaque_ApiWrapVecLocalMediaTrack =
      _drop_opaque_ApiWrapVecLocalMediaTrackPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ApiWrapVecLocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ApiWrapVecLocalMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_ApiWrapVecLocalMediaTrackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_ApiWrapVecLocalMediaTrack');
  late final _share_opaque_ApiWrapVecLocalMediaTrack =
      _share_opaque_ApiWrapVecLocalMediaTrackPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ApiWrapVecMediaDeviceInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ApiWrapVecMediaDeviceInfo(
      ptr,
    );
  }

  late final _drop_opaque_ApiWrapVecMediaDeviceInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ApiWrapVecMediaDeviceInfo');
  late final _drop_opaque_ApiWrapVecMediaDeviceInfo =
      _drop_opaque_ApiWrapVecMediaDeviceInfoPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ApiWrapVecMediaDeviceInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ApiWrapVecMediaDeviceInfo(
      ptr,
    );
  }

  late final _share_opaque_ApiWrapVecMediaDeviceInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_ApiWrapVecMediaDeviceInfo');
  late final _share_opaque_ApiWrapVecMediaDeviceInfo =
      _share_opaque_ApiWrapVecMediaDeviceInfoPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ApiWrapVecMediaDisplayInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ApiWrapVecMediaDisplayInfo(
      ptr,
    );
  }

  late final _drop_opaque_ApiWrapVecMediaDisplayInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ApiWrapVecMediaDisplayInfo');
  late final _drop_opaque_ApiWrapVecMediaDisplayInfo =
      _drop_opaque_ApiWrapVecMediaDisplayInfoPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ApiWrapVecMediaDisplayInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ApiWrapVecMediaDisplayInfo(
      ptr,
    );
  }

  late final _share_opaque_ApiWrapVecMediaDisplayInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_ApiWrapVecMediaDisplayInfo');
  late final _share_opaque_ApiWrapVecMediaDisplayInfo =
      _share_opaque_ApiWrapVecMediaDisplayInfoPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_AudioTrackConstraints(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_AudioTrackConstraints(
      ptr,
    );
  }

  late final _drop_opaque_AudioTrackConstraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_AudioTrackConstraints');
  late final _drop_opaque_AudioTrackConstraints =
      _drop_opaque_AudioTrackConstraintsPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_AudioTrackConstraints(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_AudioTrackConstraints(
      ptr,
    );
  }

  late final _share_opaque_AudioTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_AudioTrackConstraints');
  late final _share_opaque_AudioTrackConstraints =
      _share_opaque_AudioTrackConstraintsPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ConnectionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ConnectionHandle(
      ptr,
    );
  }

  late final _drop_opaque_ConnectionHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ConnectionHandle');
  late final _drop_opaque_ConnectionHandle = _drop_opaque_ConnectionHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ConnectionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ConnectionHandle(
      ptr,
    );
  }

  late final _share_opaque_ConnectionHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ConnectionHandle');
  late final _share_opaque_ConnectionHandle = _share_opaque_ConnectionHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_Jason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Jason(
      ptr,
    );
  }

  late final _drop_opaque_JasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_Jason');
  late final _drop_opaque_Jason =
      _drop_opaque_JasonPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Jason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Jason(
      ptr,
    );
  }

  late final _share_opaque_JasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_Jason');
  late final _share_opaque_Jason = _share_opaque_JasonPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_LocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_LocalMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_LocalMediaTrack');
  late final _drop_opaque_LocalMediaTrack = _drop_opaque_LocalMediaTrackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_LocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_LocalMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_LocalMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_LocalMediaTrack');
  late final _share_opaque_LocalMediaTrack = _share_opaque_LocalMediaTrackPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MediaDeviceInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MediaDeviceInfo(
      ptr,
    );
  }

  late final _drop_opaque_MediaDeviceInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MediaDeviceInfo');
  late final _drop_opaque_MediaDeviceInfo = _drop_opaque_MediaDeviceInfoPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MediaDeviceInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MediaDeviceInfo(
      ptr,
    );
  }

  late final _share_opaque_MediaDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MediaDeviceInfo');
  late final _share_opaque_MediaDeviceInfo = _share_opaque_MediaDeviceInfoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MediaDisplayInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MediaDisplayInfo(
      ptr,
    );
  }

  late final _drop_opaque_MediaDisplayInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MediaDisplayInfo');
  late final _drop_opaque_MediaDisplayInfo = _drop_opaque_MediaDisplayInfoPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MediaDisplayInfo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MediaDisplayInfo(
      ptr,
    );
  }

  late final _share_opaque_MediaDisplayInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MediaDisplayInfo');
  late final _share_opaque_MediaDisplayInfo = _share_opaque_MediaDisplayInfoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MediaManagerHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MediaManagerHandle(
      ptr,
    );
  }

  late final _drop_opaque_MediaManagerHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MediaManagerHandle');
  late final _drop_opaque_MediaManagerHandle =
      _drop_opaque_MediaManagerHandlePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MediaManagerHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MediaManagerHandle(
      ptr,
    );
  }

  late final _share_opaque_MediaManagerHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MediaManagerHandle');
  late final _share_opaque_MediaManagerHandle =
      _share_opaque_MediaManagerHandlePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MediaStreamSettings(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MediaStreamSettings(
      ptr,
    );
  }

  late final _drop_opaque_MediaStreamSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MediaStreamSettings');
  late final _drop_opaque_MediaStreamSettings =
      _drop_opaque_MediaStreamSettingsPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MediaStreamSettings(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MediaStreamSettings(
      ptr,
    );
  }

  late final _share_opaque_MediaStreamSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MediaStreamSettings');
  late final _share_opaque_MediaStreamSettings =
      _share_opaque_MediaStreamSettingsPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ReconnectHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ReconnectHandle(
      ptr,
    );
  }

  late final _drop_opaque_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ReconnectHandle');
  late final _drop_opaque_ReconnectHandle = _drop_opaque_ReconnectHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ReconnectHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ReconnectHandle(
      ptr,
    );
  }

  late final _share_opaque_ReconnectHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ReconnectHandle');
  late final _share_opaque_ReconnectHandle = _share_opaque_ReconnectHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RemoteMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RemoteMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_RemoteMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RemoteMediaTrack');
  late final _drop_opaque_RemoteMediaTrack = _drop_opaque_RemoteMediaTrackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RemoteMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RemoteMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_RemoteMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RemoteMediaTrack');
  late final _share_opaque_RemoteMediaTrack = _share_opaque_RemoteMediaTrackPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RoomCloseReason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RoomCloseReason(
      ptr,
    );
  }

  late final _drop_opaque_RoomCloseReasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RoomCloseReason');
  late final _drop_opaque_RoomCloseReason = _drop_opaque_RoomCloseReasonPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RoomCloseReason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RoomCloseReason(
      ptr,
    );
  }

  late final _share_opaque_RoomCloseReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RoomCloseReason');
  late final _share_opaque_RoomCloseReason = _share_opaque_RoomCloseReasonPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RoomHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RoomHandle(
      ptr,
    );
  }

  late final _drop_opaque_RoomHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RoomHandle');
  late final _drop_opaque_RoomHandle = _drop_opaque_RoomHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RoomHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RoomHandle(
      ptr,
    );
  }

  late final _share_opaque_RoomHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RoomHandle');
  late final _share_opaque_RoomHandle = _share_opaque_RoomHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_AudioTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ConnectionHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DartOpaque extends ffi.Struct {
  @ffi.Int64()
  external int port;

  @uintptr_t()
  external int handle;
}

typedef uintptr_t = ffi.UnsignedLong;

class wire_ApiWrapDeviceVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_ApiWrapDisplayVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Jason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RoomHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_ApiWrapVecLocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_ApiWrapVecMediaDeviceInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaDeviceInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_ApiWrapVecMediaDisplayInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaDisplayInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaManagerHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaStreamSettings extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_ReconnectHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RemoteMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RoomCloseReason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
