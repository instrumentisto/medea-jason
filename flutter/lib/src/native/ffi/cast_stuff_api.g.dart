// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class CastStuffApi {
  int dartFutureToUsize({required MyDartFuture handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartFutureToUsizeConstMeta;

  ConnectionHandleDh dartHandleToConnectionHandleDh(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartHandleToConnectionHandleDhConstMeta;

  MediaManagerHandleDh dartHandleToMediaManagerHandleDh(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartHandleToMediaManagerHandleDhConstMeta;

  RemoteMediaTrackDh dartHandleToRemoteMediaTrackDh(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartHandleToRemoteMediaTrackDhConstMeta;

  RoomHandleDh dartHandleToRoomHandleDh({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDartHandleToRoomHandleDhConstMeta;
}

@sealed
class ConnectionHandleDh extends FrbOpaque {
  ConnectionHandleDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MediaManagerHandleDh extends FrbOpaque {
  MediaManagerHandleDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MyDartFuture extends FrbOpaque {
  MyDartFuture.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RemoteMediaTrackDh extends FrbOpaque {
  RemoteMediaTrackDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RoomHandleDh extends FrbOpaque {
  RoomHandleDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class CastStuffApiImpl implements CastStuffApi {
  final CastStuffApiPlatform _platform;
  factory CastStuffApiImpl(ExternalLibrary dylib) =>
      CastStuffApiImpl.raw(CastStuffApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory CastStuffApiImpl.wasm(FutureOr<WasmModule> module) =>
      CastStuffApiImpl(module as ExternalLibrary);
  CastStuffApiImpl.raw(this._platform);
  int dartFutureToUsize({required MyDartFuture handle, dynamic hint}) {
    var arg0 = _platform.api2wire_MyDartFuture(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dart_future_to_usize(arg0),
      parseSuccessData: _wire2api_SyncReturn_usize,
      constMeta: kDartFutureToUsizeConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartFutureToUsizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_future_to_usize",
        argNames: ["handle"],
      );

  ConnectionHandleDh dartHandleToConnectionHandleDh(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_usize(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_dart_handle_to_connection_handle_dh(arg0),
      parseSuccessData: _wire2api_SyncReturn_ConnectionHandleDh,
      constMeta: kDartHandleToConnectionHandleDhConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartHandleToConnectionHandleDhConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_handle_to_connection_handle_dh",
        argNames: ["handle"],
      );

  MediaManagerHandleDh dartHandleToMediaManagerHandleDh(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_usize(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_dart_handle_to_media_manager_handle_dh(arg0),
      parseSuccessData: _wire2api_SyncReturn_MediaManagerHandleDh,
      constMeta: kDartHandleToMediaManagerHandleDhConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDartHandleToMediaManagerHandleDhConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "dart_handle_to_media_manager_handle_dh",
            argNames: ["handle"],
          );

  RemoteMediaTrackDh dartHandleToRemoteMediaTrackDh(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_usize(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_dart_handle_to_remote_media_track_dh(arg0),
      parseSuccessData: _wire2api_SyncReturn_RemoteMediaTrackDh,
      constMeta: kDartHandleToRemoteMediaTrackDhConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartHandleToRemoteMediaTrackDhConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_handle_to_remote_media_track_dh",
        argNames: ["handle"],
      );

  RoomHandleDh dartHandleToRoomHandleDh({required int handle, dynamic hint}) {
    var arg0 = api2wire_usize(handle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dart_handle_to_room_handle_dh(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomHandleDh,
      constMeta: kDartHandleToRoomHandleDhConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartHandleToRoomHandleDhConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_handle_to_room_handle_dh",
        argNames: ["handle"],
      );

// Section: wire2api

  ConnectionHandleDh _wire2api_ConnectionHandleDh(dynamic raw) {
    return ConnectionHandleDh.fromRaw(raw[0], raw[1], raw[2]);
  }

  MediaManagerHandleDh _wire2api_MediaManagerHandleDh(dynamic raw) {
    return MediaManagerHandleDh.fromRaw(raw[0], raw[1], raw[2]);
  }

  RemoteMediaTrackDh _wire2api_RemoteMediaTrackDh(dynamic raw) {
    return RemoteMediaTrackDh.fromRaw(raw[0], raw[1], raw[2]);
  }

  RoomHandleDh _wire2api_RoomHandleDh(dynamic raw) {
    return RoomHandleDh.fromRaw(raw[0], raw[1], raw[2]);
  }

  ConnectionHandleDh _wire2api_SyncReturn_ConnectionHandleDh(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return ConnectionHandleDh.fromRaw(ptr, drop, lend);
  }

  MediaManagerHandleDh _wire2api_SyncReturn_MediaManagerHandleDh(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MediaManagerHandleDh.fromRaw(ptr, drop, lend);
  }

  RemoteMediaTrackDh _wire2api_SyncReturn_RemoteMediaTrackDh(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RemoteMediaTrackDh.fromRaw(ptr, drop, lend);
  }

  RoomHandleDh _wire2api_SyncReturn_RoomHandleDh(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RoomHandleDh.fromRaw(ptr, drop, lend);
  }

  int _wire2api_SyncReturn_usize(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    switch (raw.length) {
      case 8:
        {
          return dataView.getUint64(0);
        }
      case 4:
        {
          return dataView.getUint32(0);
        }
      default:
        {
          throw "Unknow lenght pointer.";
        }
    }
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_usize(int raw) {
  return raw;
}

class CastStuffApiPlatform extends FlutterRustBridgeBase<CastStuffApiWire> {
  CastStuffApiPlatform(ffi.DynamicLibrary dylib)
      : super(CastStuffApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_MyDartFuture> api2wire_MyDartFuture(MyDartFuture raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_MyDartFuture();
    _api_fill_to_wire_MyDartFuture(raw, ptr);
    return ptr;
  }

// Section: api_fill_to_wire

  void _api_fill_to_wire_MyDartFuture(
      MyDartFuture apiObj, ffi.Pointer<wire_MyDartFuture> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class CastStuffApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CastStuffApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CastStuffApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    int val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(int)>();
}
