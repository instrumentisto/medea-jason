// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class ConnectionHandleApi {
  /// Sets callback, invoked when this `Connection` will close.
  void connectionHandleOnClose(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`remote::Track`] is added to this
  /// [`Connection`].
  ///
  /// [`remote::Track`]: crate::media::track::remote::Track
  /// [`Connection`]: crate::connection::Connection
  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta;

  /// Sets callback, invoked when a connection quality score is updated by
  /// a server.
  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta;

  /// Returns remote `Member` ID.
  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta;

  /// Enables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  MyDartFuture connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta;
}

@sealed
class ConnectionHandle extends FrbOpaque {
  ConnectionHandle.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class DartHandle extends FrbOpaque {
  DartHandle.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MyDartFuture extends FrbOpaque {
  MyDartFuture.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class ConnectionHandleApiImpl implements ConnectionHandleApi {
  final ConnectionHandleApiPlatform _platform;
  factory ConnectionHandleApiImpl(ExternalLibrary dylib) =>
      ConnectionHandleApiImpl.raw(ConnectionHandleApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ConnectionHandleApiImpl.wasm(FutureOr<WasmModule> module) =>
      ConnectionHandleApiImpl(module as ExternalLibrary);
  ConnectionHandleApiImpl.raw(this._platform);
  void connectionHandleOnClose(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnCloseConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_on_close",
        argNames: ["connection", "f"],
      );

  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_remote_track_added(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnRemoteTrackAddedConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_remote_track_added",
            argNames: ["connection", "f"],
          );

  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection,
      required DartHandle f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartHandle(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_quality_score_update(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kConnectionHandleOnQualityScoreUpdateConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_quality_score_update",
            argNames: ["connection", "f"],
          );

  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_get_remote_member_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kConnectionHandleGetRemoteMemberIdConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_get_remote_member_id",
            argNames: ["connection"],
          );

  MyDartFuture connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleEnableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_audio",
            argNames: ["connection"],
          );

  MyDartFuture connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleDisableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_audio",
            argNames: ["connection"],
          );

  MyDartFuture connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleEnableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  MyDartFuture connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kConnectionHandleDisableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

// Section: wire2api

  MyDartFuture _wire2api_MyDartFuture(dynamic raw) {
    return MyDartFuture.fromRaw(raw[0], raw[1], raw[2]);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  MyDartFuture _wire2api_SyncReturn_MyDartFuture(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MyDartFuture.fromRaw(ptr, drop, lend);
  }

  String _wire2api_SyncReturn_String(dynamic raw) {
    return utf8.decode(raw);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

class ConnectionHandleApiPlatform
    extends FlutterRustBridgeBase<ConnectionHandleApiWire> {
  ConnectionHandleApiPlatform(ffi.DynamicLibrary dylib)
      : super(ConnectionHandleApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_ConnectionHandle> api2wire_ConnectionHandle(
      ConnectionHandle raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_ConnectionHandle();
    _api_fill_to_wire_ConnectionHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DartHandle> api2wire_DartHandle(DartHandle raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_DartHandle();
    _api_fill_to_wire_DartHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_2(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

// Section: api_fill_to_wire

  void _api_fill_to_wire_ConnectionHandle(
      ConnectionHandle apiObj, ffi.Pointer<wire_ConnectionHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_DartHandle(
      DartHandle apiObj, ffi.Pointer<wire_DartHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ConnectionHandleApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ConnectionHandleApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ConnectionHandleApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_connection_handle_on_close(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_connection_handle_on_close(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_closePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_connection_handle_on_close');
  late final _wire_connection_handle_on_close =
      _wire_connection_handle_on_closePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_connection_handle_on_remote_track_added(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_connection_handle_on_remote_track_added(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_remote_track_addedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_connection_handle_on_remote_track_added');
  late final _wire_connection_handle_on_remote_track_added =
      _wire_connection_handle_on_remote_track_addedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_connection_handle_on_quality_score_update(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<wire_DartHandle> f,
  ) {
    return _wire_connection_handle_on_quality_score_update(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_quality_score_updatePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
                  ffi.Pointer<wire_DartHandle>)>>(
      'wire_connection_handle_on_quality_score_update');
  late final _wire_connection_handle_on_quality_score_update =
      _wire_connection_handle_on_quality_score_updatePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>,
              ffi.Pointer<wire_DartHandle>)>();

  WireSyncReturnStruct wire_connection_handle_get_remote_member_id(
    ffi.Pointer<wire_ConnectionHandle> connection,
  ) {
    return _wire_connection_handle_get_remote_member_id(
      connection,
    );
  }

  late final _wire_connection_handle_get_remote_member_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>)>>(
      'wire_connection_handle_get_remote_member_id');
  late final _wire_connection_handle_get_remote_member_id =
      _wire_connection_handle_get_remote_member_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>)>();

  WireSyncReturnStruct wire_connection_handle_enable_remote_audio(
    ffi.Pointer<wire_ConnectionHandle> connection,
  ) {
    return _wire_connection_handle_enable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>)>>(
      'wire_connection_handle_enable_remote_audio');
  late final _wire_connection_handle_enable_remote_audio =
      _wire_connection_handle_enable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>)>();

  WireSyncReturnStruct wire_connection_handle_disable_remote_audio(
    ffi.Pointer<wire_ConnectionHandle> connection,
  ) {
    return _wire_connection_handle_disable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>)>>(
      'wire_connection_handle_disable_remote_audio');
  late final _wire_connection_handle_disable_remote_audio =
      _wire_connection_handle_disable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_ConnectionHandle>)>();

  WireSyncReturnStruct wire_connection_handle_enable_remote_video(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_connection_handle_enable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_enable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>>(
      'wire_connection_handle_enable_remote_video');
  late final _wire_connection_handle_enable_remote_video =
      _wire_connection_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_connection_handle_disable_remote_video(
    ffi.Pointer<wire_ConnectionHandle> connection,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_connection_handle_disable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>>(
      'wire_connection_handle_disable_remote_video');
  late final _wire_connection_handle_disable_remote_video =
      _wire_connection_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_ConnectionHandle>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<wire_ConnectionHandle> new_ConnectionHandle() {
    return _new_ConnectionHandle();
  }

  late final _new_ConnectionHandlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ConnectionHandle> Function()>>(
      'new_ConnectionHandle');
  late final _new_ConnectionHandle = _new_ConnectionHandlePtr
      .asFunction<ffi.Pointer<wire_ConnectionHandle> Function()>();

  ffi.Pointer<wire_DartHandle> new_DartHandle() {
    return _new_DartHandle();
  }

  late final _new_DartHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartHandle> Function()>>(
          'new_DartHandle');
  late final _new_DartHandle =
      _new_DartHandlePtr.asFunction<ffi.Pointer<wire_DartHandle> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_2(
    int value,
  ) {
    return _new_box_autoadd_u8_2(
      value,
    );
  }

  late final _new_box_autoadd_u8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_2');
  late final _new_box_autoadd_u8_2 = _new_box_autoadd_u8_2Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  void drop_box_autoadd_u8_2(
    ffi.Pointer<ffi.Uint8> raw,
  ) {
    return _drop_box_autoadd_u8_2(
      raw,
    );
  }

  late final _drop_box_autoadd_u8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'drop_box_autoadd_u8_2');
  late final _drop_box_autoadd_u8_2 = _drop_box_autoadd_u8_2Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_ConnectionHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DartHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
