// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class DeviceVideoTrackConstraintsApi {
  /// Creates new [`DeviceVideoTrackConstraints`] with none constraints
  /// configured.
  RefCellDeviceVideoTrackConstraints deviceVideoTrackConstraintsNew(
      {dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeviceVideoTrackConstraintsNewConstMeta;

  /// Sets an exact [deviceId][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#def-constraint-deviceId
  void deviceVideoTrackConstraintsDeviceId(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsDeviceIdConstMeta;

  /// Sets an exact [facingMode][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-constraindomstring
  void deviceVideoTrackConstraintsExactFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required FacingMode facingMode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactFacingModeConstMeta;

  /// Sets an ideal [facingMode][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-constraindomstring
  void deviceVideoTrackConstraintsIdealFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required FacingMode facingMode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealFacingModeConstMeta;

  /// Sets an exact [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsExactHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactHeightConstMeta;

  /// Sets an ideal [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsIdealHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealHeightConstMeta;

  /// Sets an exact [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsExactWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactWidthConstMeta;

  /// Sets an ideal [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsIdealWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealWidthConstMeta;

  /// Sets a range of a [height][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  void deviceVideoTrackConstraintsHeightInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsHeightInRangeConstMeta;

  /// Sets a range of a [width][1] constraint.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  void deviceVideoTrackConstraintsWidthInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsWidthInRangeConstMeta;
}

@sealed
class RefCellDeviceVideoTrackConstraints extends FrbOpaque {
  RefCellDeviceVideoTrackConstraints.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

/// Describes directions that a camera can face, as seen from a user's
/// perspective.
///
/// Representation of a [VideoFacingModeEnum][1].
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-videofacingmodeenum
enum FacingMode {
  /// Facing towards a user (a self-view camera).
  User,

  /// Facing away from a user (viewing an environment).
  Environment,

  /// Facing to the left of a user.
  Left,

  /// Facing to the right of a user.
  Right,
}

class DeviceVideoTrackConstraintsApiImpl
    implements DeviceVideoTrackConstraintsApi {
  final DeviceVideoTrackConstraintsApiPlatform _platform;
  factory DeviceVideoTrackConstraintsApiImpl(ExternalLibrary dylib) =>
      DeviceVideoTrackConstraintsApiImpl.raw(
          DeviceVideoTrackConstraintsApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory DeviceVideoTrackConstraintsApiImpl.wasm(
          FutureOr<WasmModule> module) =>
      DeviceVideoTrackConstraintsApiImpl(module as ExternalLibrary);
  DeviceVideoTrackConstraintsApiImpl.raw(this._platform);
  RefCellDeviceVideoTrackConstraints deviceVideoTrackConstraintsNew(
      {dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_device_video_track_constraints_new(),
      parseSuccessData: _wire2api_SyncReturn_RefCellDeviceVideoTrackConstraints,
      constMeta: kDeviceVideoTrackConstraintsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeviceVideoTrackConstraintsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "device_video_track_constraints_new",
        argNames: [],
      );

  void deviceVideoTrackConstraintsDeviceId(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required String deviceId,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_device_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsDeviceIdConstMeta,
      argValues: [constraints, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsDeviceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_device_id",
            argNames: ["constraints", "deviceId"],
          );

  void deviceVideoTrackConstraintsExactFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required FacingMode facingMode,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_facing_mode(facingMode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_facing_mode(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactFacingModeConstMeta,
      argValues: [constraints, facingMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactFacingModeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_facing_mode",
            argNames: ["constraints", "facingMode"],
          );

  void deviceVideoTrackConstraintsIdealFacingMode(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required FacingMode facingMode,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_facing_mode(facingMode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_facing_mode(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealFacingModeConstMeta,
      argValues: [constraints, facingMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealFacingModeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_facing_mode",
            argNames: ["constraints", "facingMode"],
          );

  void deviceVideoTrackConstraintsExactHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactHeightConstMeta,
      argValues: [constraints, exactHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_height",
            argNames: ["constraints", "exactHeight"],
          );

  void deviceVideoTrackConstraintsIdealHeight(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealHeight,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealHeight);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_height(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealHeightConstMeta,
      argValues: [constraints, idealHeight],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealHeightConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_height",
            argNames: ["constraints", "idealHeight"],
          );

  void deviceVideoTrackConstraintsExactWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int exactWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(exactWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_exact_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsExactWidthConstMeta,
      argValues: [constraints, exactWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsExactWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_exact_width",
            argNames: ["constraints", "exactWidth"],
          );

  void deviceVideoTrackConstraintsIdealWidth(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int idealWidth,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(idealWidth);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_ideal_width(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsIdealWidthConstMeta,
      argValues: [constraints, idealWidth],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsIdealWidthConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_ideal_width",
            argNames: ["constraints", "idealWidth"],
          );

  void deviceVideoTrackConstraintsHeightInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(min);
    var arg2 = api2wire_u32(max);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_height_in_range(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsHeightInRangeConstMeta,
      argValues: [constraints, min, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsHeightInRangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_height_in_range",
            argNames: ["constraints", "min", "max"],
          );

  void deviceVideoTrackConstraintsWidthInRange(
      {required RefCellDeviceVideoTrackConstraints constraints,
      required int min,
      required int max,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellDeviceVideoTrackConstraints(constraints);
    var arg1 = api2wire_u32(min);
    var arg2 = api2wire_u32(max);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_device_video_track_constraints_width_in_range(arg0, arg1, arg2),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kDeviceVideoTrackConstraintsWidthInRangeConstMeta,
      argValues: [constraints, min, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDeviceVideoTrackConstraintsWidthInRangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "device_video_track_constraints_width_in_range",
            argNames: ["constraints", "min", "max"],
          );

// Section: wire2api

  RefCellDeviceVideoTrackConstraints
      _wire2api_RefCellDeviceVideoTrackConstraints(dynamic raw) {
    return RefCellDeviceVideoTrackConstraints.fromRaw(raw[0], raw[1], raw[2]);
  }

  RefCellDeviceVideoTrackConstraints
      _wire2api_SyncReturn_RefCellDeviceVideoTrackConstraints(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellDeviceVideoTrackConstraints.fromRaw(ptr, drop, lend);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_facing_mode(FacingMode raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

class DeviceVideoTrackConstraintsApiPlatform
    extends FlutterRustBridgeBase<DeviceVideoTrackConstraintsApiWire> {
  DeviceVideoTrackConstraintsApiPlatform(ffi.DynamicLibrary dylib)
      : super(DeviceVideoTrackConstraintsApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>
      api2wire_RefCellDeviceVideoTrackConstraints(
          RefCellDeviceVideoTrackConstraints raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RefCellDeviceVideoTrackConstraints();
    _api_fill_to_wire_RefCellDeviceVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_3(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_RefCellDeviceVideoTrackConstraints(
      RefCellDeviceVideoTrackConstraints apiObj,
      ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class DeviceVideoTrackConstraintsApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DeviceVideoTrackConstraintsApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DeviceVideoTrackConstraintsApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_device_video_track_constraints_new() {
    return _wire_device_video_track_constraints_new();
  }

  late final _wire_device_video_track_constraints_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_device_video_track_constraints_new');
  late final _wire_device_video_track_constraints_new =
      _wire_device_video_track_constraints_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_device_video_track_constraints_device_id(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_device_video_track_constraints_device_id(
      constraints,
      device_id,
    );
  }

  late final _wire_device_video_track_constraints_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_device_video_track_constraints_device_id');
  late final _wire_device_video_track_constraints_device_id =
      _wire_device_video_track_constraints_device_idPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_facing_mode(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int facing_mode,
  ) {
    return _wire_device_video_track_constraints_exact_facing_mode(
      constraints,
      facing_mode,
    );
  }

  late final _wire_device_video_track_constraints_exact_facing_modePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                      ffi.Int32)>>(
          'wire_device_video_track_constraints_exact_facing_mode');
  late final _wire_device_video_track_constraints_exact_facing_mode =
      _wire_device_video_track_constraints_exact_facing_modePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_facing_mode(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int facing_mode,
  ) {
    return _wire_device_video_track_constraints_ideal_facing_mode(
      constraints,
      facing_mode,
    );
  }

  late final _wire_device_video_track_constraints_ideal_facing_modePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                      ffi.Int32)>>(
          'wire_device_video_track_constraints_ideal_facing_mode');
  late final _wire_device_video_track_constraints_ideal_facing_mode =
      _wire_device_video_track_constraints_ideal_facing_modePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_height(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int exact_height,
  ) {
    return _wire_device_video_track_constraints_exact_height(
      constraints,
      exact_height,
    );
  }

  late final _wire_device_video_track_constraints_exact_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_exact_height');
  late final _wire_device_video_track_constraints_exact_height =
      _wire_device_video_track_constraints_exact_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_height(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int ideal_height,
  ) {
    return _wire_device_video_track_constraints_ideal_height(
      constraints,
      ideal_height,
    );
  }

  late final _wire_device_video_track_constraints_ideal_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_ideal_height');
  late final _wire_device_video_track_constraints_ideal_height =
      _wire_device_video_track_constraints_ideal_heightPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_exact_width(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int exact_width,
  ) {
    return _wire_device_video_track_constraints_exact_width(
      constraints,
      exact_width,
    );
  }

  late final _wire_device_video_track_constraints_exact_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_exact_width');
  late final _wire_device_video_track_constraints_exact_width =
      _wire_device_video_track_constraints_exact_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_ideal_width(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int ideal_width,
  ) {
    return _wire_device_video_track_constraints_ideal_width(
      constraints,
      ideal_width,
    );
  }

  late final _wire_device_video_track_constraints_ideal_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              ffi.Uint32)>>('wire_device_video_track_constraints_ideal_width');
  late final _wire_device_video_track_constraints_ideal_width =
      _wire_device_video_track_constraints_ideal_widthPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>, int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_height_in_range(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int min,
    int max,
  ) {
    return _wire_device_video_track_constraints_height_in_range(
      constraints,
      min,
      max,
    );
  }

  late final _wire_device_video_track_constraints_height_in_rangePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                  ffi.Uint32,
                  ffi.Uint32)>>(
      'wire_device_video_track_constraints_height_in_range');
  late final _wire_device_video_track_constraints_height_in_range =
      _wire_device_video_track_constraints_height_in_rangePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              int,
              int)>();

  WireSyncReturnStruct wire_device_video_track_constraints_width_in_range(
    ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> constraints,
    int min,
    int max,
  ) {
    return _wire_device_video_track_constraints_width_in_range(
      constraints,
      min,
      max,
    );
  }

  late final _wire_device_video_track_constraints_width_in_rangePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
                  ffi.Uint32,
                  ffi.Uint32)>>(
      'wire_device_video_track_constraints_width_in_range');
  late final _wire_device_video_track_constraints_width_in_range =
      _wire_device_video_track_constraints_width_in_rangePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>,
              int,
              int)>();

  ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>
      new_RefCellDeviceVideoTrackConstraints() {
    return _new_RefCellDeviceVideoTrackConstraints();
  }

  late final _new_RefCellDeviceVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints>
              Function()>>('new_RefCellDeviceVideoTrackConstraints');
  late final _new_RefCellDeviceVideoTrackConstraints =
      _new_RefCellDeviceVideoTrackConstraintsPtr.asFunction<
          ffi.Pointer<wire_RefCellDeviceVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_3(
    int len,
  ) {
    return _new_uint_8_list_3(
      len,
    );
  }

  late final _new_uint_8_list_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_3');
  late final _new_uint_8_list_3 = _new_uint_8_list_3Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_RefCellDeviceVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
