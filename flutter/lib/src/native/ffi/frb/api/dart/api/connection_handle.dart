// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../../../frb_generated.dart';
import '../../../media/track.dart';
import '../../dart.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConnectionHandle>>
abstract class ConnectionHandle implements RustOpaqueInterface, ForeignClass {
  /// Disables inbound audio in the provided `connection`.
  Object disableRemoteAudio();

  /// Disables inbound video in the provided `connection`.
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  Object disableRemoteVideo({MediaSourceKind? sourceKind});

  /// Enables inbound audio in the provided `connection`.
  Object enableRemoteAudio();

  /// Enables inbound video in the provided `connection`.
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  Object enableRemoteVideo({MediaSourceKind? sourceKind});

  /// Returns the [`ConnectionHandle`] from the [`ForeignClass`] address.
  static ConnectionHandle fromRaw({required int ptr}) => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleFromRaw(ptr: ptr);

  /// Returns remote `Member` ID of the provided `connection`.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::get_remote_member_id()`] errors.
  String getRemoteMemberId();

  /// Sets a callback to be invoked once the provided `connection` is closed.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_close()`] errors.
  void onClose({required Object f});

  /// Sets a callback to be invoked when a quality score of the provided
  /// `connection` is updated by a server.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_quality_score_update()`] errors.
  void onQualityScoreUpdate({required Object f});

  /// Sets a callback to be invoked once a new [`remote::Track`] is added to
  /// the provided `connection`.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_remote_track_added()`] errors.
  ///
  /// [`remote::Track`]: media::track::remote::Track
  void onRemoteTrackAdded({required Object f});
}
