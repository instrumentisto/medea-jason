// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../../../frb_generated.dart';
import '../../../media/track.dart';
import '../api.dart';
import 'member_connection_state.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConnectionHandle>>
abstract class ConnectionHandle implements RustOpaqueInterface, ForeignClass {
  /// Disables inbound audio in the associated [`Connection`].
  Object disableRemoteAudio();

  /// Disables inbound video in the associated [`Connection`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  Object disableRemoteVideo({MediaSourceKind? sourceKind});

  /// Enables inbound audio in the associated [`Connection`].
  Object enableRemoteAudio();

  /// Enables inbound video in the associated [`Connection`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  Object enableRemoteVideo({MediaSourceKind? sourceKind});

  /// Constructs a [`ForeignClass`] from the given raw pointer via
  /// [`Box::from_raw()`].
  ///
  /// # Safety
  ///
  /// Same as for [`Box::from_raw()`].
  static ConnectionHandle fromPtr({required int ptr}) => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleFromPtr(ptr: ptr);

  /// Returns ID of remote `Member` ID of the associated [`Connection`].
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandleImpl::get_remote_member_id()`] method
  /// errors.
  String getRemoteMemberId();

  /// Returns the [`MemberConnectionState`] of the associated [`Connection`].
  ///
  /// __NOTE__: Only works in [P2P mesh] mode and is subject to change.
  ///
  /// # Errors
  ///
  /// With a [`StateError`] if the underlying object has been disposed, e.g.
  /// `free` was called on this [`ConnectionHandle`], or on a [`Jason`], or on
  /// a [`RoomHandle`] that implicitly owns native object behind this
  /// [`ConnectionHandle`].
  ///
  /// [`Jason`]: api::Jason
  /// [`RoomHandle`]: api::RoomHandle
  /// [`StateError`]: crate::api::err::StateError
  /// [P2P mesh]: https://webrtcglossary.com/mesh
  MemberConnectionState? getState();

  /// Sets a callback to be invoked once the associated [`Connection`] is
  /// closed.
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandleImpl::on_close()`] method errors.
  void onClose({required Object f});

  /// Sets a callback to be invoked once a quality score of the associated
  /// [`Connection`] is updated by a media server.
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandleImpl::on_quality_score_update()`] method
  /// errors.
  void onQualityScoreUpdate({required Object f});

  /// Sets a callback to be invoked once a new [`remote::Track`] is added to
  /// the associated [`Connection`].
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandleImpl::on_remote_track_added()`] method
  /// errors.
  ///
  /// [`remote::Track`]: media::track::remote::Track
  void onRemoteTrackAdded({required Object f});

  /// Sets a callback to be invoked once a state of the associated
  /// [`Connection`] is changed.
  ///
  /// __NOTE__: Only works in [P2P mesh] mode and is subject to change.
  ///
  /// # Errors
  ///
  /// With a [`StateError`] if the underlying object has been disposed, e.g.
  /// `free` was called on this [`ConnectionHandle`], or on a [`Jason`], or on
  /// a [`RoomHandle`] that implicitly owns native object behind this
  /// [`ConnectionHandle`].
  ///
  /// [`Jason`]: api::Jason
  /// [`RoomHandle`]: api::RoomHandle
  /// [`StateError`]: crate::api::err::StateError
  /// [P2P mesh]: https://webrtcglossary.com/mesh
  void onStateChange({required Object f});
}
