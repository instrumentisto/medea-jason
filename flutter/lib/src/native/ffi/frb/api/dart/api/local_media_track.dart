// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../../../frb_generated.dart';
import '../../../media.dart';
import '../../../media/constraints.dart';
import '../../../media/track.dart';
import '../api.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `from`

/// Returns the [`Vec<LocalMediaTrack>`] from the provided [`ForeignClass`]
/// address.
List<LocalMediaTrack> vecLocalTracksFromRaw({required int ptr}) => RustLib
    .instance
    .api
    .crateApiDartApiLocalMediaTrackVecLocalTracksFromRaw(ptr: ptr);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LocalMediaTrack>>
abstract class LocalMediaTrack implements RustOpaqueInterface, ForeignClass {
  /// Frees the data behind the provided opaque local track.
  Object free();

  /// Constructs a [`ForeignClass`] from the given raw pointer via
  /// [`Box::from_raw()`].
  ///
  /// # Safety
  ///
  /// Same as for [`Box::from_raw()`].
  static LocalMediaTrack fromPtr({required int ptr}) => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackFromPtr(ptr: ptr);

  /// Returns the current configured [`NoiseSuppressionLevel`] of this
  /// [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object getNoiseSuppressionLevel();

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of the
  /// provided [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object getTrack();

  /// Indicates whether this [`LocalMediaTrack`] supports audio processing
  /// functions:
  /// - [`LocalMediaTrack::is_noise_suppression_enabled()`]
  /// - [`LocalMediaTrack::set_noise_suppression_enabled()`]
  /// - [`LocalMediaTrack::get_noise_suppression_level()`]
  /// - [`LocalMediaTrack::set_noise_suppression_level()`]
  /// - [`LocalMediaTrack::is_echo_cancellation_enabled()`]
  /// - [`LocalMediaTrack::set_echo_cancellation_enabled()`]
  /// - [`LocalMediaTrack::is_auto_gain_control_enabled()`]
  /// - [`LocalMediaTrack::set_auto_gain_control_enabled()`]
  /// - [`LocalMediaTrack::is_high_pass_filter_enabled()`]
  /// - [`LocalMediaTrack::set_high_pass_filter_enabled()`]
  bool isAudioProcessingAvailable();

  /// Indicates whether auto gain control is enabled for this
  /// [`LocalMediaTrack`].
  Object isAutoGainControlEnabled();

  /// Indicates whether echo cancellation is enabled for this
  /// [`LocalMediaTrack`].
  Object isEchoCancellationEnabled();

  /// Indicates whether high-pass filter is enabled for this
  /// [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object isHighPassFilterEnabled();

  /// Indicates whether noise suppression is enabled for this
  /// [`LocalMediaTrack`].
  Object isNoiseSuppressionEnabled();

  /// Indicates whether an `OnAudioLevelChangedCallback` is supported for this
  /// [`LocalMediaTrack`].
  bool isOnAudioLevelAvailable();

  /// Returns a [`MediaKind::Audio`] if the provided [`LocalMediaTrack`]
  /// represents an audio track, or a [`MediaKind::Video`] if it represents a
  /// video track.
  MediaKind kind();

  /// Returns a [`MediaSourceKind::Device`] if the provided
  /// [`LocalMediaTrack`] is sourced from some device
  /// (webcam/microphone), or a [`MediaSourceKind::Display`] if it's
  /// captured via [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture#dom-mediadevices-getdisplaymedia
  MediaSourceKind mediaSourceKind();

  /// Sets the provided `OnAudioLevelChangedCallback` for this
  /// [`LocalMediaTrack`].
  ///
  /// It's called for live [`LocalMediaTrack`]s once their audio level
  /// changes.
  void onAudioLevelChanged({required Object f});

  /// Sets callback to be invoked once this [`LocalMediaTrack`] is ended.
  void onEnded({required Object f});

  /// Toggles auto gain control for this [`LocalMediaTrack`].
  Object setAutoGainControlEnabled({required bool enabled});

  /// Toggles acoustic echo cancellation for this [`LocalMediaTrack`].
  Object setEchoCancellationEnabled({required bool enabled});

  /// Toggles high-pass filter for this [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object setHighPassFilterEnabled({required bool enabled});

  /// Toggles noise suppression for this [`LocalMediaTrack`].
  Object setNoiseSuppressionEnabled({required bool enabled});

  /// Configures a [`NoiseSuppressionLevel`] for this [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object setNoiseSuppressionLevel({required NoiseSuppressionLevel level});

  /// Returns a [`media::MediaStreamTrackState::Live`] if this
  /// [`LocalMediaTrack`] is active, or a
  /// [`media::MediaStreamTrackState::Ended`] if it has ended.
  Object state();
}
