// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../../../frb_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `from`

/// Reason of why a [`Room`] is closed.
class RoomCloseReason {
  /// [`Room`]'s close reason.
  final String reason;

  /// Indicator whether the [`Room`] was closed by server.
  final bool isClosedByServer;

  /// Indicator whether the [`Room`] close reason is considered as an error.
  final bool isErr;

  const RoomCloseReason({
    required this.reason,
    required this.isClosedByServer,
    required this.isErr,
  });

  /// Constructs a [`ForeignClass`] from the given raw pointer via
  /// [`Box::from_raw()`].
  ///
  /// # Safety
  ///
  /// Same as for [`Box::from_raw()`].
  static RoomCloseReason fromPtr({required int ptr}) => RustLib.instance.api
      .crateApiDartApiRoomCloseReasonRoomCloseReasonFromPtr(ptr: ptr);

  @override
  int get hashCode =>
      reason.hashCode ^ isClosedByServer.hashCode ^ isErr.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RoomCloseReason &&
          runtimeType == other.runtimeType &&
          reason == other.reason &&
          isClosedByServer == other.isClosedByServer &&
          isErr == other.isErr;
}
