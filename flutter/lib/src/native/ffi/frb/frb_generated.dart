// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'api/dart/api.dart';
import 'api/dart/api/connection_handle.dart';
import 'api/dart/api/jason.dart';
import 'api/dart/api/local_media_track.dart';
import 'api/dart/api/media_manager.dart';
import 'api/dart/api/reconnect_handle.dart';
import 'api/dart/api/remote_media_track.dart';
import 'api/dart/api/room.dart';
import 'api/dart/api/room_close_reason.dart';
import 'frb_generated.dart';
import 'media.dart';
import 'media/constraints.dart';
import 'media/track.dart';
import 'media/track/remote.dart';

import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1168616946;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'medea_jason',
        ioDirectory: '../target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Object crateApiDartApiConnectionHandleConnectionHandleDisableRemoteAudio({
    required ConnectionHandle that,
  });

  Object crateApiDartApiConnectionHandleConnectionHandleDisableRemoteVideo({
    required ConnectionHandle that,
    MediaSourceKind? sourceKind,
  });

  Object crateApiDartApiConnectionHandleConnectionHandleEnableRemoteAudio({
    required ConnectionHandle that,
  });

  Object crateApiDartApiConnectionHandleConnectionHandleEnableRemoteVideo({
    required ConnectionHandle that,
    MediaSourceKind? sourceKind,
  });

  ConnectionHandle crateApiDartApiConnectionHandleConnectionHandleFromPtr({
    required int ptr,
  });

  String crateApiDartApiConnectionHandleConnectionHandleGetRemoteMemberId({
    required ConnectionHandle that,
  });

  void crateApiDartApiConnectionHandleConnectionHandleOnClose({
    required ConnectionHandle that,
    required Object f,
  });

  void crateApiDartApiConnectionHandleConnectionHandleOnQualityScoreUpdate({
    required ConnectionHandle that,
    required Object f,
  });

  void crateApiDartApiConnectionHandleConnectionHandleOnRemoteTrackAdded({
    required ConnectionHandle that,
    required Object f,
  });

  void crateApiDartApiJasonJasonJasonCloseRoom({
    required Jason that,
    required RoomHandle roomToDelete,
  });

  void crateApiDartApiJasonJasonJasonDispose({required Jason that});

  RoomHandle crateApiDartApiJasonJasonJasonInitRoom({required Jason that});

  MediaManagerHandle crateApiDartApiJasonJasonJasonMediaManager({
    required Jason that,
  });

  Jason crateApiDartApiJasonJasonNew();

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackFree({
    required LocalMediaTrack that,
  });

  LocalMediaTrack crateApiDartApiLocalMediaTrackLocalMediaTrackFromPtr({
    required int ptr,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackGetNoiseSuppressionLevel({
    required LocalMediaTrack that,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackGetTrack({
    required LocalMediaTrack that,
  });

  bool crateApiDartApiLocalMediaTrackLocalMediaTrackIsAudioProcessingAvailable({
    required LocalMediaTrack that,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackIsAutoGainControlEnabled({
    required LocalMediaTrack that,
  });

  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackIsEchoCancellationEnabled({
    required LocalMediaTrack that,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackIsHighPassFilterEnabled({
    required LocalMediaTrack that,
  });

  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackIsNoiseSuppressionEnabled({
    required LocalMediaTrack that,
  });

  bool crateApiDartApiLocalMediaTrackLocalMediaTrackIsOnAudioLevelAvailable({
    required LocalMediaTrack that,
  });

  MediaKind crateApiDartApiLocalMediaTrackLocalMediaTrackKind({
    required LocalMediaTrack that,
  });

  MediaSourceKind crateApiDartApiLocalMediaTrackLocalMediaTrackMediaSourceKind({
    required LocalMediaTrack that,
  });

  void crateApiDartApiLocalMediaTrackLocalMediaTrackOnAudioLevelChanged({
    required LocalMediaTrack that,
    required Object f,
  });

  void crateApiDartApiLocalMediaTrackLocalMediaTrackOnEnded({
    required LocalMediaTrack that,
    required Object f,
  });

  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackSetAutoGainControlEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  });

  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackSetEchoCancellationEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackSetHighPassFilterEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  });

  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionLevel({
    required LocalMediaTrack that,
    required NoiseSuppressionLevel level,
  });

  Object crateApiDartApiLocalMediaTrackLocalMediaTrackState({
    required LocalMediaTrack that,
  });

  Object crateApiDartApiMediaManagerMediaManagerHandleEnumerateDevices({
    required MediaManagerHandle that,
  });

  Object crateApiDartApiMediaManagerMediaManagerHandleEnumerateDisplays({
    required MediaManagerHandle that,
  });

  Object crateApiDartApiMediaManagerMediaManagerHandleInitLocalTracks({
    required MediaManagerHandle that,
    required ApiMediaStreamSettings caps,
  });

  Object crateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolume({
    required MediaManagerHandle that,
  });

  Object
  crateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeIsAvailable({
    required MediaManagerHandle that,
  });

  void crateApiDartApiMediaManagerMediaManagerHandleOnDeviceChange({
    required MediaManagerHandle that,
    required Object cb,
  });

  Object crateApiDartApiMediaManagerMediaManagerHandleSetMicrophoneVolume({
    required MediaManagerHandle that,
    required PlatformInt64 level,
  });

  Object crateApiDartApiMediaManagerMediaManagerHandleSetOutputAudioId({
    required MediaManagerHandle that,
    required String deviceId,
  });

  ReconnectHandle crateApiDartApiReconnectHandleReconnectHandleFromPtr({
    required int ptr,
  });

  Object crateApiDartApiReconnectHandleReconnectHandleReconnectWithBackoff({
    required ReconnectHandle that,
    required int startingDelay,
    required double multiplier,
    required int maxDelay,
    int? maxElapsedTimeMs,
  });

  Object crateApiDartApiReconnectHandleReconnectHandleReconnectWithDelay({
    required ReconnectHandle that,
    required int delayMs,
  });

  RemoteMediaTrack crateApiDartApiRemoteMediaTrackRemoteMediaTrackFromPtr({
    required int ptr,
  });

  Object crateApiDartApiRemoteMediaTrackRemoteMediaTrackGetTrack({
    required RemoteMediaTrack that,
  });

  MediaKind crateApiDartApiRemoteMediaTrackRemoteMediaTrackKind({
    required RemoteMediaTrack that,
  });

  MediaDirection crateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaDirection({
    required RemoteMediaTrack that,
  });

  MediaSourceKind
  crateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaSourceKind({
    required RemoteMediaTrack that,
  });

  bool crateApiDartApiRemoteMediaTrackRemoteMediaTrackMuted({
    required RemoteMediaTrack that,
  });

  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMediaDirectionChanged({
    required RemoteMediaTrack that,
    required Object f,
  });

  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMuted({
    required RemoteMediaTrack that,
    required Object f,
  });

  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnStopped({
    required RemoteMediaTrack that,
    required Object f,
  });

  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnUnmuted({
    required RemoteMediaTrack that,
    required Object f,
  });

  Object crateApiDartApiRoomRoomHandleDisableAudio({required RoomHandle that});

  Object crateApiDartApiRoomRoomHandleDisableRemoteAudio({
    required RoomHandle that,
  });

  Object crateApiDartApiRoomRoomHandleDisableRemoteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  });

  Object crateApiDartApiRoomRoomHandleDisableVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  });

  Object crateApiDartApiRoomRoomHandleEnableAudio({required RoomHandle that});

  Object crateApiDartApiRoomRoomHandleEnableRemoteAudio({
    required RoomHandle that,
  });

  Object crateApiDartApiRoomRoomHandleEnableRemoteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  });

  Object crateApiDartApiRoomRoomHandleEnableVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  });

  Object crateApiDartApiRoomRoomHandleJoin({
    required RoomHandle that,
    required String token,
  });

  Object crateApiDartApiRoomRoomHandleMuteAudio({required RoomHandle that});

  Object crateApiDartApiRoomRoomHandleMuteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  });

  void crateApiDartApiRoomRoomHandleOnClose({
    required RoomHandle that,
    required Object cb,
  });

  void crateApiDartApiRoomRoomHandleOnConnectionLoss({
    required RoomHandle that,
    required Object cb,
  });

  void crateApiDartApiRoomRoomHandleOnFailedLocalMedia({
    required RoomHandle that,
    required Object cb,
  });

  void crateApiDartApiRoomRoomHandleOnLocalTrack({
    required RoomHandle that,
    required Object cb,
  });

  void crateApiDartApiRoomRoomHandleOnNewConnection({
    required RoomHandle that,
    required Object cb,
  });

  Object crateApiDartApiRoomRoomHandleSetLocalMediaSettings({
    required RoomHandle that,
    required ApiMediaStreamSettings settings,
    required bool stopFirst,
    required bool rollbackOnFail,
  });

  Object crateApiDartApiRoomRoomHandleUnmuteAudio({required RoomHandle that});

  Object crateApiDartApiRoomRoomHandleUnmuteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  });

  void crateApiDartApiLogDartException({
    required String message,
    required String stackTrace,
  });

  void crateApiDartApiOnPanic({required Object cb});

  RoomCloseReason crateApiDartApiRoomCloseReasonRoomCloseReasonFromPtr({
    required int ptr,
  });

  void crateApiDartApiSetDartOpaqueMessagePort({
    required PlatformInt64 dartHandlerPort,
  });

  List<LocalMediaTrack> crateApiDartApiLocalMediaTrackVecLocalTracksFromRaw({
    required int ptr,
  });

  List<ApiMediaDeviceDetails> crateApiDartApiVecMediaDeviceDetailsFromRaw({
    required int ptr,
  });

  List<ApiMediaDisplayDetails> crateApiDartApiVecMediaDisplayDetailsFromRaw({
    required int ptr,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ConnectionHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ConnectionHandle;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ConnectionHandlePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Jason;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Jason;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JasonPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LocalMediaTrack;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LocalMediaTrack;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_LocalMediaTrackPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MediaManagerHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MediaManagerHandle;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MediaManagerHandlePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReconnectHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReconnectHandle;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ReconnectHandlePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RemoteMediaTrack;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RemoteMediaTrack;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_RemoteMediaTrackPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RoomHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RoomHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RoomHandlePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Object crateApiDartApiConnectionHandleConnectionHandleDisableRemoteAudio({
    required ConnectionHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleDisableRemoteAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleDisableRemoteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_disable_remote_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiConnectionHandleConnectionHandleDisableRemoteVideo({
    required ConnectionHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleDisableRemoteVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleDisableRemoteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_disable_remote_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  Object crateApiDartApiConnectionHandleConnectionHandleEnableRemoteAudio({
    required ConnectionHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleEnableRemoteAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleEnableRemoteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_enable_remote_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiConnectionHandleConnectionHandleEnableRemoteVideo({
    required ConnectionHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleEnableRemoteVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleEnableRemoteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_enable_remote_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  ConnectionHandle crateApiDartApiConnectionHandleConnectionHandleFromPtr({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleFromPtrConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_from_ptr",
        argNames: ["ptr"],
      );

  @override
  String crateApiDartApiConnectionHandleConnectionHandleGetRemoteMemberId({
    required ConnectionHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleGetRemoteMemberIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleGetRemoteMemberIdConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_get_remote_member_id",
        argNames: ["that"],
      );

  @override
  void crateApiDartApiConnectionHandleConnectionHandleOnClose({
    required ConnectionHandle that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleOnCloseConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleOnCloseConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_on_close",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiConnectionHandleConnectionHandleOnQualityScoreUpdate({
    required ConnectionHandle that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleOnQualityScoreUpdateConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleOnQualityScoreUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_on_quality_score_update",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiConnectionHandleConnectionHandleOnRemoteTrackAdded({
    required ConnectionHandle that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta:
            kCrateApiDartApiConnectionHandleConnectionHandleOnRemoteTrackAddedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiConnectionHandleConnectionHandleOnRemoteTrackAddedConstMeta =>
      const TaskConstMeta(
        debugName: "ConnectionHandle_on_remote_track_added",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiJasonJasonJasonCloseRoom({
    required Jason that,
    required RoomHandle roomToDelete,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            roomToDelete,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiJasonJasonJasonCloseRoomConstMeta,
        argValues: [that, roomToDelete],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiJasonJasonJasonCloseRoomConstMeta =>
      const TaskConstMeta(
        debugName: "Jason_jason_close_room",
        argNames: ["that", "roomToDelete"],
      );

  @override
  void crateApiDartApiJasonJasonJasonDispose({required Jason that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiJasonJasonJasonDisposeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiJasonJasonJasonDisposeConstMeta =>
      const TaskConstMeta(debugName: "Jason_jason_dispose", argNames: ["that"]);

  @override
  RoomHandle crateApiDartApiJasonJasonJasonInitRoom({required Jason that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiJasonJasonJasonInitRoomConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiJasonJasonJasonInitRoomConstMeta =>
      const TaskConstMeta(
        debugName: "Jason_jason_init_room",
        argNames: ["that"],
      );

  @override
  MediaManagerHandle crateApiDartApiJasonJasonJasonMediaManager({
    required Jason that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiJasonJasonJasonMediaManagerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiJasonJasonJasonMediaManagerConstMeta =>
      const TaskConstMeta(
        debugName: "Jason_jason_media_manager",
        argNames: ["that"],
      );

  @override
  Jason crateApiDartApiJasonJasonNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiJasonJasonNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiJasonJasonNewConstMeta =>
      const TaskConstMeta(debugName: "Jason_new", argNames: []);

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackFree({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiLocalMediaTrackLocalMediaTrackFreeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackFreeConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_free",
        argNames: ["that"],
      );

  @override
  LocalMediaTrack crateApiDartApiLocalMediaTrackLocalMediaTrackFromPtr({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackFromPtrConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackGetNoiseSuppressionLevel({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackGetNoiseSuppressionLevelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackGetNoiseSuppressionLevelConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_get_noise_suppression_level",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackGetTrack({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackGetTrackConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackGetTrackConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_get_track",
        argNames: ["that"],
      );

  @override
  bool crateApiDartApiLocalMediaTrackLocalMediaTrackIsAudioProcessingAvailable({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsAudioProcessingAvailableConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsAudioProcessingAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_is_audio_processing_available",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackIsAutoGainControlEnabled({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsAutoGainControlEnabledConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsAutoGainControlEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_is_auto_gain_control_enabled",
        argNames: ["that"],
      );

  @override
  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackIsEchoCancellationEnabled({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsEchoCancellationEnabledConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsEchoCancellationEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_is_echo_cancellation_enabled",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackIsHighPassFilterEnabled({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsHighPassFilterEnabledConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsHighPassFilterEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_is_high_pass_filter_enabled",
        argNames: ["that"],
      );

  @override
  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackIsNoiseSuppressionEnabled({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsNoiseSuppressionEnabledConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsNoiseSuppressionEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_is_noise_suppression_enabled",
        argNames: ["that"],
      );

  @override
  bool crateApiDartApiLocalMediaTrackLocalMediaTrackIsOnAudioLevelAvailable({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsOnAudioLevelAvailableConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackIsOnAudioLevelAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_is_on_audio_level_available",
        argNames: ["that"],
      );

  @override
  MediaKind crateApiDartApiLocalMediaTrackLocalMediaTrackKind({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_media_kind,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiLocalMediaTrackLocalMediaTrackKindConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackKindConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_kind",
        argNames: ["that"],
      );

  @override
  MediaSourceKind crateApiDartApiLocalMediaTrackLocalMediaTrackMediaSourceKind({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_media_source_kind,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackMediaSourceKindConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackMediaSourceKindConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_media_source_kind",
        argNames: ["that"],
      );

  @override
  void crateApiDartApiLocalMediaTrackLocalMediaTrackOnAudioLevelChanged({
    required LocalMediaTrack that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackOnAudioLevelChangedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackOnAudioLevelChangedConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_on_audio_level_changed",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiLocalMediaTrackLocalMediaTrackOnEnded({
    required LocalMediaTrack that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackOnEndedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackOnEndedConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_on_ended",
        argNames: ["that", "f"],
      );

  @override
  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackSetAutoGainControlEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_bool(enabled, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetAutoGainControlEnabledConstMeta,
        argValues: [that, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetAutoGainControlEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_set_auto_gain_control_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackSetEchoCancellationEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_bool(enabled, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetEchoCancellationEnabledConstMeta,
        argValues: [that, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetEchoCancellationEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_set_echo_cancellation_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackSetHighPassFilterEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_bool(enabled, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetHighPassFilterEnabledConstMeta,
        argValues: [that, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetHighPassFilterEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_set_high_pass_filter_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  Object
  crateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionEnabled({
    required LocalMediaTrack that,
    required bool enabled,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_bool(enabled, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionEnabledConstMeta,
        argValues: [that, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_set_noise_suppression_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionLevel({
    required LocalMediaTrack that,
    required NoiseSuppressionLevel level,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          sse_encode_noise_suppression_level(level, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionLevelConstMeta,
        argValues: [that, level],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionLevelConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_set_noise_suppression_level",
        argNames: ["that", "level"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackLocalMediaTrackState({
    required LocalMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiLocalMediaTrackLocalMediaTrackStateConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackLocalMediaTrackStateConstMeta =>
      const TaskConstMeta(
        debugName: "LocalMediaTrack_state",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiMediaManagerMediaManagerHandleEnumerateDevices({
    required MediaManagerHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleEnumerateDevicesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleEnumerateDevicesConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_enumerate_devices",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiMediaManagerMediaManagerHandleEnumerateDisplays({
    required MediaManagerHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleEnumerateDisplaysConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleEnumerateDisplaysConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_enumerate_displays",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiMediaManagerMediaManagerHandleInitLocalTracks({
    required MediaManagerHandle that,
    required ApiMediaStreamSettings caps,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          sse_encode_box_autoadd_api_media_stream_settings(caps, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleInitLocalTracksConstMeta,
        argValues: [that, caps],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleInitLocalTracksConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_init_local_tracks",
        argNames: ["that", "caps"],
      );

  @override
  Object crateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolume({
    required MediaManagerHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_microphone_volume",
        argNames: ["that"],
      );

  @override
  Object
  crateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeIsAvailable({
    required MediaManagerHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_microphone_volume_is_available",
        argNames: ["that"],
      );

  @override
  void crateApiDartApiMediaManagerMediaManagerHandleOnDeviceChange({
    required MediaManagerHandle that,
    required Object cb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleOnDeviceChangeConstMeta,
        argValues: [that, cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleOnDeviceChangeConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_on_device_change",
        argNames: ["that", "cb"],
      );

  @override
  Object crateApiDartApiMediaManagerMediaManagerHandleSetMicrophoneVolume({
    required MediaManagerHandle that,
    required PlatformInt64 level,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          sse_encode_i_64(level, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleSetMicrophoneVolumeConstMeta,
        argValues: [that, level],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleSetMicrophoneVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_set_microphone_volume",
        argNames: ["that", "level"],
      );

  @override
  Object crateApiDartApiMediaManagerMediaManagerHandleSetOutputAudioId({
    required MediaManagerHandle that,
    required String deviceId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
            that,
            serializer,
          );
          sse_encode_String(deviceId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiMediaManagerMediaManagerHandleSetOutputAudioIdConstMeta,
        argValues: [that, deviceId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiMediaManagerMediaManagerHandleSetOutputAudioIdConstMeta =>
      const TaskConstMeta(
        debugName: "MediaManagerHandle_set_output_audio_id",
        argNames: ["that", "deviceId"],
      );

  @override
  ReconnectHandle crateApiDartApiReconnectHandleReconnectHandleFromPtr({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiReconnectHandleReconnectHandleFromPtrConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiReconnectHandleReconnectHandleFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "ReconnectHandle_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiReconnectHandleReconnectHandleReconnectWithBackoff({
    required ReconnectHandle that,
    required int startingDelay,
    required double multiplier,
    required int maxDelay,
    int? maxElapsedTimeMs,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
            that,
            serializer,
          );
          sse_encode_u_32(startingDelay, serializer);
          sse_encode_f_64(multiplier, serializer);
          sse_encode_u_32(maxDelay, serializer);
          sse_encode_opt_box_autoadd_u_32(maxElapsedTimeMs, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiReconnectHandleReconnectHandleReconnectWithBackoffConstMeta,
        argValues: [
          that,
          startingDelay,
          multiplier,
          maxDelay,
          maxElapsedTimeMs,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiReconnectHandleReconnectHandleReconnectWithBackoffConstMeta =>
      const TaskConstMeta(
        debugName: "ReconnectHandle_reconnect_with_backoff",
        argNames: [
          "that",
          "startingDelay",
          "multiplier",
          "maxDelay",
          "maxElapsedTimeMs",
        ],
      );

  @override
  Object crateApiDartApiReconnectHandleReconnectHandleReconnectWithDelay({
    required ReconnectHandle that,
    required int delayMs,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
            that,
            serializer,
          );
          sse_encode_u_32(delayMs, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiReconnectHandleReconnectHandleReconnectWithDelayConstMeta,
        argValues: [that, delayMs],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiReconnectHandleReconnectHandleReconnectWithDelayConstMeta =>
      const TaskConstMeta(
        debugName: "ReconnectHandle_reconnect_with_delay",
        argNames: ["that", "delayMs"],
      );

  @override
  RemoteMediaTrack crateApiDartApiRemoteMediaTrackRemoteMediaTrackFromPtr({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackFromPtrConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiRemoteMediaTrackRemoteMediaTrackGetTrack({
    required RemoteMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackGetTrackConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackGetTrackConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_get_track",
        argNames: ["that"],
      );

  @override
  MediaKind crateApiDartApiRemoteMediaTrackRemoteMediaTrackKind({
    required RemoteMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_media_kind,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackKindConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackKindConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_kind",
        argNames: ["that"],
      );

  @override
  MediaDirection crateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaDirection({
    required RemoteMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_media_direction,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaDirectionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaDirectionConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_media_direction",
        argNames: ["that"],
      );

  @override
  MediaSourceKind
  crateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaSourceKind({
    required RemoteMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_media_source_kind,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaSourceKindConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaSourceKindConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_media_source_kind",
        argNames: ["that"],
      );

  @override
  bool crateApiDartApiRemoteMediaTrackRemoteMediaTrackMuted({
    required RemoteMediaTrack that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackMutedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackMutedConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_muted",
        argNames: ["that"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMediaDirectionChanged({
    required RemoteMediaTrack that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMediaDirectionChangedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_on_media_direction_changed",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMuted({
    required RemoteMediaTrack that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMutedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMutedConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_on_muted",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnStopped({
    required RemoteMediaTrack that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnStoppedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnStoppedConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_on_stopped",
        argNames: ["that", "f"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnUnmuted({
    required RemoteMediaTrack that,
    required Object f,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
            that,
            serializer,
          );
          sse_encode_DartOpaque(f, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnUnmutedConstMeta,
        argValues: [that, f],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRemoteMediaTrackRemoteMediaTrackOnUnmutedConstMeta =>
      const TaskConstMeta(
        debugName: "RemoteMediaTrack_on_unmuted",
        argNames: ["that", "f"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleDisableAudio({required RoomHandle that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleDisableAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleDisableAudioConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_disable_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleDisableRemoteAudio({
    required RoomHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleDisableRemoteAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleDisableRemoteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_disable_remote_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleDisableRemoteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleDisableRemoteVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleDisableRemoteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_disable_remote_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleDisableVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleDisableVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleDisableVideoConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_disable_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleEnableAudio({required RoomHandle that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleEnableAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleEnableAudioConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_enable_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleEnableRemoteAudio({
    required RoomHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleEnableRemoteAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleEnableRemoteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_enable_remote_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleEnableRemoteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleEnableRemoteVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleEnableRemoteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_enable_remote_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleEnableVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleEnableVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleEnableVideoConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_enable_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleJoin({
    required RoomHandle that,
    required String token,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_String(token, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleJoinConstMeta,
        argValues: [that, token],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleJoinConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_join",
        argNames: ["that", "token"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleMuteAudio({required RoomHandle that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleMuteAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleMuteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_mute_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleMuteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleMuteVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleMuteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_mute_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  void crateApiDartApiRoomRoomHandleOnClose({
    required RoomHandle that,
    required Object cb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleOnCloseConstMeta,
        argValues: [that, cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleOnCloseConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_on_close",
        argNames: ["that", "cb"],
      );

  @override
  void crateApiDartApiRoomRoomHandleOnConnectionLoss({
    required RoomHandle that,
    required Object cb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleOnConnectionLossConstMeta,
        argValues: [that, cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleOnConnectionLossConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_on_connection_loss",
        argNames: ["that", "cb"],
      );

  @override
  void crateApiDartApiRoomRoomHandleOnFailedLocalMedia({
    required RoomHandle that,
    required Object cb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleOnFailedLocalMediaConstMeta,
        argValues: [that, cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleOnFailedLocalMediaConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_on_failed_local_media",
        argNames: ["that", "cb"],
      );

  @override
  void crateApiDartApiRoomRoomHandleOnLocalTrack({
    required RoomHandle that,
    required Object cb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleOnLocalTrackConstMeta,
        argValues: [that, cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleOnLocalTrackConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_on_local_track",
        argNames: ["that", "cb"],
      );

  @override
  void crateApiDartApiRoomRoomHandleOnNewConnection({
    required RoomHandle that,
    required Object cb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_DartOpaque,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleOnNewConnectionConstMeta,
        argValues: [that, cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleOnNewConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_on_new_connection",
        argNames: ["that", "cb"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleSetLocalMediaSettings({
    required RoomHandle that,
    required ApiMediaStreamSettings settings,
    required bool stopFirst,
    required bool rollbackOnFail,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_box_autoadd_api_media_stream_settings(
            settings,
            serializer,
          );
          sse_encode_bool(stopFirst, serializer);
          sse_encode_bool(rollbackOnFail, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleSetLocalMediaSettingsConstMeta,
        argValues: [that, settings, stopFirst, rollbackOnFail],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRoomRoomHandleSetLocalMediaSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_set_local_media_settings",
        argNames: ["that", "settings", "stopFirst", "rollbackOnFail"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleUnmuteAudio({required RoomHandle that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleUnmuteAudioConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleUnmuteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_unmute_audio",
        argNames: ["that"],
      );

  @override
  Object crateApiDartApiRoomRoomHandleUnmuteVideo({
    required RoomHandle that,
    MediaSourceKind? sourceKind,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_DartOpaque,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiRoomRoomHandleUnmuteVideoConstMeta,
        argValues: [that, sourceKind],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiRoomRoomHandleUnmuteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "RoomHandle_unmute_video",
        argNames: ["that", "sourceKind"],
      );

  @override
  void crateApiDartApiLogDartException({
    required String message,
    required String stackTrace,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          sse_encode_String(stackTrace, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiLogDartExceptionConstMeta,
        argValues: [message, stackTrace],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiLogDartExceptionConstMeta =>
      const TaskConstMeta(
        debugName: "log_dart_exception",
        argNames: ["message", "stackTrace"],
      );

  @override
  void crateApiDartApiOnPanic({required Object cb}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_DartOpaque(cb, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiOnPanicConstMeta,
        argValues: [cb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiOnPanicConstMeta =>
      const TaskConstMeta(debugName: "on_panic", argNames: ["cb"]);

  @override
  RoomCloseReason crateApiDartApiRoomCloseReasonRoomCloseReasonFromPtr({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 78)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_room_close_reason,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiRoomCloseReasonRoomCloseReasonFromPtrConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiRoomCloseReasonRoomCloseReasonFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "room_close_reason_from_ptr",
        argNames: ["ptr"],
      );

  @override
  void crateApiDartApiSetDartOpaqueMessagePort({
    required PlatformInt64 dartHandlerPort,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_64(dartHandlerPort, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 79)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiSetDartOpaqueMessagePortConstMeta,
        argValues: [dartHandlerPort],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiSetDartOpaqueMessagePortConstMeta =>
      const TaskConstMeta(
        debugName: "set_dart_opaque_message_port",
        argNames: ["dartHandlerPort"],
      );

  @override
  List<LocalMediaTrack> crateApiDartApiLocalMediaTrackVecLocalTracksFromRaw({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 80)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiDartApiLocalMediaTrackVecLocalTracksFromRawConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiDartApiLocalMediaTrackVecLocalTracksFromRawConstMeta =>
      const TaskConstMeta(
        debugName: "vec_local_tracks_from_raw",
        argNames: ["ptr"],
      );

  @override
  List<ApiMediaDeviceDetails> crateApiDartApiVecMediaDeviceDetailsFromRaw({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 81)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_api_media_device_details,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiVecMediaDeviceDetailsFromRawConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiVecMediaDeviceDetailsFromRawConstMeta =>
      const TaskConstMeta(
        debugName: "vec_media_device_details_from_raw",
        argNames: ["ptr"],
      );

  @override
  List<ApiMediaDisplayDetails> crateApiDartApiVecMediaDisplayDetailsFromRaw({
    required int ptr,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_CastedPrimitive_usize(ptr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 82)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_api_media_display_details,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDartApiVecMediaDisplayDetailsFromRawConstMeta,
        argValues: [ptr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDartApiVecMediaDisplayDetailsFromRawConstMeta =>
      const TaskConstMeta(
        debugName: "vec_media_display_details_from_raw",
        argNames: ["ptr"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ConnectionHandle => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ConnectionHandle => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Jason => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Jason => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LocalMediaTrack => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LocalMediaTrack => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MediaManagerHandle => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MediaManagerHandle => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReconnectHandle => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReconnectHandle => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RemoteMediaTrack => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RemoteMediaTrack => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RoomHandle => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RoomHandle => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle;

  @protected
  ConnectionHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Jason
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JasonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LocalMediaTrack
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MediaManagerHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReconnectHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RemoteMediaTrack
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RoomHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoomHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConnectionHandle
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Jason
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JasonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LocalMediaTrack
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MediaManagerHandle
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReconnectHandle
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RemoteMediaTrack
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RoomHandle
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoomHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
      'Not implemented in this codec, please use the other one',
    );
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ConnectionHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Jason
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JasonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LocalMediaTrack
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MediaManagerHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReconnectHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RemoteMediaTrack
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RoomHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoomHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ForeignClass dco_decode_TraitDef_ForeignClass(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ApiAudioConstraints dco_decode_api_audio_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ApiAudioConstraints(
      deviceId: dco_decode_opt_String(arr[0]),
      autoGainControl: dco_decode_opt_box_autoadd_constrain_boolean(arr[1]),
      noiseSuppression: dco_decode_opt_box_autoadd_constrain_boolean(arr[2]),
      noiseSuppressionLevel: dco_decode_opt_box_autoadd_noise_suppression_level(
        arr[3],
      ),
      echoCancellation: dco_decode_opt_box_autoadd_constrain_boolean(arr[4]),
      highPassFilter: dco_decode_opt_box_autoadd_constrain_boolean(arr[5]),
    );
  }

  @protected
  ApiConstrainFacingMode dco_decode_api_constrain_facing_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApiConstrainFacingMode_Exact(dco_decode_facing_mode(raw[1]));
      case 1:
        return ApiConstrainFacingMode_Ideal(dco_decode_facing_mode(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApiDeviceVideoTrackConstraints dco_decode_api_device_video_track_constraints(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiDeviceVideoTrackConstraints(
      deviceId: dco_decode_opt_String(arr[0]),
      facingMode: dco_decode_opt_box_autoadd_api_constrain_facing_mode(arr[1]),
      height: dco_decode_opt_box_autoadd_constrain_u_32(arr[2]),
      width: dco_decode_opt_box_autoadd_constrain_u_32(arr[3]),
    );
  }

  @protected
  ApiDisplayVideoTrackConstraints
  dco_decode_api_display_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiDisplayVideoTrackConstraints(
      deviceId: dco_decode_opt_String(arr[0]),
      height: dco_decode_opt_box_autoadd_constrain_u_32(arr[1]),
      width: dco_decode_opt_box_autoadd_constrain_u_32(arr[2]),
      frameRate: dco_decode_opt_box_autoadd_constrain_u_32(arr[3]),
    );
  }

  @protected
  ApiMediaDeviceDetails dco_decode_api_media_device_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiMediaDeviceDetails(
      kind: dco_decode_media_device_kind(arr[0]),
      deviceId: dco_decode_String(arr[1]),
      label: dco_decode_String(arr[2]),
      groupId: dco_decode_opt_String(arr[3]),
      isFailed: dco_decode_bool(arr[4]),
    );
  }

  @protected
  ApiMediaDisplayDetails dco_decode_api_media_display_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiMediaDisplayDetails(
      deviceId: dco_decode_String(arr[0]),
      title: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  ApiMediaStreamSettings dco_decode_api_media_stream_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiMediaStreamSettings(
      audio: dco_decode_opt_box_autoadd_api_audio_constraints(arr[0]),
      deviceVideo:
          dco_decode_opt_box_autoadd_api_device_video_track_constraints(arr[1]),
      displayVideo:
          dco_decode_opt_box_autoadd_api_display_video_track_constraints(
            arr[2],
          ),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ApiAudioConstraints dco_decode_box_autoadd_api_audio_constraints(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_audio_constraints(raw);
  }

  @protected
  ApiConstrainFacingMode dco_decode_box_autoadd_api_constrain_facing_mode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_constrain_facing_mode(raw);
  }

  @protected
  ApiDeviceVideoTrackConstraints
  dco_decode_box_autoadd_api_device_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_device_video_track_constraints(raw);
  }

  @protected
  ApiDisplayVideoTrackConstraints
  dco_decode_box_autoadd_api_display_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_display_video_track_constraints(raw);
  }

  @protected
  ApiMediaStreamSettings dco_decode_box_autoadd_api_media_stream_settings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_media_stream_settings(raw);
  }

  @protected
  ConstrainBoolean dco_decode_box_autoadd_constrain_boolean(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_constrain_boolean(raw);
  }

  @protected
  ConstrainU32 dco_decode_box_autoadd_constrain_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_constrain_u_32(raw);
  }

  @protected
  MediaSourceKind dco_decode_box_autoadd_media_source_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_media_source_kind(raw);
  }

  @protected
  NoiseSuppressionLevel dco_decode_box_autoadd_noise_suppression_level(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_noise_suppression_level(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  ConstrainBoolean dco_decode_constrain_boolean(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConstrainBoolean_Exact(dco_decode_bool(raw[1]));
      case 1:
        return ConstrainBoolean_Ideal(dco_decode_bool(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ConstrainU32 dco_decode_constrain_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConstrainU32_Exact(dco_decode_u_32(raw[1]));
      case 1:
        return ConstrainU32_Ideal(dco_decode_u_32(raw[1]));
      case 2:
        return ConstrainU32_Range(
          dco_decode_u_32(raw[1]),
          dco_decode_u_32(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FacingMode dco_decode_facing_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FacingMode.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<LocalMediaTrack>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack,
        )
        .toList();
  }

  @protected
  List<ApiMediaDeviceDetails> dco_decode_list_api_media_device_details(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_media_device_details)
        .toList();
  }

  @protected
  List<ApiMediaDisplayDetails> dco_decode_list_api_media_display_details(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_media_display_details)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MediaDeviceKind dco_decode_media_device_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaDeviceKind.values[raw as int];
  }

  @protected
  MediaDirection dco_decode_media_direction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaDirection.values[raw as int];
  }

  @protected
  MediaKind dco_decode_media_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaKind.values[raw as int];
  }

  @protected
  MediaSourceKind dco_decode_media_source_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaSourceKind.values[raw as int];
  }

  @protected
  NoiseSuppressionLevel dco_decode_noise_suppression_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NoiseSuppressionLevel.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ApiAudioConstraints? dco_decode_opt_box_autoadd_api_audio_constraints(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_audio_constraints(raw);
  }

  @protected
  ApiConstrainFacingMode? dco_decode_opt_box_autoadd_api_constrain_facing_mode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_constrain_facing_mode(raw);
  }

  @protected
  ApiDeviceVideoTrackConstraints?
  dco_decode_opt_box_autoadd_api_device_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_device_video_track_constraints(raw);
  }

  @protected
  ApiDisplayVideoTrackConstraints?
  dco_decode_opt_box_autoadd_api_display_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_display_video_track_constraints(raw);
  }

  @protected
  ConstrainBoolean? dco_decode_opt_box_autoadd_constrain_boolean(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_constrain_boolean(raw);
  }

  @protected
  ConstrainU32? dco_decode_opt_box_autoadd_constrain_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_constrain_u_32(raw);
  }

  @protected
  MediaSourceKind? dco_decode_opt_box_autoadd_media_source_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_media_source_kind(raw);
  }

  @protected
  NoiseSuppressionLevel? dco_decode_opt_box_autoadd_noise_suppression_level(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_noise_suppression_level(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  RoomCloseReason dco_decode_room_close_reason(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RoomCloseReason(
      reason: dco_decode_String(arr[0]),
      isClosedByServer: dco_decode_bool(arr[1]),
      isErr: dco_decode_bool(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ConnectionHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Jason
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JasonImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LocalMediaTrack
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MediaManagerHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReconnectHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RemoteMediaTrack
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RoomHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoomHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ConnectionHandle
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Jason
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JasonImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LocalMediaTrack
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MediaManagerHandle
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReconnectHandle
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RemoteMediaTrack
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RoomHandle
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoomHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ConnectionHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Jason
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JasonImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LocalMediaTrack
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MediaManagerHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReconnectHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RemoteMediaTrack
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RoomHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoomHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  ApiAudioConstraints sse_decode_api_audio_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_opt_String(deserializer);
    var var_autoGainControl = sse_decode_opt_box_autoadd_constrain_boolean(
      deserializer,
    );
    var var_noiseSuppression = sse_decode_opt_box_autoadd_constrain_boolean(
      deserializer,
    );
    var var_noiseSuppressionLevel =
        sse_decode_opt_box_autoadd_noise_suppression_level(deserializer);
    var var_echoCancellation = sse_decode_opt_box_autoadd_constrain_boolean(
      deserializer,
    );
    var var_highPassFilter = sse_decode_opt_box_autoadd_constrain_boolean(
      deserializer,
    );
    return ApiAudioConstraints(
      deviceId: var_deviceId,
      autoGainControl: var_autoGainControl,
      noiseSuppression: var_noiseSuppression,
      noiseSuppressionLevel: var_noiseSuppressionLevel,
      echoCancellation: var_echoCancellation,
      highPassFilter: var_highPassFilter,
    );
  }

  @protected
  ApiConstrainFacingMode sse_decode_api_constrain_facing_mode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_facing_mode(deserializer);
        return ApiConstrainFacingMode_Exact(var_field0);
      case 1:
        var var_field0 = sse_decode_facing_mode(deserializer);
        return ApiConstrainFacingMode_Ideal(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApiDeviceVideoTrackConstraints sse_decode_api_device_video_track_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_opt_String(deserializer);
    var var_facingMode = sse_decode_opt_box_autoadd_api_constrain_facing_mode(
      deserializer,
    );
    var var_height = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    var var_width = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    return ApiDeviceVideoTrackConstraints(
      deviceId: var_deviceId,
      facingMode: var_facingMode,
      height: var_height,
      width: var_width,
    );
  }

  @protected
  ApiDisplayVideoTrackConstraints
  sse_decode_api_display_video_track_constraints(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_opt_String(deserializer);
    var var_height = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    var var_width = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    var var_frameRate = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    return ApiDisplayVideoTrackConstraints(
      deviceId: var_deviceId,
      height: var_height,
      width: var_width,
      frameRate: var_frameRate,
    );
  }

  @protected
  ApiMediaDeviceDetails sse_decode_api_media_device_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_kind = sse_decode_media_device_kind(deserializer);
    var var_deviceId = sse_decode_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_groupId = sse_decode_opt_String(deserializer);
    var var_isFailed = sse_decode_bool(deserializer);
    return ApiMediaDeviceDetails(
      kind: var_kind,
      deviceId: var_deviceId,
      label: var_label,
      groupId: var_groupId,
      isFailed: var_isFailed,
    );
  }

  @protected
  ApiMediaDisplayDetails sse_decode_api_media_display_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_String(deserializer);
    var var_title = sse_decode_opt_String(deserializer);
    return ApiMediaDisplayDetails(deviceId: var_deviceId, title: var_title);
  }

  @protected
  ApiMediaStreamSettings sse_decode_api_media_stream_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_audio = sse_decode_opt_box_autoadd_api_audio_constraints(
      deserializer,
    );
    var var_deviceVideo =
        sse_decode_opt_box_autoadd_api_device_video_track_constraints(
          deserializer,
        );
    var var_displayVideo =
        sse_decode_opt_box_autoadd_api_display_video_track_constraints(
          deserializer,
        );
    return ApiMediaStreamSettings(
      audio: var_audio,
      deviceVideo: var_deviceVideo,
      displayVideo: var_displayVideo,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ApiAudioConstraints sse_decode_box_autoadd_api_audio_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_audio_constraints(deserializer));
  }

  @protected
  ApiConstrainFacingMode sse_decode_box_autoadd_api_constrain_facing_mode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_constrain_facing_mode(deserializer));
  }

  @protected
  ApiDeviceVideoTrackConstraints
  sse_decode_box_autoadd_api_device_video_track_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_device_video_track_constraints(deserializer));
  }

  @protected
  ApiDisplayVideoTrackConstraints
  sse_decode_box_autoadd_api_display_video_track_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_display_video_track_constraints(deserializer));
  }

  @protected
  ApiMediaStreamSettings sse_decode_box_autoadd_api_media_stream_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_media_stream_settings(deserializer));
  }

  @protected
  ConstrainBoolean sse_decode_box_autoadd_constrain_boolean(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_constrain_boolean(deserializer));
  }

  @protected
  ConstrainU32 sse_decode_box_autoadd_constrain_u_32(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_constrain_u_32(deserializer));
  }

  @protected
  MediaSourceKind sse_decode_box_autoadd_media_source_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_media_source_kind(deserializer));
  }

  @protected
  NoiseSuppressionLevel sse_decode_box_autoadd_noise_suppression_level(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_noise_suppression_level(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  ConstrainBoolean sse_decode_constrain_boolean(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return ConstrainBoolean_Exact(var_field0);
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return ConstrainBoolean_Ideal(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ConstrainU32 sse_decode_constrain_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_32(deserializer);
        return ConstrainU32_Exact(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return ConstrainU32_Ideal(var_field0);
      case 2:
        var var_field0 = sse_decode_u_32(deserializer);
        var var_field1 = sse_decode_u_32(deserializer);
        return ConstrainU32_Range(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FacingMode sse_decode_facing_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FacingMode.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<LocalMediaTrack>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LocalMediaTrack>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<ApiMediaDeviceDetails> sse_decode_list_api_media_device_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiMediaDeviceDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_media_device_details(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiMediaDisplayDetails> sse_decode_list_api_media_display_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiMediaDisplayDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_media_display_details(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MediaDeviceKind sse_decode_media_device_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaDeviceKind.values[inner];
  }

  @protected
  MediaDirection sse_decode_media_direction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaDirection.values[inner];
  }

  @protected
  MediaKind sse_decode_media_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaKind.values[inner];
  }

  @protected
  MediaSourceKind sse_decode_media_source_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaSourceKind.values[inner];
  }

  @protected
  NoiseSuppressionLevel sse_decode_noise_suppression_level(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NoiseSuppressionLevel.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiAudioConstraints? sse_decode_opt_box_autoadd_api_audio_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_audio_constraints(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiConstrainFacingMode? sse_decode_opt_box_autoadd_api_constrain_facing_mode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_constrain_facing_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiDeviceVideoTrackConstraints?
  sse_decode_opt_box_autoadd_api_device_video_track_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_device_video_track_constraints(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  ApiDisplayVideoTrackConstraints?
  sse_decode_opt_box_autoadd_api_display_video_track_constraints(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_display_video_track_constraints(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  ConstrainBoolean? sse_decode_opt_box_autoadd_constrain_boolean(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_constrain_boolean(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ConstrainU32? sse_decode_opt_box_autoadd_constrain_u_32(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_constrain_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MediaSourceKind? sse_decode_opt_box_autoadd_media_source_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_media_source_kind(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NoiseSuppressionLevel? sse_decode_opt_box_autoadd_noise_suppression_level(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_noise_suppression_level(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RoomCloseReason sse_decode_room_close_reason(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_reason = sse_decode_String(deserializer);
    var var_isClosedByServer = sse_decode_bool(deserializer);
    var var_isErr = sse_decode_bool(deserializer);
    return RoomCloseReason(
      reason: var_reason,
      isClosedByServer: var_isClosedByServer,
      isErr: var_isErr,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    ConnectionHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectionHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    Jason self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JasonImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    LocalMediaTrack self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LocalMediaTrackImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    MediaManagerHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MediaManagerHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    ReconnectHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReconnectHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    RemoteMediaTrack self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RemoteMediaTrackImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    RoomHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RoomHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    ConnectionHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectionHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    Jason self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JasonImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    LocalMediaTrack self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LocalMediaTrackImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    MediaManagerHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MediaManagerHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    ReconnectHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReconnectHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    RemoteMediaTrack self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RemoteMediaTrackImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    RoomHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RoomHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
      PlatformPointerUtil.ptrToPlatformInt64(
        encodeDartOpaque(
          self,
          portManager.dartHandlerPort,
          generalizedFrbRustBinding,
        ),
      ),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnectionHandle(
    ConnectionHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectionHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJason(
    Jason self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JasonImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    LocalMediaTrack self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LocalMediaTrackImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaManagerHandle(
    MediaManagerHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MediaManagerHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReconnectHandle(
    ReconnectHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReconnectHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRemoteMediaTrack(
    RemoteMediaTrack self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RemoteMediaTrackImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRoomHandle(
    RoomHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RoomHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_api_audio_constraints(
    ApiAudioConstraints self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceId, serializer);
    sse_encode_opt_box_autoadd_constrain_boolean(
      self.autoGainControl,
      serializer,
    );
    sse_encode_opt_box_autoadd_constrain_boolean(
      self.noiseSuppression,
      serializer,
    );
    sse_encode_opt_box_autoadd_noise_suppression_level(
      self.noiseSuppressionLevel,
      serializer,
    );
    sse_encode_opt_box_autoadd_constrain_boolean(
      self.echoCancellation,
      serializer,
    );
    sse_encode_opt_box_autoadd_constrain_boolean(
      self.highPassFilter,
      serializer,
    );
  }

  @protected
  void sse_encode_api_constrain_facing_mode(
    ApiConstrainFacingMode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApiConstrainFacingMode_Exact(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_facing_mode(field0, serializer);
      case ApiConstrainFacingMode_Ideal(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_facing_mode(field0, serializer);
    }
  }

  @protected
  void sse_encode_api_device_video_track_constraints(
    ApiDeviceVideoTrackConstraints self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceId, serializer);
    sse_encode_opt_box_autoadd_api_constrain_facing_mode(
      self.facingMode,
      serializer,
    );
    sse_encode_opt_box_autoadd_constrain_u_32(self.height, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.width, serializer);
  }

  @protected
  void sse_encode_api_display_video_track_constraints(
    ApiDisplayVideoTrackConstraints self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceId, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.height, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.width, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.frameRate, serializer);
  }

  @protected
  void sse_encode_api_media_device_details(
    ApiMediaDeviceDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_media_device_kind(self.kind, serializer);
    sse_encode_String(self.deviceId, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_opt_String(self.groupId, serializer);
    sse_encode_bool(self.isFailed, serializer);
  }

  @protected
  void sse_encode_api_media_display_details(
    ApiMediaDisplayDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.deviceId, serializer);
    sse_encode_opt_String(self.title, serializer);
  }

  @protected
  void sse_encode_api_media_stream_settings(
    ApiMediaStreamSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_api_audio_constraints(self.audio, serializer);
    sse_encode_opt_box_autoadd_api_device_video_track_constraints(
      self.deviceVideo,
      serializer,
    );
    sse_encode_opt_box_autoadd_api_display_video_track_constraints(
      self.displayVideo,
      serializer,
    );
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_api_audio_constraints(
    ApiAudioConstraints self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_audio_constraints(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_constrain_facing_mode(
    ApiConstrainFacingMode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_constrain_facing_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_device_video_track_constraints(
    ApiDeviceVideoTrackConstraints self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_device_video_track_constraints(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_display_video_track_constraints(
    ApiDisplayVideoTrackConstraints self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_display_video_track_constraints(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_media_stream_settings(
    ApiMediaStreamSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_media_stream_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_constrain_boolean(
    ConstrainBoolean self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_constrain_boolean(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_constrain_u_32(
    ConstrainU32 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_constrain_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_media_source_kind(
    MediaSourceKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_media_source_kind(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_noise_suppression_level(
    NoiseSuppressionLevel self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_noise_suppression_level(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_constrain_boolean(
    ConstrainBoolean self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConstrainBoolean_Exact(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case ConstrainBoolean_Ideal(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
    }
  }

  @protected
  void sse_encode_constrain_u_32(ConstrainU32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConstrainU32_Exact(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(field0, serializer);
      case ConstrainU32_Ideal(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
      case ConstrainU32_Range(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_u_32(field0, serializer);
        sse_encode_u_32(field1, serializer);
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_facing_mode(FacingMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
    List<LocalMediaTrack> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLocalMediaTrack(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_api_media_device_details(
    List<ApiMediaDeviceDetails> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_media_device_details(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_media_display_details(
    List<ApiMediaDisplayDetails> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_media_display_details(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_media_device_kind(
    MediaDeviceKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_media_direction(
    MediaDirection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_media_kind(MediaKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_media_source_kind(
    MediaSourceKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_noise_suppression_level(
    NoiseSuppressionLevel self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_audio_constraints(
    ApiAudioConstraints? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_audio_constraints(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_constrain_facing_mode(
    ApiConstrainFacingMode? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_constrain_facing_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_device_video_track_constraints(
    ApiDeviceVideoTrackConstraints? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_device_video_track_constraints(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_display_video_track_constraints(
    ApiDisplayVideoTrackConstraints? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_display_video_track_constraints(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_constrain_boolean(
    ConstrainBoolean? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_constrain_boolean(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_constrain_u_32(
    ConstrainU32? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_constrain_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_media_source_kind(
    MediaSourceKind? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_media_source_kind(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_noise_suppression_level(
    NoiseSuppressionLevel? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_noise_suppression_level(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_room_close_reason(
    RoomCloseReason self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.reason, serializer);
    sse_encode_bool(self.isClosedByServer, serializer);
    sse_encode_bool(self.isErr, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ConnectionHandleImpl extends RustOpaque implements ConnectionHandle {
  // Not to be used by end users
  ConnectionHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectionHandleImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConnectionHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConnectionHandle,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ConnectionHandlePtr,
  );

  /// Disables inbound audio in the associated [`Connection`].
  Object disableRemoteAudio() => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleDisableRemoteAudio(
        that: this,
      );

  /// Disables inbound video in the associated [`Connection`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  Object disableRemoteVideo({MediaSourceKind? sourceKind}) => RustLib
      .instance
      .api
      .crateApiDartApiConnectionHandleConnectionHandleDisableRemoteVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Enables inbound audio in the associated [`Connection`].
  Object enableRemoteAudio() => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleEnableRemoteAudio(
        that: this,
      );

  /// Enables inbound video in the associated [`Connection`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  Object enableRemoteVideo({MediaSourceKind? sourceKind}) => RustLib
      .instance
      .api
      .crateApiDartApiConnectionHandleConnectionHandleEnableRemoteVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Returns ID of remote `Member` ID of the associated [`Connection`].
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandle::get_remote_member_id()`] method errors.
  String getRemoteMemberId() => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleGetRemoteMemberId(
        that: this,
      );

  /// Sets a callback to be invoked once the associated [`Connection`] is
  /// closed.
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandle::on_close()`] method errors.
  void onClose({required Object f}) => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleOnClose(that: this, f: f);

  /// Sets a callback to be invoked once a quality score of the associated
  /// [`Connection`] is updated by a media server.
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandle::on_quality_score_update()`] method
  /// errors.
  void onQualityScoreUpdate({required Object f}) => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleOnQualityScoreUpdate(
        that: this,
        f: f,
      );

  /// Sets a callback to be invoked once a new [`remote::Track`] is added to
  /// the associated [`Connection`].
  ///
  /// # Errors
  ///
  /// If the [`core::ConnectionHandle::on_remote_track_added()`] method
  /// errors.
  ///
  /// [`remote::Track`]: media::track::remote::Track
  void onRemoteTrackAdded({required Object f}) => RustLib.instance.api
      .crateApiDartApiConnectionHandleConnectionHandleOnRemoteTrackAdded(
        that: this,
        f: f,
      );
}

@sealed
class JasonImpl extends RustOpaque implements Jason {
  // Not to be used by end users
  JasonImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JasonImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Jason,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Jason,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JasonPtr,
  );

  /// Closes the provided [`RoomHandle`].
  void jasonCloseRoom({required RoomHandle roomToDelete}) =>
      RustLib.instance.api.crateApiDartApiJasonJasonJasonCloseRoom(
        that: this,
        roomToDelete: roomToDelete,
      );

  /// Closes this [`Jason`].
  void jasonDispose() =>
      RustLib.instance.api.crateApiDartApiJasonJasonJasonDispose(that: this);

  /// Creates a new [`Room`] and returns its [`RoomHandle`].
  RoomHandle jasonInitRoom() =>
      RustLib.instance.api.crateApiDartApiJasonJasonJasonInitRoom(that: this);

  /// Returns a [`MediaManagerHandle`].
  MediaManagerHandle jasonMediaManager() => RustLib.instance.api
      .crateApiDartApiJasonJasonJasonMediaManager(that: this);
}

@sealed
class LocalMediaTrackImpl extends RustOpaque implements LocalMediaTrack {
  // Not to be used by end users
  LocalMediaTrackImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LocalMediaTrackImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LocalMediaTrack,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LocalMediaTrack,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LocalMediaTrackPtr,
  );

  /// Frees the data behind the provided opaque local track.
  Object free() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackFree(that: this);

  /// Returns the current configured [`NoiseSuppressionLevel`] of this
  /// [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object getNoiseSuppressionLevel() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackGetNoiseSuppressionLevel(
        that: this,
      );

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of the
  /// provided [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object getTrack() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackGetTrack(that: this);

  /// Indicates whether this [`LocalMediaTrack`] supports audio processing
  /// functions:
  /// - [`LocalMediaTrack::is_noise_suppression_enabled()`]
  /// - [`LocalMediaTrack::set_noise_suppression_enabled()`]
  /// - [`LocalMediaTrack::get_noise_suppression_level()`]
  /// - [`LocalMediaTrack::set_noise_suppression_level()`]
  /// - [`LocalMediaTrack::is_echo_cancellation_enabled()`]
  /// - [`LocalMediaTrack::set_echo_cancellation_enabled()`]
  /// - [`LocalMediaTrack::is_auto_gain_control_enabled()`]
  /// - [`LocalMediaTrack::set_auto_gain_control_enabled()`]
  /// - [`LocalMediaTrack::is_high_pass_filter_enabled()`]
  /// - [`LocalMediaTrack::set_high_pass_filter_enabled()`]
  bool isAudioProcessingAvailable() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackIsAudioProcessingAvailable(
        that: this,
      );

  /// Indicates whether auto gain control is enabled for this
  /// [`LocalMediaTrack`].
  Object isAutoGainControlEnabled() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackIsAutoGainControlEnabled(
        that: this,
      );

  /// Indicates whether echo cancellation is enabled for this
  /// [`LocalMediaTrack`].
  Object isEchoCancellationEnabled() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackIsEchoCancellationEnabled(
        that: this,
      );

  /// Indicates whether high-pass filter is enabled for this
  /// [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object isHighPassFilterEnabled() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackIsHighPassFilterEnabled(
        that: this,
      );

  /// Indicates whether noise suppression is enabled for this
  /// [`LocalMediaTrack`].
  Object isNoiseSuppressionEnabled() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackIsNoiseSuppressionEnabled(
        that: this,
      );

  /// Indicates whether an `OnAudioLevelChangedCallback` is supported for this
  /// [`LocalMediaTrack`].
  bool isOnAudioLevelAvailable() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackIsOnAudioLevelAvailable(
        that: this,
      );

  /// Returns a [`MediaKind::Audio`] if the provided [`LocalMediaTrack`]
  /// represents an audio track, or a [`MediaKind::Video`] if it represents a
  /// video track.
  MediaKind kind() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackKind(that: this);

  /// Returns a [`MediaSourceKind::Device`] if the provided
  /// [`LocalMediaTrack`] is sourced from some device
  /// (webcam/microphone), or a [`MediaSourceKind::Display`] if it's
  /// captured via [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture#dom-mediadevices-getdisplaymedia
  MediaSourceKind mediaSourceKind() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackMediaSourceKind(that: this);

  /// Sets the provided `OnAudioLevelChangedCallback` for this
  /// [`LocalMediaTrack`].
  ///
  /// It's called for live [`LocalMediaTrack`]s once their audio level
  /// changes.
  void onAudioLevelChanged({required Object f}) => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackOnAudioLevelChanged(
        that: this,
        f: f,
      );

  /// Sets callback to be invoked once this [`LocalMediaTrack`] is ended.
  void onEnded({required Object f}) => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackOnEnded(that: this, f: f);

  /// Toggles auto gain control for this [`LocalMediaTrack`].
  Object setAutoGainControlEnabled({required bool enabled}) => RustLib
      .instance
      .api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackSetAutoGainControlEnabled(
        that: this,
        enabled: enabled,
      );

  /// Toggles acoustic echo cancellation for this [`LocalMediaTrack`].
  Object setEchoCancellationEnabled({required bool enabled}) => RustLib
      .instance
      .api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackSetEchoCancellationEnabled(
        that: this,
        enabled: enabled,
      );

  /// Toggles high-pass filter for this [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object setHighPassFilterEnabled({required bool enabled}) => RustLib
      .instance
      .api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackSetHighPassFilterEnabled(
        that: this,
        enabled: enabled,
      );

  /// Toggles noise suppression for this [`LocalMediaTrack`].
  Object setNoiseSuppressionEnabled({required bool enabled}) => RustLib
      .instance
      .api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionEnabled(
        that: this,
        enabled: enabled,
      );

  /// Configures a [`NoiseSuppressionLevel`] for this [`LocalMediaTrack`].
  ///
  /// __NOTE__: Only supported on desktop platforms.
  Object setNoiseSuppressionLevel({
    required NoiseSuppressionLevel level,
  }) => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackSetNoiseSuppressionLevel(
        that: this,
        level: level,
      );

  /// Returns a [`media::MediaStreamTrackState::Live`] if this
  /// [`LocalMediaTrack`] is active, or a
  /// [`media::MediaStreamTrackState::Ended`] if it has ended.
  Object state() => RustLib.instance.api
      .crateApiDartApiLocalMediaTrackLocalMediaTrackState(that: this);
}

@sealed
class MediaManagerHandleImpl extends RustOpaque implements MediaManagerHandle {
  // Not to be used by end users
  MediaManagerHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MediaManagerHandleImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MediaManagerHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MediaManagerHandle,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_MediaManagerHandlePtr,
  );

  /// Returns a list of [`ApiMediaDeviceDetails`] objects representing
  /// available media input and devices, such as microphones, cameras, and
  /// so forth.
  Object enumerateDevices() => RustLib.instance.api
      .crateApiDartApiMediaManagerMediaManagerHandleEnumerateDevices(
        that: this,
      );

  /// Returns a list of [`ApiMediaDisplayDetails`] objects representing
  /// available sources that can be used for screen capturing.
  Object enumerateDisplays() => RustLib.instance.api
      .crateApiDartApiMediaManagerMediaManagerHandleEnumerateDisplays(
        that: this,
      );

  /// Returns [`LocalMediaTrack`]s objects, built from the provided
  /// [`ApiMediaStreamSettings`].
  Object initLocalTracks({required ApiMediaStreamSettings caps}) => RustLib
      .instance
      .api
      .crateApiDartApiMediaManagerMediaManagerHandleInitLocalTracks(
        that: this,
        caps: caps,
      );

  /// Returns the current microphone volume level in percents.
  Object microphoneVolume() => RustLib.instance.api
      .crateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolume(
        that: this,
      );

  /// Indicates whether it's possible to access microphone volume settings.
  Object microphoneVolumeIsAvailable() => RustLib.instance.api
      .crateApiDartApiMediaManagerMediaManagerHandleMicrophoneVolumeIsAvailable(
        that: this,
      );

  /// Subscribes onto the [`MediaManagerHandle`]'s `devicechange` event.
  ///
  /// Sets an ideal [frameRate][1] constraint.
  ///
  /// # Errors
  ///
  /// If [`MediaManagerHandle::on_device_change()`] errors.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  void onDeviceChange({required Object cb}) => RustLib.instance.api
      .crateApiDartApiMediaManagerMediaManagerHandleOnDeviceChange(
        that: this,
        cb: cb,
      );

  /// Sets the microphone volume level in percents.
  Object setMicrophoneVolume({required PlatformInt64 level}) => RustLib
      .instance
      .api
      .crateApiDartApiMediaManagerMediaManagerHandleSetMicrophoneVolume(
        that: this,
        level: level,
      );

  /// Switches the current output audio device to the device with the provided
  /// `device_id`.
  Object setOutputAudioId({required String deviceId}) => RustLib.instance.api
      .crateApiDartApiMediaManagerMediaManagerHandleSetOutputAudioId(
        that: this,
        deviceId: deviceId,
      );
}

@sealed
class ReconnectHandleImpl extends RustOpaque implements ReconnectHandle {
  // Not to be used by end users
  ReconnectHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReconnectHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ReconnectHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReconnectHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReconnectHandlePtr,
  );

  /// Tries to reconnect a [`Room`] in a loop with a growing backoff delay.
  ///
  /// The first attempt will be performed immediately, and the second attempt
  /// will be performed after `starting_delay_ms`.
  ///
  /// Delay between reconnection attempts won't be greater than
  /// `max_delay_ms`.
  ///
  /// After each reconnection attempt, delay between reconnections will be
  /// multiplied by the given `multiplier` until it reaches `max_delay_ms`.
  ///
  /// If `multiplier` is a negative number then it will be considered as
  /// `0.0`. This might cause a busy loop, so it's not recommended.
  ///
  /// Max elapsed time can be limited with an optional `max_elapsed_time_ms`
  /// argument.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt
  /// won't be performed. Instead, it will wait for the first reconnection
  /// attempt result and use it here.
  Object reconnectWithBackoff({
    required int startingDelay,
    required double multiplier,
    required int maxDelay,
    int? maxElapsedTimeMs,
  }) => RustLib.instance.api
      .crateApiDartApiReconnectHandleReconnectHandleReconnectWithBackoff(
        that: this,
        startingDelay: startingDelay,
        multiplier: multiplier,
        maxDelay: maxDelay,
        maxElapsedTimeMs: maxElapsedTimeMs,
      );

  /// Tries to reconnect a [`Room`] after the provided delay in milliseconds.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt
  /// won't be performed. Instead, it will wait for the first reconnection
  /// attempt result and use it here.
  Object reconnectWithDelay({required int delayMs}) => RustLib.instance.api
      .crateApiDartApiReconnectHandleReconnectHandleReconnectWithDelay(
        that: this,
        delayMs: delayMs,
      );
}

@sealed
class RemoteMediaTrackImpl extends RustOpaque implements RemoteMediaTrack {
  // Not to be used by end users
  RemoteMediaTrackImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RemoteMediaTrackImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RemoteMediaTrack,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RemoteMediaTrack,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_RemoteMediaTrackPtr,
  );

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`RemoteMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object getTrack() => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackGetTrack(that: this);

  /// Returns this [`RemoteMediaTrack`]'s kind (audio/video).
  MediaKind kind() => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackKind(that: this);

  /// Returns the current general [`MediaDirection`] of this
  /// [`RemoteMediaTrack`].
  MediaDirection mediaDirection() => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaDirection(
        that: this,
      );

  /// Returns this [`RemoteMediaTrack`]'s media source kind.
  MediaSourceKind mediaSourceKind() => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackMediaSourceKind(
        that: this,
      );

  /// Indicate whether this [`RemoteMediaTrack`] is muted.
  bool muted() => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackMuted(that: this);

  /// Sets callback to invoke whenever this [`RemoteMediaTrack`]'s general
  /// [`MediaDirection`] is changed.
  void onMediaDirectionChanged({required Object f}) => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMediaDirectionChanged(
        that: this,
        f: f,
      );

  /// Sets callback to invoke once this [`RemoteMediaTrack`] is muted.
  void onMuted({required Object f}) => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnMuted(that: this, f: f);

  /// Sets callback to invoke once this [`RemoteMediaTrack`] is stopped.
  void onStopped({required Object f}) => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnStopped(
        that: this,
        f: f,
      );

  /// Sets callback to invoke once this [`RemoteMediaTrack`] is unmuted.
  void onUnmuted({required Object f}) => RustLib.instance.api
      .crateApiDartApiRemoteMediaTrackRemoteMediaTrackOnUnmuted(
        that: this,
        f: f,
      );
}

@sealed
class RoomHandleImpl extends RustOpaque implements RoomHandle {
  // Not to be used by end users
  RoomHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RoomHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RoomHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RoomHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RoomHandlePtr,
  );

  /// Disables outbound audio in the provided [`Room`].
  Object disableAudio() => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleDisableAudio(that: this);

  /// Disables inbound audio in the provided [`Room`].
  Object disableRemoteAudio() => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleDisableRemoteAudio(that: this);

  /// Disables inbound video in the provided [`Room`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  ///
  /// # Errors
  ///
  /// If the provided `source_kind` is not a [`MediaSourceKind`] index.
  Object disableRemoteVideo({MediaSourceKind? sourceKind}) =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleDisableRemoteVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Disables outbound video in the provided [`Room`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  ///
  /// # Errors
  ///
  /// If the provided `source_kind` is not a [`MediaSourceKind`] index.
  Object disableVideo({MediaSourceKind? sourceKind}) =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleDisableVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Enables outbound audio in the provided [`Room`].
  Object enableAudio() =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleEnableAudio(that: this);

  /// Enables inbound audio in the provided [`Room`].
  Object enableRemoteAudio() => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleEnableRemoteAudio(that: this);

  /// Enables inbound video in the provided [`Room`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  ///
  /// # Errors
  ///
  /// If the provided `source_kind` is not a [`MediaSourceKind`] index.
  Object enableRemoteVideo({MediaSourceKind? sourceKind}) =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleEnableRemoteVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Enables outbound video in the provided [`Room`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  ///
  /// # Errors
  ///
  /// If the provided `source_kind` is not a [`MediaSourceKind`] index.
  Object enableVideo({MediaSourceKind? sourceKind}) =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleEnableVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Connects to a media server and joins the [`Room`] with the provided
  /// authorization `token`.
  ///
  /// Authorization token has a fixed format:
  /// `{{ Host URL }}/{{ Room ID }}/{{ Member ID }}?token={{ Auth Token }}`
  /// (e.g. `wss://medea.com/MyConf1/Alice?token=777`).
  Object join({required String token}) => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleJoin(that: this, token: token);

  /// Mutes outbound audio in the provided [`Room`].
  Object muteAudio() =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleMuteAudio(that: this);

  /// Mutes outbound video in the provided [`Room`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  ///
  /// # Errors
  ///
  /// If the provided `source_kind` is not a [`MediaSourceKind`] index.
  Object muteVideo({MediaSourceKind? sourceKind}) =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleMuteVideo(
        that: this,
        sourceKind: sourceKind,
      );

  /// Sets a callback to be invoked once the provided [`Room`] is closed,
  /// providing a [`RoomCloseReason`].
  ///
  /// # Errors
  ///
  /// If the [`core::RoomHandle::on_close()`] method errors.
  void onClose({required Object cb}) => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleOnClose(that: this, cb: cb);

  /// Sets a callback to be invoked once a connection with a media server is
  /// lost.
  ///
  /// # Errors
  ///
  /// If the [`core::RoomHandle::on_connection_loss()`] method errors.
  void onConnectionLoss({required Object cb}) => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleOnConnectionLoss(that: this, cb: cb);

  /// Sets a callback to be invoked on local media acquisition failures.
  ///
  /// # Errors
  ///
  /// If the [`core::RoomHandle::on_failed_local_media()`] method errors.
  void onFailedLocalMedia({required Object cb}) => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleOnFailedLocalMedia(that: this, cb: cb);

  /// Sets a callback to be invoked once a new [`LocalMediaTrack`] is added
  /// to the provided [`Room`].
  ///
  /// This might happen in such cases:
  /// 1. Media server initiates a media request.
  /// 2. [`enable_audio()`]/[`enable_video()`] is called.
  /// 3. [`MediaStreamSettings`] are updated via
  ///    [`set_local_media_settings()`].
  ///
  /// # Errors
  ///
  /// If the [`core::RoomHandle::on_local_track()`] method errors.
  ///
  /// [`enable_audio()`]: RoomHandle::enable_audio
  /// [`enable_video()`]: RoomHandle::enable_video
  /// [`MediaStreamSettings`]: media::MediaStreamSettings
  /// [`set_local_media_settings()`]: RoomHandle::set_local_media_settings
  void onLocalTrack({required Object cb}) => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleOnLocalTrack(that: this, cb: cb);

  /// Sets a callback to be invoked once a new [`Connection`] with some remote
  /// `Peer` is established.
  ///
  /// # Errors
  ///
  /// If the [`core::RoomHandle::on_new_connection()`] method errors.
  ///
  /// [`Connection`]: connection::Connection
  void onNewConnection({required Object cb}) => RustLib.instance.api
      .crateApiDartApiRoomRoomHandleOnNewConnection(that: this, cb: cb);

  /// Updates this [`Room`]'s [`ApiMediaStreamSettings`].
  ///
  /// This affects all the [`PeerConnection`]s in this [`Room`]. If
  /// [`ApiMediaStreamSettings`] are configured for some [`Room`], then this
  /// [`Room`] can only send media tracks that correspond to these settings.
  /// [`ApiMediaStreamSettings`] update will change media tracks in all
  /// sending peers, so that might cause a new [getUserMedia()][1] request to
  /// happen.
  ///
  /// Media obtaining/injection errors are additionally fired to a
  /// [`on_failed_local_media`] callback.
  ///
  /// If the `stop_first` argument is [`true`], then affected
  /// [`LocalMediaTrack`]s will be dropped before new
  /// [`ApiMediaStreamSettings`] are applied. This is usually required when
  /// changing video source device due to hardware limitations, e.g. having an
  /// active track sourced from device `A` may hinder [getUserMedia()][1]
  /// requests to device `B`.
  ///
  /// The `rollback_on_fail` argument configures [`ApiMediaStreamSettings`]
  /// update request to automatically roll back to previous settings if new
  /// settings cannot be applied.
  ///
  /// If recovering from fail state isn't possible then affected media types
  /// will be disabled.
  ///
  /// [`on_failed_local_media`]: RoomHandle::on_failed_local_media
  /// [`PeerConnection`]: crate::peer::PeerConnection
  /// [1]: https://tinyurl.com/w3-streams#dom-mediadevices-getusermedia
  Object setLocalMediaSettings({
    required ApiMediaStreamSettings settings,
    required bool stopFirst,
    required bool rollbackOnFail,
  }) => RustLib.instance.api.crateApiDartApiRoomRoomHandleSetLocalMediaSettings(
    that: this,
    settings: settings,
    stopFirst: stopFirst,
    rollbackOnFail: rollbackOnFail,
  );

  /// Unmutes outbound audio in the provided [`Room`].
  Object unmuteAudio() =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleUnmuteAudio(that: this);

  /// Unmutes outbound video in the provided [`Room`].
  ///
  /// Affects only video with the provided [`MediaSourceKind`], if any.
  ///
  /// # Errors
  ///
  /// If the provided `source_kind` is not a [`MediaSourceKind`] index.
  Object unmuteVideo({MediaSourceKind? sourceKind}) =>
      RustLib.instance.api.crateApiDartApiRoomRoomHandleUnmuteVideo(
        that: this,
        sourceKind: sourceKind,
      );
}
