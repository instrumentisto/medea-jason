// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'api/dart/api.dart';
import 'frb_generated.dart';
import 'media.dart';
import 'media/constraints.dart';
import 'media/track.dart';
import 'media/track/remote.dart';
import 'room.dart';

import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => -1606587944;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'medea_jason',
    ioDirectory: '../target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Object crateApiDartApiConnectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection});

  Object crateApiDartApiConnectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, MediaSourceKind? sourceKind});

  Object crateApiDartApiConnectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection});

  Object crateApiDartApiConnectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, MediaSourceKind? sourceKind});

  ConnectionHandle crateApiDartApiConnectionHandleFromPtr(
      {required BigInt ptr});

  String crateApiDartApiConnectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection});

  void crateApiDartApiConnectionHandleOnClose(
      {required ConnectionHandle connection, required Object f});

  void crateApiDartApiConnectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f});

  void crateApiDartApiConnectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f});

  bool crateApiDartApiIsOnAudioLevelAvailable({required LocalMediaTrack track});

  void crateApiDartApiJasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete});

  void crateApiDartApiJasonDispose({required Jason jason});

  RoomHandle crateApiDartApiJasonInitRoom({required Jason jason});

  MediaManagerHandle crateApiDartApiJasonMediaManager({required Jason jason});

  Jason crateApiDartApiJasonNew();

  Object crateApiDartApiLocalMediaTrackFree({required LocalMediaTrack track});

  LocalMediaTrack crateApiDartApiLocalMediaTrackFromPtr({required BigInt ptr});

  Object crateApiDartApiLocalMediaTrackGetTrack(
      {required LocalMediaTrack track});

  MediaKind crateApiDartApiLocalMediaTrackKind(
      {required LocalMediaTrack track});

  MediaSourceKind crateApiDartApiLocalMediaTrackMediaSourceKind(
      {required LocalMediaTrack track});

  void crateApiDartApiLocalMediaTrackOnEnded(
      {required LocalMediaTrack track, required Object f});

  Object crateApiDartApiLocalMediaTrackState({required LocalMediaTrack track});

  void crateApiDartApiLogDartException(
      {required String message, required String stackTrace});

  Object crateApiDartApiMediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager});

  Object crateApiDartApiMediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager});

  Object crateApiDartApiMediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required ApiMediaStreamSettings caps});

  Object crateApiDartApiMediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager});

  Object crateApiDartApiMediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager});

  void crateApiDartApiMediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb});

  Object crateApiDartApiMediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required PlatformInt64 level});

  Object crateApiDartApiMediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager, required String deviceId});

  void crateApiDartApiOnAudioLevelChanged(
      {required LocalMediaTrack track, required Object f});

  void crateApiDartApiOnPanic({required Object cb});

  ReconnectHandle crateApiDartApiReconnectHandleFromPtr({required BigInt ptr});

  Object crateApiDartApiReconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs});

  Object crateApiDartApiReconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle, required int delayMs});

  RemoteMediaTrack crateApiDartApiRemoteMediaTrackFromPtr(
      {required BigInt ptr});

  Object crateApiDartApiRemoteMediaTrackGetTrack(
      {required RemoteMediaTrack track});

  MediaKind crateApiDartApiRemoteMediaTrackKind(
      {required RemoteMediaTrack track});

  MediaDirection crateApiDartApiRemoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track});

  MediaSourceKind crateApiDartApiRemoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track});

  bool crateApiDartApiRemoteMediaTrackMuted({required RemoteMediaTrack track});

  void crateApiDartApiRemoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f});

  void crateApiDartApiRemoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f});

  void crateApiDartApiRemoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f});

  void crateApiDartApiRemoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f});

  RoomCloseReason crateApiDartApiRoomCloseReasonFromPtr({required BigInt ptr});

  Object crateApiDartApiRoomHandleDisableAudio(
      {required RoomHandle roomHandle});

  Object crateApiDartApiRoomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle});

  Object crateApiDartApiRoomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind});

  Object crateApiDartApiRoomHandleDisableVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind});

  Object crateApiDartApiRoomHandleEnableAudio({required RoomHandle roomHandle});

  Object crateApiDartApiRoomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle});

  Object crateApiDartApiRoomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind});

  Object crateApiDartApiRoomHandleEnableVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind});

  Object crateApiDartApiRoomHandleJoin(
      {required RoomHandle roomHandle, required String token});

  Object crateApiDartApiRoomHandleMuteAudio({required RoomHandle roomHandle});

  Object crateApiDartApiRoomHandleMuteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind});

  void crateApiDartApiRoomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb});

  void crateApiDartApiRoomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb});

  void crateApiDartApiRoomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb});

  void crateApiDartApiRoomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb});

  void crateApiDartApiRoomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb});

  Object crateApiDartApiRoomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required ApiMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail});

  Object crateApiDartApiRoomHandleUnmuteAudio({required RoomHandle roomHandle});

  Object crateApiDartApiRoomHandleUnmuteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind});

  List<LocalMediaTrack> crateApiDartApiVecLocalTracksFromPtr(
      {required BigInt ptr});

  List<ApiMediaDeviceDetails> crateApiDartApiVecMediaDeviceDetailsFromPtr(
      {required BigInt ptr});

  List<ApiMediaDisplayDetails> crateApiDartApiVecMediaDisplayDetailsFromPtr(
      {required BigInt ptr});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConnectionHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConnectionHandle;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConnectionHandlePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Jason;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Jason;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JasonPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LocalMediaTrack;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LocalMediaTrack;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LocalMediaTrackPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MediaManagerHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MediaManagerHandle;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MediaManagerHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReconnectHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReconnectHandle;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ReconnectHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RemoteMediaTrack;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RemoteMediaTrack;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RemoteMediaTrackPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoomHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoomHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RoomHandlePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Object crateApiDartApiConnectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiConnectionHandleDisableRemoteAudioConstMeta,
      argValues: [connection],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleDisableRemoteAudioConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_disable_remote_audio",
            argNames: ["connection"],
          );

  @override
  Object crateApiDartApiConnectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiConnectionHandleDisableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleDisableRemoteVideoConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_disable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  @override
  Object crateApiDartApiConnectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiConnectionHandleEnableRemoteAudioConstMeta,
      argValues: [connection],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleEnableRemoteAudioConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_enable_remote_audio",
            argNames: ["connection"],
          );

  @override
  Object crateApiDartApiConnectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiConnectionHandleEnableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleEnableRemoteVideoConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_enable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  @override
  ConnectionHandle crateApiDartApiConnectionHandleFromPtr(
      {required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_ConnectionHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiConnectionHandleFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiConnectionHandleFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "connection_handle_from_ptr",
        argNames: ["ptr"],
      );

  @override
  String crateApiDartApiConnectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiConnectionHandleGetRemoteMemberIdConstMeta,
      argValues: [connection],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleGetRemoteMemberIdConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_get_remote_member_id",
            argNames: ["connection"],
          );

  @override
  void crateApiDartApiConnectionHandleOnClose(
      {required ConnectionHandle connection, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiConnectionHandleOnCloseConstMeta,
      argValues: [connection, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiConnectionHandleOnCloseConstMeta =>
      const TaskConstMeta(
        debugName: "connection_handle_on_close",
        argNames: ["connection", "f"],
      );

  @override
  void crateApiDartApiConnectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiConnectionHandleOnQualityScoreUpdateConstMeta,
      argValues: [connection, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleOnQualityScoreUpdateConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_on_quality_score_update",
            argNames: ["connection", "f"],
          );

  @override
  void crateApiDartApiConnectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ConnectionHandle(connection, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiConnectionHandleOnRemoteTrackAddedConstMeta,
      argValues: [connection, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiConnectionHandleOnRemoteTrackAddedConstMeta =>
          const TaskConstMeta(
            debugName: "connection_handle_on_remote_track_added",
            argNames: ["connection", "f"],
          );

  @override
  bool crateApiDartApiIsOnAudioLevelAvailable(
      {required LocalMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiIsOnAudioLevelAvailableConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiIsOnAudioLevelAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "is_on_audio_level_available",
        argNames: ["track"],
      );

  @override
  void crateApiDartApiJasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_Jason(jason, serializer);
        sse_encode_RustOpaque_RoomHandle(roomToDelete, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiJasonCloseRoomConstMeta,
      argValues: [jason, roomToDelete],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiJasonCloseRoomConstMeta =>
      const TaskConstMeta(
        debugName: "jason_close_room",
        argNames: ["jason", "roomToDelete"],
      );

  @override
  void crateApiDartApiJasonDispose({required Jason jason}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_Jason(jason, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiJasonDisposeConstMeta,
      argValues: [jason],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiJasonDisposeConstMeta =>
      const TaskConstMeta(
        debugName: "jason_dispose",
        argNames: ["jason"],
      );

  @override
  RoomHandle crateApiDartApiJasonInitRoom({required Jason jason}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_Jason(jason, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_RoomHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiJasonInitRoomConstMeta,
      argValues: [jason],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiJasonInitRoomConstMeta =>
      const TaskConstMeta(
        debugName: "jason_init_room",
        argNames: ["jason"],
      );

  @override
  MediaManagerHandle crateApiDartApiJasonMediaManager({required Jason jason}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_Jason(jason, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_MediaManagerHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiJasonMediaManagerConstMeta,
      argValues: [jason],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiJasonMediaManagerConstMeta =>
      const TaskConstMeta(
        debugName: "jason_media_manager",
        argNames: ["jason"],
      );

  @override
  Jason crateApiDartApiJasonNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_Jason,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiJasonNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiJasonNewConstMeta => const TaskConstMeta(
        debugName: "jason_new",
        argNames: [],
      );

  @override
  Object crateApiDartApiLocalMediaTrackFree({required LocalMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackFreeConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackFreeConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_free",
        argNames: ["track"],
      );

  @override
  LocalMediaTrack crateApiDartApiLocalMediaTrackFromPtr({required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_LocalMediaTrack,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackGetTrack(
      {required LocalMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackGetTrackConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackGetTrackConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_get_track",
        argNames: ["track"],
      );

  @override
  MediaKind crateApiDartApiLocalMediaTrackKind(
      {required LocalMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_media_kind,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackKindConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackKindConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_kind",
        argNames: ["track"],
      );

  @override
  MediaSourceKind crateApiDartApiLocalMediaTrackMediaSourceKind(
      {required LocalMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_media_source_kind,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackMediaSourceKindConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_media_source_kind",
        argNames: ["track"],
      );

  @override
  void crateApiDartApiLocalMediaTrackOnEnded(
      {required LocalMediaTrack track, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackOnEndedConstMeta,
      argValues: [track, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackOnEndedConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_on_ended",
        argNames: ["track", "f"],
      );

  @override
  Object crateApiDartApiLocalMediaTrackState({required LocalMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLocalMediaTrackStateConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLocalMediaTrackStateConstMeta =>
      const TaskConstMeta(
        debugName: "local_media_track_state",
        argNames: ["track"],
      );

  @override
  void crateApiDartApiLogDartException(
      {required String message, required String stackTrace}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        sse_encode_String(stackTrace, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiLogDartExceptionConstMeta,
      argValues: [message, stackTrace],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiLogDartExceptionConstMeta =>
      const TaskConstMeta(
        debugName: "log_dart_exception",
        argNames: ["message", "stackTrace"],
      );

  @override
  Object crateApiDartApiMediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleEnumerateDevicesConstMeta,
      argValues: [manager],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleEnumerateDevicesConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_enumerate_devices",
            argNames: ["manager"],
          );

  @override
  Object crateApiDartApiMediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleEnumerateDisplaysConstMeta,
      argValues: [manager],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleEnumerateDisplaysConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_enumerate_displays",
            argNames: ["manager"],
          );

  @override
  Object crateApiDartApiMediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required ApiMediaStreamSettings caps}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        sse_encode_box_autoadd_api_media_stream_settings(caps, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleInitLocalTracksConstMeta,
      argValues: [manager, caps],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleInitLocalTracksConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_init_local_tracks",
            argNames: ["manager", "caps"],
          );

  @override
  Object crateApiDartApiMediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleMicrophoneVolumeConstMeta,
      argValues: [manager],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleMicrophoneVolumeConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_microphone_volume",
            argNames: ["manager"],
          );

  @override
  Object crateApiDartApiMediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartApiMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
      argValues: [manager],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_microphone_volume_is_available",
            argNames: ["manager"],
          );

  @override
  void crateApiDartApiMediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleOnDeviceChangeConstMeta,
      argValues: [manager, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiMediaManagerHandleOnDeviceChangeConstMeta =>
      const TaskConstMeta(
        debugName: "media_manager_handle_on_device_change",
        argNames: ["manager", "cb"],
      );

  @override
  Object crateApiDartApiMediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required PlatformInt64 level}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        sse_encode_i_64(level, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleSetMicrophoneVolumeConstMeta,
      argValues: [manager, level],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleSetMicrophoneVolumeConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_set_microphone_volume",
            argNames: ["manager", "level"],
          );

  @override
  Object crateApiDartApiMediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager, required String deviceId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_MediaManagerHandle(manager, serializer);
        sse_encode_String(deviceId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiMediaManagerHandleSetOutputAudioIdConstMeta,
      argValues: [manager, deviceId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiMediaManagerHandleSetOutputAudioIdConstMeta =>
          const TaskConstMeta(
            debugName: "media_manager_handle_set_output_audio_id",
            argNames: ["manager", "deviceId"],
          );

  @override
  void crateApiDartApiOnAudioLevelChanged(
      {required LocalMediaTrack track, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_LocalMediaTrack(track, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiOnAudioLevelChangedConstMeta,
      argValues: [track, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiOnAudioLevelChangedConstMeta =>
      const TaskConstMeta(
        debugName: "on_audio_level_changed",
        argNames: ["track", "f"],
      );

  @override
  void crateApiDartApiOnPanic({required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiOnPanicConstMeta,
      argValues: [cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiOnPanicConstMeta => const TaskConstMeta(
        debugName: "on_panic",
        argNames: ["cb"],
      );

  @override
  ReconnectHandle crateApiDartApiReconnectHandleFromPtr({required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_ReconnectHandle,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiReconnectHandleFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiReconnectHandleFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "reconnect_handle_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiReconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ReconnectHandle(reconnectHandle, serializer);
        sse_encode_u_32(startingDelay, serializer);
        sse_encode_f_64(multiplier, serializer);
        sse_encode_u_32(maxDelay, serializer);
        sse_encode_opt_box_autoadd_u_32(maxElapsedTimeMs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiReconnectHandleReconnectWithBackoffConstMeta,
      argValues: [
        reconnectHandle,
        startingDelay,
        multiplier,
        maxDelay,
        maxElapsedTimeMs
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiReconnectHandleReconnectWithBackoffConstMeta =>
          const TaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_backoff",
            argNames: [
              "reconnectHandle",
              "startingDelay",
              "multiplier",
              "maxDelay",
              "maxElapsedTimeMs"
            ],
          );

  @override
  Object crateApiDartApiReconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle, required int delayMs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_ReconnectHandle(reconnectHandle, serializer);
        sse_encode_u_32(delayMs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiReconnectHandleReconnectWithDelayConstMeta,
      argValues: [reconnectHandle, delayMs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiReconnectHandleReconnectWithDelayConstMeta =>
          const TaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_delay",
            argNames: ["reconnectHandle", "delayMs"],
          );

  @override
  RemoteMediaTrack crateApiDartApiRemoteMediaTrackFromPtr(
      {required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_RemoteMediaTrack,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiRemoteMediaTrackGetTrack(
      {required RemoteMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackGetTrackConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackGetTrackConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_get_track",
        argNames: ["track"],
      );

  @override
  MediaKind crateApiDartApiRemoteMediaTrackKind(
      {required RemoteMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_media_kind,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackKindConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackKindConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_kind",
        argNames: ["track"],
      );

  @override
  MediaDirection crateApiDartApiRemoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_media_direction,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackMediaDirectionConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackMediaDirectionConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_media_direction",
        argNames: ["track"],
      );

  @override
  MediaSourceKind crateApiDartApiRemoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_media_source_kind,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackMediaSourceKindConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_media_source_kind",
        argNames: ["track"],
      );

  @override
  bool crateApiDartApiRemoteMediaTrackMuted({required RemoteMediaTrack track}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackMutedConstMeta,
      argValues: [track],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackMutedConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_muted",
        argNames: ["track"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartApiRemoteMediaTrackOnMediaDirectionChangedConstMeta,
      argValues: [track, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartApiRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
          const TaskConstMeta(
            debugName: "remote_media_track_on_media_direction_changed",
            argNames: ["track", "f"],
          );

  @override
  void crateApiDartApiRemoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackOnMutedConstMeta,
      argValues: [track, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackOnMutedConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_on_muted",
        argNames: ["track", "f"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackOnStoppedConstMeta,
      argValues: [track, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackOnStoppedConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_on_stopped",
        argNames: ["track", "f"],
      );

  @override
  void crateApiDartApiRemoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RemoteMediaTrack(track, serializer);
        sse_encode_DartOpaque(f, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRemoteMediaTrackOnUnmutedConstMeta,
      argValues: [track, f],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRemoteMediaTrackOnUnmutedConstMeta =>
      const TaskConstMeta(
        debugName: "remote_media_track_on_unmuted",
        argNames: ["track", "f"],
      );

  @override
  RoomCloseReason crateApiDartApiRoomCloseReasonFromPtr({required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_room_close_reason,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomCloseReasonFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomCloseReasonFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "room_close_reason_from_ptr",
        argNames: ["ptr"],
      );

  @override
  Object crateApiDartApiRoomHandleDisableAudio(
      {required RoomHandle roomHandle}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleDisableAudioConstMeta,
      argValues: [roomHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleDisableAudioConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_disable_audio",
        argNames: ["roomHandle"],
      );

  @override
  Object crateApiDartApiRoomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleDisableRemoteAudioConstMeta,
      argValues: [roomHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleDisableRemoteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_disable_remote_audio",
        argNames: ["roomHandle"],
      );

  @override
  Object crateApiDartApiRoomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleDisableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleDisableRemoteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_disable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomHandleDisableVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleDisableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleDisableVideoConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_disable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomHandleEnableAudio(
      {required RoomHandle roomHandle}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleEnableAudioConstMeta,
      argValues: [roomHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleEnableAudioConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_enable_audio",
        argNames: ["roomHandle"],
      );

  @override
  Object crateApiDartApiRoomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleEnableRemoteAudioConstMeta,
      argValues: [roomHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleEnableRemoteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_enable_remote_audio",
        argNames: ["roomHandle"],
      );

  @override
  Object crateApiDartApiRoomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleEnableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleEnableRemoteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_enable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomHandleEnableVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleEnableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleEnableVideoConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_enable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  @override
  Object crateApiDartApiRoomHandleJoin(
      {required RoomHandle roomHandle, required String token}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_String(token, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleJoinConstMeta,
      argValues: [roomHandle, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleJoinConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_join",
        argNames: ["roomHandle", "token"],
      );

  @override
  Object crateApiDartApiRoomHandleMuteAudio({required RoomHandle roomHandle}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleMuteAudioConstMeta,
      argValues: [roomHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleMuteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_mute_audio",
        argNames: ["roomHandle"],
      );

  @override
  Object crateApiDartApiRoomHandleMuteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleMuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleMuteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_mute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  @override
  void crateApiDartApiRoomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiRoomHandleOnCloseConstMeta,
      argValues: [roomHandle, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleOnCloseConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_on_close",
        argNames: ["roomHandle", "cb"],
      );

  @override
  void crateApiDartApiRoomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiRoomHandleOnConnectionLossConstMeta,
      argValues: [roomHandle, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleOnConnectionLossConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_on_connection_loss",
        argNames: ["roomHandle", "cb"],
      );

  @override
  void crateApiDartApiRoomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiRoomHandleOnFailedLocalMediaConstMeta,
      argValues: [roomHandle, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleOnFailedLocalMediaConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_on_failed_local_media",
        argNames: ["roomHandle", "cb"],
      );

  @override
  void crateApiDartApiRoomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiRoomHandleOnLocalTrackConstMeta,
      argValues: [roomHandle, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleOnLocalTrackConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_on_local_track",
        argNames: ["roomHandle", "cb"],
      );

  @override
  void crateApiDartApiRoomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_DartOpaque(cb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_DartOpaque,
      ),
      constMeta: kCrateApiDartApiRoomHandleOnNewConnectionConstMeta,
      argValues: [roomHandle, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleOnNewConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_on_new_connection",
        argNames: ["roomHandle", "cb"],
      );

  @override
  Object crateApiDartApiRoomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required ApiMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_box_autoadd_api_media_stream_settings(settings, serializer);
        sse_encode_bool(stopFirst, serializer);
        sse_encode_bool(rollbackOnFail, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleSetLocalMediaSettingsConstMeta,
      argValues: [roomHandle, settings, stopFirst, rollbackOnFail],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleSetLocalMediaSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_set_local_media_settings",
        argNames: ["roomHandle", "settings", "stopFirst", "rollbackOnFail"],
      );

  @override
  Object crateApiDartApiRoomHandleUnmuteAudio(
      {required RoomHandle roomHandle}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleUnmuteAudioConstMeta,
      argValues: [roomHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleUnmuteAudioConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_unmute_audio",
        argNames: ["roomHandle"],
      );

  @override
  Object crateApiDartApiRoomHandleUnmuteVideo(
      {required RoomHandle roomHandle, MediaSourceKind? sourceKind}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_RoomHandle(roomHandle, serializer);
        sse_encode_opt_box_autoadd_media_source_kind(sourceKind, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiRoomHandleUnmuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiRoomHandleUnmuteVideoConstMeta =>
      const TaskConstMeta(
        debugName: "room_handle_unmute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  @override
  List<LocalMediaTrack> crateApiDartApiVecLocalTracksFromPtr(
      {required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_LocalMediaTrack,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiVecLocalTracksFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiVecLocalTracksFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "vec_local_tracks_from_ptr",
        argNames: ["ptr"],
      );

  @override
  List<ApiMediaDeviceDetails> crateApiDartApiVecMediaDeviceDetailsFromPtr(
      {required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_media_device_details,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiVecMediaDeviceDetailsFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiVecMediaDeviceDetailsFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "vec_media_device_details_from_ptr",
        argNames: ["ptr"],
      );

  @override
  List<ApiMediaDisplayDetails> crateApiDartApiVecMediaDisplayDetailsFromPtr(
      {required BigInt ptr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(ptr, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_media_display_details,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartApiVecMediaDisplayDetailsFromPtrConstMeta,
      argValues: [ptr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartApiVecMediaDisplayDetailsFromPtrConstMeta =>
      const TaskConstMeta(
        debugName: "vec_media_display_details_from_ptr",
        argNames: ["ptr"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConnectionHandle =>
          wire.rust_arc_increment_strong_count_RustOpaque_ConnectionHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConnectionHandle =>
          wire.rust_arc_decrement_strong_count_RustOpaque_ConnectionHandle;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Jason =>
      wire.rust_arc_increment_strong_count_RustOpaque_Jason;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Jason =>
      wire.rust_arc_decrement_strong_count_RustOpaque_Jason;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LocalMediaTrack =>
          wire.rust_arc_increment_strong_count_RustOpaque_LocalMediaTrack;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LocalMediaTrack =>
          wire.rust_arc_decrement_strong_count_RustOpaque_LocalMediaTrack;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MediaManagerHandle =>
          wire.rust_arc_increment_strong_count_RustOpaque_MediaManagerHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MediaManagerHandle =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MediaManagerHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReconnectHandle =>
          wire.rust_arc_increment_strong_count_RustOpaque_ReconnectHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReconnectHandle =>
          wire.rust_arc_decrement_strong_count_RustOpaque_ReconnectHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RemoteMediaTrack =>
          wire.rust_arc_increment_strong_count_RustOpaque_RemoteMediaTrack;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RemoteMediaTrack =>
          wire.rust_arc_decrement_strong_count_RustOpaque_RemoteMediaTrack;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoomHandle =>
          wire.rust_arc_increment_strong_count_RustOpaque_RoomHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoomHandle =>
          wire.rust_arc_decrement_strong_count_RustOpaque_RoomHandle;

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ConnectionHandle dco_decode_RustOpaque_ConnectionHandle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Jason dco_decode_RustOpaque_Jason(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JasonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LocalMediaTrack dco_decode_RustOpaque_LocalMediaTrack(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MediaManagerHandle dco_decode_RustOpaque_MediaManagerHandle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReconnectHandle dco_decode_RustOpaque_ReconnectHandle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RemoteMediaTrack dco_decode_RustOpaque_RemoteMediaTrack(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RoomHandle dco_decode_RustOpaque_RoomHandle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoomHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ApiAudioConstraints dco_decode_api_audio_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiAudioConstraints(
      deviceId: dco_decode_opt_String(arr[0]),
      autoGainControl: dco_decode_opt_box_autoadd_constrain_boolean(arr[1]),
    );
  }

  @protected
  ApiConstrainFacingMode dco_decode_api_constrain_facing_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApiConstrainFacingMode_Exact(
          dco_decode_facing_mode(raw[1]),
        );
      case 1:
        return ApiConstrainFacingMode_Ideal(
          dco_decode_facing_mode(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApiDeviceVideoTrackConstraints dco_decode_api_device_video_track_constraints(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiDeviceVideoTrackConstraints(
      deviceId: dco_decode_opt_String(arr[0]),
      facingMode: dco_decode_opt_box_autoadd_api_constrain_facing_mode(arr[1]),
      height: dco_decode_opt_box_autoadd_constrain_u_32(arr[2]),
      width: dco_decode_opt_box_autoadd_constrain_u_32(arr[3]),
    );
  }

  @protected
  ApiDisplayVideoTrackConstraints
      dco_decode_api_display_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiDisplayVideoTrackConstraints(
      deviceId: dco_decode_opt_String(arr[0]),
      height: dco_decode_opt_box_autoadd_constrain_u_32(arr[1]),
      width: dco_decode_opt_box_autoadd_constrain_u_32(arr[2]),
      frameRate: dco_decode_opt_box_autoadd_constrain_u_32(arr[3]),
    );
  }

  @protected
  ApiMediaDeviceDetails dco_decode_api_media_device_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiMediaDeviceDetails(
      kind: dco_decode_media_device_kind(arr[0]),
      deviceId: dco_decode_String(arr[1]),
      label: dco_decode_String(arr[2]),
      groupId: dco_decode_opt_String(arr[3]),
      isFailed: dco_decode_bool(arr[4]),
    );
  }

  @protected
  ApiMediaDisplayDetails dco_decode_api_media_display_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiMediaDisplayDetails(
      deviceId: dco_decode_String(arr[0]),
      title: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  ApiMediaStreamSettings dco_decode_api_media_stream_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiMediaStreamSettings(
      audio: dco_decode_opt_box_autoadd_api_audio_constraints(arr[0]),
      deviceVideo:
          dco_decode_opt_box_autoadd_api_device_video_track_constraints(arr[1]),
      displayVideo:
          dco_decode_opt_box_autoadd_api_display_video_track_constraints(
              arr[2]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ApiAudioConstraints dco_decode_box_autoadd_api_audio_constraints(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_audio_constraints(raw);
  }

  @protected
  ApiConstrainFacingMode dco_decode_box_autoadd_api_constrain_facing_mode(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_constrain_facing_mode(raw);
  }

  @protected
  ApiDeviceVideoTrackConstraints
      dco_decode_box_autoadd_api_device_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_device_video_track_constraints(raw);
  }

  @protected
  ApiDisplayVideoTrackConstraints
      dco_decode_box_autoadd_api_display_video_track_constraints(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_display_video_track_constraints(raw);
  }

  @protected
  ApiMediaStreamSettings dco_decode_box_autoadd_api_media_stream_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_media_stream_settings(raw);
  }

  @protected
  ConstrainBoolean dco_decode_box_autoadd_constrain_boolean(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_constrain_boolean(raw);
  }

  @protected
  ConstrainU32 dco_decode_box_autoadd_constrain_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_constrain_u_32(raw);
  }

  @protected
  MediaSourceKind dco_decode_box_autoadd_media_source_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_media_source_kind(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  ConstrainBoolean dco_decode_constrain_boolean(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConstrainBoolean_Exact(
          dco_decode_bool(raw[1]),
        );
      case 1:
        return ConstrainBoolean_Ideal(
          dco_decode_bool(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ConstrainU32 dco_decode_constrain_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConstrainU32_Exact(
          dco_decode_u_32(raw[1]),
        );
      case 1:
        return ConstrainU32_Ideal(
          dco_decode_u_32(raw[1]),
        );
      case 2:
        return ConstrainU32_Range(
          dco_decode_u_32(raw[1]),
          dco_decode_u_32(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FacingMode dco_decode_facing_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FacingMode.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<LocalMediaTrack> dco_decode_list_RustOpaque_LocalMediaTrack(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_LocalMediaTrack)
        .toList();
  }

  @protected
  List<ApiMediaDeviceDetails> dco_decode_list_api_media_device_details(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_media_device_details)
        .toList();
  }

  @protected
  List<ApiMediaDisplayDetails> dco_decode_list_api_media_display_details(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_media_display_details)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MediaDeviceKind dco_decode_media_device_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaDeviceKind.values[raw as int];
  }

  @protected
  MediaDirection dco_decode_media_direction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaDirection.values[raw as int];
  }

  @protected
  MediaKind dco_decode_media_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaKind.values[raw as int];
  }

  @protected
  MediaSourceKind dco_decode_media_source_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MediaSourceKind.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ApiAudioConstraints? dco_decode_opt_box_autoadd_api_audio_constraints(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_audio_constraints(raw);
  }

  @protected
  ApiConstrainFacingMode? dco_decode_opt_box_autoadd_api_constrain_facing_mode(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_constrain_facing_mode(raw);
  }

  @protected
  ApiDeviceVideoTrackConstraints?
      dco_decode_opt_box_autoadd_api_device_video_track_constraints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_device_video_track_constraints(raw);
  }

  @protected
  ApiDisplayVideoTrackConstraints?
      dco_decode_opt_box_autoadd_api_display_video_track_constraints(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_display_video_track_constraints(raw);
  }

  @protected
  ConstrainBoolean? dco_decode_opt_box_autoadd_constrain_boolean(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_constrain_boolean(raw);
  }

  @protected
  ConstrainU32? dco_decode_opt_box_autoadd_constrain_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_constrain_u_32(raw);
  }

  @protected
  MediaSourceKind? dco_decode_opt_box_autoadd_media_source_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_media_source_kind(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  RoomCloseReason dco_decode_room_close_reason(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RoomCloseReason(
      isClosedByServer: dco_decode_bool(arr[0]),
      reason: dco_decode_String(arr[1]),
      isErr: dco_decode_bool(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ConnectionHandle sse_decode_RustOpaque_ConnectionHandle(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectionHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Jason sse_decode_RustOpaque_Jason(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JasonImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LocalMediaTrack sse_decode_RustOpaque_LocalMediaTrack(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LocalMediaTrackImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MediaManagerHandle sse_decode_RustOpaque_MediaManagerHandle(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MediaManagerHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReconnectHandle sse_decode_RustOpaque_ReconnectHandle(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReconnectHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RemoteMediaTrack sse_decode_RustOpaque_RemoteMediaTrack(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RemoteMediaTrackImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoomHandle sse_decode_RustOpaque_RoomHandle(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoomHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  ApiAudioConstraints sse_decode_api_audio_constraints(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_opt_String(deserializer);
    var var_autoGainControl =
        sse_decode_opt_box_autoadd_constrain_boolean(deserializer);
    return ApiAudioConstraints(
        deviceId: var_deviceId, autoGainControl: var_autoGainControl);
  }

  @protected
  ApiConstrainFacingMode sse_decode_api_constrain_facing_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_facing_mode(deserializer);
        return ApiConstrainFacingMode_Exact(var_field0);
      case 1:
        var var_field0 = sse_decode_facing_mode(deserializer);
        return ApiConstrainFacingMode_Ideal(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApiDeviceVideoTrackConstraints sse_decode_api_device_video_track_constraints(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_opt_String(deserializer);
    var var_facingMode =
        sse_decode_opt_box_autoadd_api_constrain_facing_mode(deserializer);
    var var_height = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    var var_width = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    return ApiDeviceVideoTrackConstraints(
        deviceId: var_deviceId,
        facingMode: var_facingMode,
        height: var_height,
        width: var_width);
  }

  @protected
  ApiDisplayVideoTrackConstraints
      sse_decode_api_display_video_track_constraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_opt_String(deserializer);
    var var_height = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    var var_width = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    var var_frameRate = sse_decode_opt_box_autoadd_constrain_u_32(deserializer);
    return ApiDisplayVideoTrackConstraints(
        deviceId: var_deviceId,
        height: var_height,
        width: var_width,
        frameRate: var_frameRate);
  }

  @protected
  ApiMediaDeviceDetails sse_decode_api_media_device_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_kind = sse_decode_media_device_kind(deserializer);
    var var_deviceId = sse_decode_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_groupId = sse_decode_opt_String(deserializer);
    var var_isFailed = sse_decode_bool(deserializer);
    return ApiMediaDeviceDetails(
        kind: var_kind,
        deviceId: var_deviceId,
        label: var_label,
        groupId: var_groupId,
        isFailed: var_isFailed);
  }

  @protected
  ApiMediaDisplayDetails sse_decode_api_media_display_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deviceId = sse_decode_String(deserializer);
    var var_title = sse_decode_opt_String(deserializer);
    return ApiMediaDisplayDetails(deviceId: var_deviceId, title: var_title);
  }

  @protected
  ApiMediaStreamSettings sse_decode_api_media_stream_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_audio =
        sse_decode_opt_box_autoadd_api_audio_constraints(deserializer);
    var var_deviceVideo =
        sse_decode_opt_box_autoadd_api_device_video_track_constraints(
            deserializer);
    var var_displayVideo =
        sse_decode_opt_box_autoadd_api_display_video_track_constraints(
            deserializer);
    return ApiMediaStreamSettings(
        audio: var_audio,
        deviceVideo: var_deviceVideo,
        displayVideo: var_displayVideo);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ApiAudioConstraints sse_decode_box_autoadd_api_audio_constraints(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_audio_constraints(deserializer));
  }

  @protected
  ApiConstrainFacingMode sse_decode_box_autoadd_api_constrain_facing_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_constrain_facing_mode(deserializer));
  }

  @protected
  ApiDeviceVideoTrackConstraints
      sse_decode_box_autoadd_api_device_video_track_constraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_device_video_track_constraints(deserializer));
  }

  @protected
  ApiDisplayVideoTrackConstraints
      sse_decode_box_autoadd_api_display_video_track_constraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_display_video_track_constraints(deserializer));
  }

  @protected
  ApiMediaStreamSettings sse_decode_box_autoadd_api_media_stream_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_media_stream_settings(deserializer));
  }

  @protected
  ConstrainBoolean sse_decode_box_autoadd_constrain_boolean(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_constrain_boolean(deserializer));
  }

  @protected
  ConstrainU32 sse_decode_box_autoadd_constrain_u_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_constrain_u_32(deserializer));
  }

  @protected
  MediaSourceKind sse_decode_box_autoadd_media_source_kind(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_media_source_kind(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  ConstrainBoolean sse_decode_constrain_boolean(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return ConstrainBoolean_Exact(var_field0);
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return ConstrainBoolean_Ideal(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ConstrainU32 sse_decode_constrain_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_32(deserializer);
        return ConstrainU32_Exact(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return ConstrainU32_Ideal(var_field0);
      case 2:
        var var_field0 = sse_decode_u_32(deserializer);
        var var_field1 = sse_decode_u_32(deserializer);
        return ConstrainU32_Range(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FacingMode sse_decode_facing_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FacingMode.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<LocalMediaTrack> sse_decode_list_RustOpaque_LocalMediaTrack(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LocalMediaTrack>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_LocalMediaTrack(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiMediaDeviceDetails> sse_decode_list_api_media_device_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiMediaDeviceDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_media_device_details(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiMediaDisplayDetails> sse_decode_list_api_media_display_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiMediaDisplayDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_media_display_details(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MediaDeviceKind sse_decode_media_device_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaDeviceKind.values[inner];
  }

  @protected
  MediaDirection sse_decode_media_direction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaDirection.values[inner];
  }

  @protected
  MediaKind sse_decode_media_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaKind.values[inner];
  }

  @protected
  MediaSourceKind sse_decode_media_source_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MediaSourceKind.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiAudioConstraints? sse_decode_opt_box_autoadd_api_audio_constraints(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_audio_constraints(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiConstrainFacingMode? sse_decode_opt_box_autoadd_api_constrain_facing_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_constrain_facing_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiDeviceVideoTrackConstraints?
      sse_decode_opt_box_autoadd_api_device_video_track_constraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_device_video_track_constraints(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiDisplayVideoTrackConstraints?
      sse_decode_opt_box_autoadd_api_display_video_track_constraints(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_display_video_track_constraints(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ConstrainBoolean? sse_decode_opt_box_autoadd_constrain_boolean(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_constrain_boolean(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ConstrainU32? sse_decode_opt_box_autoadd_constrain_u_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_constrain_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MediaSourceKind? sse_decode_opt_box_autoadd_media_source_kind(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_media_source_kind(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RoomCloseReason sse_decode_room_close_reason(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isClosedByServer = sse_decode_bool(deserializer);
    var var_reason = sse_decode_String(deserializer);
    var var_isErr = sse_decode_bool(deserializer);
    return RoomCloseReason(
        isClosedByServer: var_isClosedByServer,
        reason: var_reason,
        isErr: var_isErr);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_ConnectionHandle(
      ConnectionHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConnectionHandleImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_Jason(Jason self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JasonImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_LocalMediaTrack(
      LocalMediaTrack self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LocalMediaTrackImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_MediaManagerHandle(
      MediaManagerHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MediaManagerHandleImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_ReconnectHandle(
      ReconnectHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReconnectHandleImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_RemoteMediaTrack(
      RemoteMediaTrack self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RemoteMediaTrackImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_RoomHandle(
      RoomHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RoomHandleImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_api_audio_constraints(
      ApiAudioConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceId, serializer);
    sse_encode_opt_box_autoadd_constrain_boolean(
        self.autoGainControl, serializer);
  }

  @protected
  void sse_encode_api_constrain_facing_mode(
      ApiConstrainFacingMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApiConstrainFacingMode_Exact(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_facing_mode(field0, serializer);
      case ApiConstrainFacingMode_Ideal(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_facing_mode(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_api_device_video_track_constraints(
      ApiDeviceVideoTrackConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceId, serializer);
    sse_encode_opt_box_autoadd_api_constrain_facing_mode(
        self.facingMode, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.height, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.width, serializer);
  }

  @protected
  void sse_encode_api_display_video_track_constraints(
      ApiDisplayVideoTrackConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.deviceId, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.height, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.width, serializer);
    sse_encode_opt_box_autoadd_constrain_u_32(self.frameRate, serializer);
  }

  @protected
  void sse_encode_api_media_device_details(
      ApiMediaDeviceDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_media_device_kind(self.kind, serializer);
    sse_encode_String(self.deviceId, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_opt_String(self.groupId, serializer);
    sse_encode_bool(self.isFailed, serializer);
  }

  @protected
  void sse_encode_api_media_display_details(
      ApiMediaDisplayDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.deviceId, serializer);
    sse_encode_opt_String(self.title, serializer);
  }

  @protected
  void sse_encode_api_media_stream_settings(
      ApiMediaStreamSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_api_audio_constraints(self.audio, serializer);
    sse_encode_opt_box_autoadd_api_device_video_track_constraints(
        self.deviceVideo, serializer);
    sse_encode_opt_box_autoadd_api_display_video_track_constraints(
        self.displayVideo, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_api_audio_constraints(
      ApiAudioConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_audio_constraints(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_constrain_facing_mode(
      ApiConstrainFacingMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_constrain_facing_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_device_video_track_constraints(
      ApiDeviceVideoTrackConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_device_video_track_constraints(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_display_video_track_constraints(
      ApiDisplayVideoTrackConstraints self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_display_video_track_constraints(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_media_stream_settings(
      ApiMediaStreamSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_media_stream_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_constrain_boolean(
      ConstrainBoolean self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_constrain_boolean(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_constrain_u_32(
      ConstrainU32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_constrain_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_media_source_kind(
      MediaSourceKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_media_source_kind(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_constrain_boolean(
      ConstrainBoolean self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConstrainBoolean_Exact(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case ConstrainBoolean_Ideal(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_constrain_u_32(ConstrainU32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConstrainU32_Exact(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(field0, serializer);
      case ConstrainU32_Ideal(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
      case ConstrainU32_Range(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_u_32(field0, serializer);
        sse_encode_u_32(field1, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_facing_mode(FacingMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_RustOpaque_LocalMediaTrack(
      List<LocalMediaTrack> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_LocalMediaTrack(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_media_device_details(
      List<ApiMediaDeviceDetails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_media_device_details(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_media_display_details(
      List<ApiMediaDisplayDetails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_media_display_details(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_media_device_kind(
      MediaDeviceKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_media_direction(
      MediaDirection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_media_kind(MediaKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_media_source_kind(
      MediaSourceKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_audio_constraints(
      ApiAudioConstraints? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_audio_constraints(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_constrain_facing_mode(
      ApiConstrainFacingMode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_constrain_facing_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_device_video_track_constraints(
      ApiDeviceVideoTrackConstraints? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_device_video_track_constraints(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_display_video_track_constraints(
      ApiDisplayVideoTrackConstraints? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_display_video_track_constraints(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_constrain_boolean(
      ConstrainBoolean? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_constrain_boolean(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_constrain_u_32(
      ConstrainU32? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_constrain_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_media_source_kind(
      MediaSourceKind? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_media_source_kind(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_room_close_reason(
      RoomCloseReason self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isClosedByServer, serializer);
    sse_encode_String(self.reason, serializer);
    sse_encode_bool(self.isErr, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ConnectionHandleImpl extends RustOpaque implements ConnectionHandle {
  // Not to be used by end users
  ConnectionHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectionHandleImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConnectionHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConnectionHandle,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConnectionHandlePtr,
  );
}

@sealed
class JasonImpl extends RustOpaque implements Jason {
  // Not to be used by end users
  JasonImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JasonImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Jason,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Jason,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_JasonPtr,
  );
}

@sealed
class LocalMediaTrackImpl extends RustOpaque implements LocalMediaTrack {
  // Not to be used by end users
  LocalMediaTrackImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LocalMediaTrackImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LocalMediaTrack,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LocalMediaTrack,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LocalMediaTrackPtr,
  );
}

@sealed
class MediaManagerHandleImpl extends RustOpaque implements MediaManagerHandle {
  // Not to be used by end users
  MediaManagerHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MediaManagerHandleImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MediaManagerHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MediaManagerHandle,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MediaManagerHandlePtr,
  );
}

@sealed
class ReconnectHandleImpl extends RustOpaque implements ReconnectHandle {
  // Not to be used by end users
  ReconnectHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReconnectHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ReconnectHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReconnectHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ReconnectHandlePtr,
  );
}

@sealed
class RemoteMediaTrackImpl extends RustOpaque implements RemoteMediaTrack {
  // Not to be used by end users
  RemoteMediaTrackImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RemoteMediaTrackImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RemoteMediaTrack,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RemoteMediaTrack,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_RemoteMediaTrackPtr,
  );
}

@sealed
class RoomHandleImpl extends RustOpaque implements RoomHandle {
  // Not to be used by end users
  RoomHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RoomHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RoomHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RoomHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RoomHandlePtr,
  );
}
