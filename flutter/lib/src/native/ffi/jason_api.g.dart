// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.58.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart';
import 'package:meta/meta.dart';

part 'jason_api.g.freezed.dart';

abstract class MedeaJason {
  /// Returns the [`ConnectionHandle`] from the address [`ForeignClass`].
  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta;

  /// Sets callback, invoked when this `Connection` will close.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_close`] returns error.
  void connectionHandleOnClose(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`remote::Track`] is added to this
  /// [`Connection`].
  ///
  /// [`remote::Track`]: crate::media::track::remote::Track
  /// [`Connection`]: crate::connection::Connection
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_remote_track_added`] returns error.
  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta;

  /// Sets callback, invoked when a connection quality score is updated by
  /// a server.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_quality_score_update`] returns error.
  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta;

  /// Returns remote `Member` ID.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::get_remote_member_id`] returns error.
  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta;

  /// Enables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in this [`ConnectionHandle`].
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in this [`ConnectionHandle`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in this [`ConnectionHandle`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`ConnectionHandle`]: crate::connection::ConnectionHandle
  Object connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta;

  /// Sets the provided [`Dart_Handle`] as a callback for the Rust panic hook.
  void onPanic({required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOnPanicConstMeta;

  /// Instantiates a new [`Jason`] interface to interact with this library.
  Jason jasonNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta;

  /// Creates a new [`Room`] and returns its [`RoomHandle`].
  ///
  /// [`Room`]: crate::room::Room
  RoomHandle jasonInitRoom({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta;

  /// Returns a [`MediaManagerHandle`].
  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonDispose({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta;

  /// Returns the [`LocalMediaTrack`] from the address [`ForeignClass`].
  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta;

  /// Returns the [`Vec<RustOpaque<LocalMediaTrack>>`] from the address
  /// [`ForeignClass`].
  List<LocalMediaTrack> vecLocalTracksFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  Object localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta;

  /// Returns a [`MediaKind::Audio`] if this [`LocalMediaTrack`] represents an
  /// audio track, or a [`MediaKind::Video`] if it represents a video track.
  ///
  /// [`MediaKind::Audio`]: crate::media::MediaKind::Audio
  /// [`MediaKind::Video`]: crate::media::MediaKind::Video
  MediaKind localMediaTrackKind({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta;

  /// Returns a [`MediaSourceKind::Device`] if this [`LocalMediaTrack`] is
  /// sourced from some device (webcam/microphone), or a
  /// [`MediaSourceKind::Display`] if it's captured via
  /// [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture/#dom-mediadevices-getdisplaymedia
  /// [`MediaSourceKind::Device`]: crate::media::MediaSourceKind::Device
  /// [`MediaSourceKind::Display`]: crate::media::MediaSourceKind::Display
  MediaSourceKind localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta;

  /// Returns the [`Vec<MediaDeviceInfo>`] from the address
  /// [`ForeignClass`].
  List<ApiMediaDeviceInfo> vecMediaDeviceInfoFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoFromPtrConstMeta;

  /// Returns the [`Vec<RustOpaque<MediaDisplayInfo>>`] from the address
  /// [`ForeignClass`].
  List<ApiMediaDisplayInfo> vecMediaDisplayInfoFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoFromPtrConstMeta;

  /// Returns [`LocalMediaTrack`]s objects, built from the provided
  /// [`MediaStreamSettings`].
  ///
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  Object mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required ApiMediaStreamSettings caps,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta;

  /// Returns a list of [`MediaDeviceInfo`] objects representing available media
  /// input and devices, such as microphones, cameras, and so forth.
  Object mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta;

  /// Returns a list of [`MediaDisplayInfo`] objects representing available
  /// sources that can be used for screen capturing.
  Object mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta;

  /// Switches the current output audio device to the device with the provided
  /// `device_id`.
  Object mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta;

  /// Sets the microphone volume level in percents.
  Object mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta;

  /// Indicates whether it's possible to access microphone volume settings.
  Object mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta;

  /// Returns the current microphone volume level in percents.
  Object mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta;

  /// Subscribes onto the [`MediaManagerHandle`]'s `devicechange` event.
  /// Sets an ideal [frameRate][1] constraint.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  ///
  /// # Errors
  ///
  /// If [`MediaManagerHandle::on_device_change`] returns error.
  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaManagerHandleOnDeviceChangeConstMeta;

  /// Returns the [`ReconnectHandle`] from the address
  /// [`ForeignClass`].
  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta;

  /// Tries to reconnect a [`Room`] after the provided delay in milliseconds.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here..
  ///
  /// [`Room`]: crate::room::Room
  Object reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta;

  /// Tries to reconnect a [`Room`] in a loop with a growing backoff delay.
  ///
  /// The first attempt will be performed immediately, and the second attempt will
  /// be performed after `starting_delay_ms`.
  ///
  /// Delay between reconnection attempts won't be greater than
  /// `max_delay_ms`.
  ///
  /// After each reconnection attempt, delay between reconnections will be
  /// multiplied by the given `multiplier` until it reaches `max_delay_ms`.
  ///
  /// If `multiplier` is a negative number then it will be considered as `0.0`.
  /// This might cause a busy loop, so it's not recommended.
  ///
  /// Max elapsed time can be limited with an optional `max_elapsed_time_ms`
  /// argument.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here.
  ///
  /// [`Room`]: crate::room::Room
  Object reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta;

  /// Returns the [`RemoteMediaTrack`] from the address
  /// [`ForeignClass`].
  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`RemoteMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta;

  /// Sets callback to invoke when this [`RemoteMediaTrack`] is muted.
  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta;

  /// Sets callback to invoke when this [`RemoteMediaTrack`] is unmuted.
  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta;

  /// Sets callback to invoke when this [`RemoteMediaTrack`] is stopped.
  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta;

  /// Sets callback to invoke whenever this [`RemoteMediaTrack`]'s general
  /// [`MediaDirection`] is changed.
  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta;

  /// Indicate whether this [`RemoteMediaTrack`] is muted.
  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta;

  /// Returns this [`RemoteMediaTrack`]'s kind (audio/video).
  MediaKind remoteMediaTrackKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta;

  /// Returns this [`RemoteMediaTrack`]'s media source kind.
  MediaSourceKind remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaSourceKindConstMeta;

  /// Returns the current general [`MediaDirection`] of this [`RemoteMediaTrack`].
  MediaDirection remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta;

  /// Returns the [`RoomCloseReason`] from the address
  /// [`ForeignClass`].
  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta;

  /// Connects to a media server and joins the [`Room`] with the provided
  /// authorization `token`.
  ///
  /// Authorization token has a fixed format:
  /// `{{ Host URL }}/{{ Room ID }}/{{ Member ID }}?token={{ Auth Token }}`
  /// (e.g. `wss://medea.com/MyConf1/Alice?token=777`).
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta;

  /// Updates this [`Room`]'s [`MediaStreamSettings`]. This affects all the
  /// [`PeerConnection`]s in this [`Room`]. If [`MediaStreamSettings`] are
  /// configured for some [`Room`], then this [`Room`] can only send media tracks
  /// that correspond to these settings. [`MediaStreamSettings`] update will
  /// change media tracks in all sending peers, so that might cause a new
  /// [getUserMedia()][1] request to happen.
  ///
  /// Media obtaining/injection errors are additionally fired to
  /// `on_failed_local_media` callback.
  ///
  /// If `stop_first` set to `true` then affected local `Tracks` will be
  /// dropped before new [`MediaStreamSettings`] are applied. This is usually
  /// required when changing video source device due to hardware limitations,
  /// e.g. having an active track sourced from device `A` may hinder
  /// [getUserMedia()][1] requests to device `B`.
  ///
  /// `rollback_on_fail` option configures [`MediaStreamSettings`] update request
  /// to automatically rollback to previous settings if new settings cannot be
  /// applied.
  ///
  /// If recovering from fail state isn't possible then affected media types will
  /// be disabled.
  ///
  /// [`Room`]: crate::room::Room
  /// [`PeerConnection`]: crate::peer::PeerConnection
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadevices-getusermedia
  Object roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required ApiMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleSetLocalMediaSettingsConstMeta;

  /// Mutes outbound audio in this [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleMuteAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta;

  /// Unmutes outbound audio in this [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleUnmuteAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta;

  /// Enables outbound audio in this [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleEnableAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta;

  /// Disables outbound audio in this [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleDisableAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta;

  /// Mutes outbound video in this [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  ///
  /// # Errors
  ///
  /// If `source_kind` is not a [`MediaSourceKind`] index.
  Object roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta;

  /// Unmutes outbound video in this [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  ///
  /// # Errors
  ///
  /// If `source_kind` is not a [`MediaSourceKind`] index.
  Object roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta;

  /// Enables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  Object roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta;

  /// Disables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  Object roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta;

  /// Enables inbound audio in this [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in this [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  Object roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in this [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  Object roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in this [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  Object roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta;

  /// Sets callback, invoked when a new [`Connection`] with some remote `Peer`
  /// is established.
  ///
  /// [`Connection`]: crate::connection::Connection
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_new_connection`] returns error.
  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta;

  /// Sets callback, invoked on this [`Room`] close, providing a
  /// [`RoomCloseReason`].
  ///
  /// [`Room`]: crate::room::Room
  /// [`RoomCloseReason`]: crate::room::RoomCloseReason
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_close`] returns error.
  void roomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`LocalMediaTrack`] is added to this
  /// [`Room`].
  ///
  /// This might happen in such cases:
  /// 1. Media server initiates a media request.
  /// 2. `enable_audio`/`enable_video` is called.
  /// 3. [`MediaStreamSettings`] updated via `set_local_media_settings`.
  ///
  /// [`Room`]: crate::room::Room
  /// [`MediaStreamSettings`]: crate::media::MediaStreamSettings
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_local_track`] returns error.
  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta;

  /// Sets callback, invoked when a connection with server is lost.
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_connection_loss`] returns error.
  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta;

  /// Sets callback, invoked on local media acquisition failures.
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_failed_local_media`] returns error.
  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta;

  DropFnType get dropOpaqueConnectionHandle;
  ShareFnType get shareOpaqueConnectionHandle;
  OpaqueTypeFinalizer get ConnectionHandleFinalizer;

  DropFnType get dropOpaqueJason;
  ShareFnType get shareOpaqueJason;
  OpaqueTypeFinalizer get JasonFinalizer;

  DropFnType get dropOpaqueLocalMediaTrack;
  ShareFnType get shareOpaqueLocalMediaTrack;
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer;

  DropFnType get dropOpaqueMediaManagerHandle;
  ShareFnType get shareOpaqueMediaManagerHandle;
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer;

  DropFnType get dropOpaqueReconnectHandle;
  ShareFnType get shareOpaqueReconnectHandle;
  OpaqueTypeFinalizer get ReconnectHandleFinalizer;

  DropFnType get dropOpaqueRemoteMediaTrack;
  ShareFnType get shareOpaqueRemoteMediaTrack;
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer;

  DropFnType get dropOpaqueRoomHandle;
  ShareFnType get shareOpaqueRoomHandle;
  OpaqueTypeFinalizer get RoomHandleFinalizer;
}

@sealed
class ConnectionHandle extends FrbOpaque {
  final MedeaJason bridge;
  ConnectionHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueConnectionHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueConnectionHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ConnectionHandleFinalizer;
}

@sealed
class Jason extends FrbOpaque {
  final MedeaJason bridge;
  Jason.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueJason;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueJason;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.JasonFinalizer;
}

@sealed
class LocalMediaTrack extends FrbOpaque {
  final MedeaJason bridge;
  LocalMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueLocalMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueLocalMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.LocalMediaTrackFinalizer;
}

@sealed
class MediaManagerHandle extends FrbOpaque {
  final MedeaJason bridge;
  MediaManagerHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMediaManagerHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMediaManagerHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MediaManagerHandleFinalizer;
}

@sealed
class ReconnectHandle extends FrbOpaque {
  final MedeaJason bridge;
  ReconnectHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueReconnectHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueReconnectHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ReconnectHandleFinalizer;
}

@sealed
class RemoteMediaTrack extends FrbOpaque {
  final MedeaJason bridge;
  RemoteMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRemoteMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRemoteMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RemoteMediaTrackFinalizer;
}

@sealed
class RoomHandle extends FrbOpaque {
  final MedeaJason bridge;
  RoomHandle.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRoomHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRoomHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RoomHandleFinalizer;
}

class ApiAudioTrackConstrs {
  /// Identifier of the device generating the content for the media track.
  String? deviceId;

  ApiAudioTrackConstrs({
    this.deviceId,
  });
}

@freezed
class ApiConstrainFacingMode with _$ApiConstrainFacingMode {
  /// Exact value required for this property.
  const factory ApiConstrainFacingMode.exact(
    FacingMode field0,
  ) = ApiConstrainFacingMode_Exact;

  /// Ideal (target) value for this property.
  const factory ApiConstrainFacingMode.ideal(
    FacingMode field0,
  ) = ApiConstrainFacingMode_Ideal;
}

/// Constraints applicable to video tracks that are sourced from some media
/// device.
class ApiDeviceVideoTrackConstrs {
  /// Identifier of the device generating the content for the media track.
  String? deviceId;

  /// Describes the directions that the camera can face, as seen from the
  /// user's perspective.
  ApiOptionConstrainFacingMode facingMode;

  /// Height of the video in pixels.
  ApiOptionConstrainU32 height;

  /// Width of the video in pixels.
  ApiOptionConstrainU32 width;

  ApiDeviceVideoTrackConstrs({
    this.deviceId,
    required this.facingMode,
    required this.height,
    required this.width,
  });
}

/// Constraints applicable to video tracks sourced from a screen capturing.
class ApiDisplayVideoTrackConstrs {
  /// Identifier of the device generating the content for the media track.
  String? deviceId;

  /// [Height][1] of the video in pixels.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  ApiOptionConstrainU32 height;

  /// [Width][1] of the video in pixels.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  ApiOptionConstrainU32 width;

  /// [Frame rate][1] of the video.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  ApiOptionConstrainU32 frameRate;

  ApiDisplayVideoTrackConstrs({
    this.deviceId,
    required this.height,
    required this.width,
    required this.frameRate,
  });
}

/// Representation of a [ApiMediaDeviceInfo][0] ONLY for input devices.
/// [0]: https://w3.org/TR/mediacapture-streams#device-info
class ApiMediaDeviceInfo {
  /// [`MediaDeviceKind`] of this [`ApiMediaDeviceInfo`].
  final MediaDeviceKind kind;

  /// Unique identifier of the device represented by this
  /// [`ApiMediaDeviceInfo`].
  final String deviceId;

  /// Label describing the device represented by this
  /// [`ApiMediaDeviceInfo`] (for example, "External USB Webcam").
  final String label;

  /// Group identifier of the device represented by this
  /// [`ApiMediaDeviceInfo`]
  ///
  /// Two devices have the same group identifier if they belong to the same
  /// physical device. For example, the audio input and output devices
  /// representing the speaker and microphone of the same headset have the
  /// same [groupId][1].
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadeviceinfo-groupid
  final String? groupId;

  ApiMediaDeviceInfo({
    required this.kind,
    required this.deviceId,
    required this.label,
    this.groupId,
  });
}

/// Representation of a display source.
class ApiMediaDisplayInfo {
  /// Unique identifier of the display represented by this
  /// [`ApiMediaDisplayInfo`].
  final String deviceId;

  /// Title describing the represented display.
  final String? title;

  ApiMediaDisplayInfo({
    required this.deviceId,
    this.title,
  });
}

/// [MediaStreamConstraints][1] wrapper.
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
class ApiMediaStreamSettings {
  /// [MediaStreamConstraints][1] for the audio media type.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
  ApiAudioTrackConstrs audio;

  /// [MediaStreamConstraints][1] for the device video media type.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
  ApiDeviceVideoTrackConstrs? deviceVideo;

  /// [MediaStreamConstraints][1] for the display video media type.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
  ApiDisplayVideoTrackConstrs? displayVideo;

  ApiMediaStreamSettings({
    required this.audio,
    this.deviceVideo,
    this.displayVideo,
  });
}

@freezed
class ApiOptionConstrainFacingMode with _$ApiOptionConstrainFacingMode {
  const factory ApiOptionConstrainFacingMode.some(
    ApiConstrainFacingMode field0,
  ) = ApiOptionConstrainFacingMode_Some;
  const factory ApiOptionConstrainFacingMode.none() =
      ApiOptionConstrainFacingMode_None;
}

@freezed
class ApiOptionConstrainU32 with _$ApiOptionConstrainU32 {
  const factory ApiOptionConstrainU32.some(
    ConstrainU32 field0,
  ) = ApiOptionConstrainU32_Some;
  const factory ApiOptionConstrainU32.none() = ApiOptionConstrainU32_None;
}

@freezed
class ConstrainU32 with _$ConstrainU32 {
  /// Must be the parameter's value.
  const factory ConstrainU32.exact(
    int field0,
  ) = ConstrainU32_Exact;

  /// Should be used if possible.
  const factory ConstrainU32.ideal(
    int field0,
  ) = ConstrainU32_Ideal;

  /// Parameter's value must be in this range.
  const factory ConstrainU32.range(
    int field0,
    int field1,
  ) = ConstrainU32_Range;
}

/// Describes directions that a camera can face, as seen from a user's
/// perspective.
///
/// Representation of a [VideoFacingModeEnum][1].
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-videofacingmodeenum
enum FacingMode {
  /// Facing towards a user (a self-view camera).
  User,

  /// Facing away from a user (viewing an environment).
  Environment,

  /// Facing to the left of a user.
  Left,

  /// Facing to the right of a user.
  Right,
}

/// [MediaDeviceInfo.kind][1] representation.
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadeviceinfo-kind
enum MediaDeviceKind {
  /// Audio input device (for example, a microphone).
  AudioInput,

  /// Video input device (for example, a webcam).
  VideoInput,

  /// Audio output device (for example, a pair of headphones).
  AudioOutput,
}

/// Media exchange direction of a [`Track`].
enum MediaDirection {
  /// [`Track`] is enabled on both receiver and sender sides.
  SendRecv,

  /// [`Track`] is enabled on sender side only.
  SendOnly,

  /// [`Track`] is enabled on receiver side only.
  RecvOnly,

  /// [`Track`] is disabled on both sides.
  Inactive,
}

/// [MediaStreamTrack.kind][1] representation.
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamtrack-kind
enum MediaKind {
  /// Audio track.
  Audio,

  /// Video track.
  Video,
}

/// Media source type.
enum MediaSourceKind {
  /// Media is sourced from some media device (webcam or microphone).
  Device,

  /// Media is obtained with screen-capture.
  Display,
}

/// Reason of why [`Room`] has been closed.
///
/// This struct is passed into [`RoomHandle::on_close`] callback.
class RoomCloseReason {
  /// Indicator if [`Room`] is closed by server.
  ///
  /// `true` if [`CloseReason::ByServer`].
  final bool isClosedByServer;

  /// Reason of closing.
  final String reason;

  /// Indicator if closing is considered as error.
  ///
  /// This field may be `true` only on closing by client.
  final bool isErr;

  RoomCloseReason({
    required this.isClosedByServer,
    required this.reason,
    required this.isErr,
  });
}

class MedeaJasonImpl implements MedeaJason {
  final MedeaJasonPlatform _platform;
  factory MedeaJasonImpl(ExternalLibrary dylib) =>
      MedeaJasonImpl.raw(MedeaJasonPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MedeaJasonImpl.wasm(FutureOr<WasmModule> module) =>
      MedeaJasonImpl(module as ExternalLibrary);
  MedeaJasonImpl.raw(this._platform);
  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_connection_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_ConnectionHandle,
      constMeta: kConnectionHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_from_ptr",
        argNames: ["ptr"],
      );

  void connectionHandleOnClose(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectionHandleOnCloseConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_on_close",
        argNames: ["connection", "f"],
      );

  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_remote_track_added(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectionHandleOnRemoteTrackAddedConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_remote_track_added",
            argNames: ["connection", "f"],
          );

  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_quality_score_update(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectionHandleOnQualityScoreUpdateConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_quality_score_update",
            argNames: ["connection", "f"],
          );

  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_get_remote_member_id(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kConnectionHandleGetRemoteMemberIdConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_get_remote_member_id",
            argNames: ["connection"],
          );

  Object connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleEnableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_audio",
            argNames: ["connection"],
          );

  Object connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleDisableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_audio",
            argNames: ["connection"],
          );

  Object connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleEnableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  Object connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleDisableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  void onPanic({required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_on_panic(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kOnPanicConstMeta,
      argValues: [cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOnPanicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "on_panic",
        argNames: ["cb"],
      );

  Jason jasonNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_new(),
      parseSuccessData: _wire2api_Jason,
      constMeta: kJasonNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_new",
        argNames: [],
      );

  RoomHandle jasonInitRoom({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_init_room(arg0),
      parseSuccessData: _wire2api_RoomHandle,
      constMeta: kJasonInitRoomConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_init_room",
        argNames: ["jason"],
      );

  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_media_manager(arg0),
      parseSuccessData: _wire2api_MediaManagerHandle,
      constMeta: kJasonMediaManagerConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_media_manager",
        argNames: ["jason"],
      );

  void jasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    var arg1 = _platform.api2wire_RoomHandle(roomToDelete);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_close_room(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kJasonCloseRoomConstMeta,
      argValues: [jason, roomToDelete],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_close_room",
        argNames: ["jason", "roomToDelete"],
      );

  void jasonDispose({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_dispose(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kJasonDisposeConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_dispose",
        argNames: ["jason"],
      );

  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_LocalMediaTrack,
      constMeta: kLocalMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_from_ptr",
        argNames: ["ptr"],
      );

  List<LocalMediaTrack> vecLocalTracksFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_local_tracks_from_ptr(arg0),
      parseSuccessData: _wire2api_list_LocalMediaTrack,
      constMeta: kVecLocalTracksFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_local_tracks_from_ptr",
        argNames: ["ptr"],
      );

  Object localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_get_track(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kLocalMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_get_track",
        argNames: ["track"],
      );

  MediaKind localMediaTrackKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_kind(arg0),
      parseSuccessData: _wire2api_media_kind,
      constMeta: kLocalMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_kind",
        argNames: ["track"],
      );

  MediaSourceKind localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_local_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_media_source_kind,
      constMeta: kLocalMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_media_source_kind",
        argNames: ["track"],
      );

  List<ApiMediaDeviceInfo> vecMediaDeviceInfoFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_device_info_from_ptr(arg0),
      parseSuccessData: _wire2api_list_api_media_device_info,
      constMeta: kVecMediaDeviceInfoFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceInfoFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_device_info_from_ptr",
        argNames: ["ptr"],
      );

  List<ApiMediaDisplayInfo> vecMediaDisplayInfoFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_media_display_info_from_ptr(arg0),
      parseSuccessData: _wire2api_list_api_media_display_info,
      constMeta: kVecMediaDisplayInfoFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayInfoFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_display_info_from_ptr",
        argNames: ["ptr"],
      );

  Object mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required ApiMediaStreamSettings caps,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_box_autoadd_api_media_stream_settings(caps);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_init_local_tracks(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleInitLocalTracksConstMeta,
      argValues: [manager, caps],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_init_local_tracks",
            argNames: ["manager", "caps"],
          );

  Object mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_devices(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleEnumerateDevicesConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_devices",
            argNames: ["manager"],
          );

  Object mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_displays(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleEnumerateDisplaysConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_displays",
            argNames: ["manager"],
          );

  Object mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_output_audio_id(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleSetOutputAudioIdConstMeta,
      argValues: [manager, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_output_audio_id",
            argNames: ["manager", "deviceId"],
          );

  Object mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_i64(level);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_microphone_volume(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleSetMicrophoneVolumeConstMeta,
      argValues: [manager, level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_microphone_volume",
            argNames: ["manager", "level"],
          );

  Object mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_microphone_volume_is_available(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume_is_available",
            argNames: ["manager"],
          );

  Object mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_microphone_volume(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleMicrophoneVolumeConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume",
            argNames: ["manager"],
          );

  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_on_device_change(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediaManagerHandleOnDeviceChangeConstMeta,
      argValues: [manager, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleOnDeviceChangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_on_device_change",
            argNames: ["manager", "cb"],
          );

  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_reconnect_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_ReconnectHandle,
      constMeta: kReconnectHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reconnect_handle_from_ptr",
        argNames: ["ptr"],
      );

  Object reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = _platform.api2wire_i64(delayMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_delay(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kReconnectHandleReconnectWithDelayConstMeta,
      argValues: [reconnectHandle, delayMs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_delay",
            argNames: ["reconnectHandle", "delayMs"],
          );

  Object reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = _platform.api2wire_i64(startingDelay);
    var arg2 = api2wire_f64(multiplier);
    var arg3 = _platform.api2wire_i64(maxDelay);
    var arg4 = _platform.api2wire_opt_box_autoadd_i64(maxElapsedTimeMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_backoff(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kReconnectHandleReconnectWithBackoffConstMeta,
      argValues: [
        reconnectHandle,
        startingDelay,
        multiplier,
        maxDelay,
        maxElapsedTimeMs
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_backoff",
            argNames: [
              "reconnectHandle",
              "startingDelay",
              "multiplier",
              "maxDelay",
              "maxElapsedTimeMs"
            ],
          );

  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_RemoteMediaTrack,
      constMeta: kRemoteMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_from_ptr",
        argNames: ["ptr"],
      );

  Object remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_get_track(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRemoteMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_get_track",
        argNames: ["track"],
      );

  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_muted(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnMutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_muted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_unmuted(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnUnmutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_unmuted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_stopped(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnStoppedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_stopped",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_remote_media_track_on_media_direction_changed(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnMediaDirectionChangedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_on_media_direction_changed",
            argNames: ["track", "f"],
          );

  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_muted(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kRemoteMediaTrackMutedConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_muted",
        argNames: ["track"],
      );

  MediaKind remoteMediaTrackKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_kind(arg0),
      parseSuccessData: _wire2api_media_kind,
      constMeta: kRemoteMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_kind",
        argNames: ["track"],
      );

  MediaSourceKind remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_media_source_kind,
      constMeta: kRemoteMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackMediaSourceKindConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_media_source_kind",
            argNames: ["track"],
          );

  MediaDirection remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_direction(arg0),
      parseSuccessData: _wire2api_media_direction,
      constMeta: kRemoteMediaTrackMediaDirectionConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_media_direction",
        argNames: ["track"],
      );

  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_from_ptr(arg0),
      parseSuccessData: _wire2api_room_close_reason,
      constMeta: kRoomCloseReasonFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_from_ptr",
        argNames: ["ptr"],
      );

  Object roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_String(token);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_join(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleJoinConstMeta,
      argValues: [roomHandle, token],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_join",
        argNames: ["roomHandle", "token"],
      );

  Object roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required ApiMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 =
        _platform.api2wire_box_autoadd_api_media_stream_settings(settings);
    var arg2 = stopFirst;
    var arg3 = rollbackOnFail;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_room_handle_set_local_media_settings(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleSetLocalMediaSettingsConstMeta,
      argValues: [roomHandle, settings, stopFirst, rollbackOnFail],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomHandleSetLocalMediaSettingsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_handle_set_local_media_settings",
            argNames: ["roomHandle", "settings", "stopFirst", "rollbackOnFail"],
          );

  Object roomHandleMuteAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleMuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleUnmuteAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleUnmuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleEnableAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleMuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleUnmuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_new_connection(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnNewConnectionConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_new_connection",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnCloseConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_close",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_local_track(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnLocalTrackConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_local_track",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_connection_loss(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnConnectionLossConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_connection_loss",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_failed_local_media(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnFailedLocalMediaConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_failed_local_media",
        argNames: ["roomHandle", "cb"],
      );

  DropFnType get dropOpaqueConnectionHandle =>
      _platform.inner.drop_opaque_ConnectionHandle;
  ShareFnType get shareOpaqueConnectionHandle =>
      _platform.inner.share_opaque_ConnectionHandle;
  OpaqueTypeFinalizer get ConnectionHandleFinalizer =>
      _platform.ConnectionHandleFinalizer;

  DropFnType get dropOpaqueJason => _platform.inner.drop_opaque_Jason;
  ShareFnType get shareOpaqueJason => _platform.inner.share_opaque_Jason;
  OpaqueTypeFinalizer get JasonFinalizer => _platform.JasonFinalizer;

  DropFnType get dropOpaqueLocalMediaTrack =>
      _platform.inner.drop_opaque_LocalMediaTrack;
  ShareFnType get shareOpaqueLocalMediaTrack =>
      _platform.inner.share_opaque_LocalMediaTrack;
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer =>
      _platform.LocalMediaTrackFinalizer;

  DropFnType get dropOpaqueMediaManagerHandle =>
      _platform.inner.drop_opaque_MediaManagerHandle;
  ShareFnType get shareOpaqueMediaManagerHandle =>
      _platform.inner.share_opaque_MediaManagerHandle;
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer =>
      _platform.MediaManagerHandleFinalizer;

  DropFnType get dropOpaqueReconnectHandle =>
      _platform.inner.drop_opaque_ReconnectHandle;
  ShareFnType get shareOpaqueReconnectHandle =>
      _platform.inner.share_opaque_ReconnectHandle;
  OpaqueTypeFinalizer get ReconnectHandleFinalizer =>
      _platform.ReconnectHandleFinalizer;

  DropFnType get dropOpaqueRemoteMediaTrack =>
      _platform.inner.drop_opaque_RemoteMediaTrack;
  ShareFnType get shareOpaqueRemoteMediaTrack =>
      _platform.inner.share_opaque_RemoteMediaTrack;
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer =>
      _platform.RemoteMediaTrackFinalizer;

  DropFnType get dropOpaqueRoomHandle => _platform.inner.drop_opaque_RoomHandle;
  ShareFnType get shareOpaqueRoomHandle =>
      _platform.inner.share_opaque_RoomHandle;
  OpaqueTypeFinalizer get RoomHandleFinalizer => _platform.RoomHandleFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ConnectionHandle _wire2api_ConnectionHandle(dynamic raw) {
    return ConnectionHandle.fromRaw(raw[0], raw[1], this);
  }

  Object _wire2api_DartOpaque(dynamic raw) {
    return _platform.inner.get_dart_object(raw);
  }

  Jason _wire2api_Jason(dynamic raw) {
    return Jason.fromRaw(raw[0], raw[1], this);
  }

  LocalMediaTrack _wire2api_LocalMediaTrack(dynamic raw) {
    return LocalMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  MediaManagerHandle _wire2api_MediaManagerHandle(dynamic raw) {
    return MediaManagerHandle.fromRaw(raw[0], raw[1], this);
  }

  ReconnectHandle _wire2api_ReconnectHandle(dynamic raw) {
    return ReconnectHandle.fromRaw(raw[0], raw[1], this);
  }

  RemoteMediaTrack _wire2api_RemoteMediaTrack(dynamic raw) {
    return RemoteMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  RoomHandle _wire2api_RoomHandle(dynamic raw) {
    return RoomHandle.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  ApiMediaDeviceInfo _wire2api_api_media_device_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiMediaDeviceInfo(
      kind: _wire2api_media_device_kind(arr[0]),
      deviceId: _wire2api_String(arr[1]),
      label: _wire2api_String(arr[2]),
      groupId: _wire2api_opt_String(arr[3]),
    );
  }

  ApiMediaDisplayInfo _wire2api_api_media_display_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiMediaDisplayInfo(
      deviceId: _wire2api_String(arr[0]),
      title: _wire2api_opt_String(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<LocalMediaTrack> _wire2api_list_LocalMediaTrack(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_LocalMediaTrack).toList();
  }

  List<ApiMediaDeviceInfo> _wire2api_list_api_media_device_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_api_media_device_info).toList();
  }

  List<ApiMediaDisplayInfo> _wire2api_list_api_media_display_info(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_api_media_display_info)
        .toList();
  }

  MediaDeviceKind _wire2api_media_device_kind(dynamic raw) {
    return MediaDeviceKind.values[raw];
  }

  MediaDirection _wire2api_media_direction(dynamic raw) {
    return MediaDirection.values[raw];
  }

  MediaKind _wire2api_media_kind(dynamic raw) {
    return MediaKind.values[raw];
  }

  MediaSourceKind _wire2api_media_source_kind(dynamic raw) {
    return MediaSourceKind.values[raw];
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  RoomCloseReason _wire2api_room_close_reason(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RoomCloseReason(
      isClosedByServer: _wire2api_bool(arr[0]),
      reason: _wire2api_String(arr[1]),
      isErr: _wire2api_bool(arr[2]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_facing_mode(FacingMode raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class MedeaJasonPlatform extends FlutterRustBridgeBase<MedeaJasonWire> {
  MedeaJasonPlatform(ffi.DynamicLibrary dylib) : super(MedeaJasonWire(dylib));

// Section: api2wire

  @protected
  wire_ConnectionHandle api2wire_ConnectionHandle(ConnectionHandle raw) {
    final ptr = inner.new_ConnectionHandle();
    _api_fill_to_wire_ConnectionHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_DartOpaque api2wire_DartOpaque(Object raw) {
    inner.dartApi.initApi();
    final ptr = inner.new_DartOpaque();
    _api_fill_to_wire_DartOpaque(raw, ptr);
    return ptr;
  }

  @protected
  wire_Jason api2wire_Jason(Jason raw) {
    final ptr = inner.new_Jason();
    _api_fill_to_wire_Jason(raw, ptr);
    return ptr;
  }

  @protected
  wire_LocalMediaTrack api2wire_LocalMediaTrack(LocalMediaTrack raw) {
    final ptr = inner.new_LocalMediaTrack();
    _api_fill_to_wire_LocalMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_MediaManagerHandle api2wire_MediaManagerHandle(MediaManagerHandle raw) {
    final ptr = inner.new_MediaManagerHandle();
    _api_fill_to_wire_MediaManagerHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_ReconnectHandle api2wire_ReconnectHandle(ReconnectHandle raw) {
    final ptr = inner.new_ReconnectHandle();
    _api_fill_to_wire_ReconnectHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_RemoteMediaTrack api2wire_RemoteMediaTrack(RemoteMediaTrack raw) {
    final ptr = inner.new_RemoteMediaTrack();
    _api_fill_to_wire_RemoteMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_RoomHandle api2wire_RoomHandle(RoomHandle raw) {
    final ptr = inner.new_RoomHandle();
    _api_fill_to_wire_RoomHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_ApiAudioTrackConstrs> api2wire_box_api_audio_track_constrs(
      ApiAudioTrackConstrs raw) {
    final ptr = inner.new_box_api_audio_track_constrs_0();
    _api_fill_to_wire_api_audio_track_constrs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiOptionConstrainFacingMode>
      api2wire_box_api_option_constrain_facing_mode(
          ApiOptionConstrainFacingMode raw) {
    final ptr = inner.new_box_api_option_constrain_facing_mode_0();
    _api_fill_to_wire_api_option_constrain_facing_mode(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiOptionConstrainU32>
      api2wire_box_api_option_constrain_u_32(ApiOptionConstrainU32 raw) {
    final ptr = inner.new_box_api_option_constrain_u_32_0();
    _api_fill_to_wire_api_option_constrain_u_32(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiConstrainFacingMode>
      api2wire_box_autoadd_api_constrain_facing_mode(
          ApiConstrainFacingMode raw) {
    final ptr = inner.new_box_autoadd_api_constrain_facing_mode_0();
    _api_fill_to_wire_api_constrain_facing_mode(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiDeviceVideoTrackConstrs>
      api2wire_box_autoadd_api_device_video_track_constrs(
          ApiDeviceVideoTrackConstrs raw) {
    final ptr = inner.new_box_autoadd_api_device_video_track_constrs_0();
    _api_fill_to_wire_api_device_video_track_constrs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiDisplayVideoTrackConstrs>
      api2wire_box_autoadd_api_display_video_track_constrs(
          ApiDisplayVideoTrackConstrs raw) {
    final ptr = inner.new_box_autoadd_api_display_video_track_constrs_0();
    _api_fill_to_wire_api_display_video_track_constrs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiMediaStreamSettings>
      api2wire_box_autoadd_api_media_stream_settings(
          ApiMediaStreamSettings raw) {
    final ptr = inner.new_box_autoadd_api_media_stream_settings_0();
    _api_fill_to_wire_api_media_stream_settings(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConstrainU32> api2wire_box_autoadd_constrain_u_32(
      ConstrainU32 raw) {
    final ptr = inner.new_box_autoadd_constrain_u_32_0();
    _api_fill_to_wire_constrain_u_32(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_ApiDeviceVideoTrackConstrs>
      api2wire_opt_box_autoadd_api_device_video_track_constrs(
          ApiDeviceVideoTrackConstrs? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_api_device_video_track_constrs(raw);
  }

  @protected
  ffi.Pointer<wire_ApiDisplayVideoTrackConstrs>
      api2wire_opt_box_autoadd_api_display_video_track_constrs(
          ApiDisplayVideoTrackConstrs? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_api_display_video_track_constrs(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _ConnectionHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ConnectionHandlePtr);
  OpaqueTypeFinalizer get ConnectionHandleFinalizer =>
      _ConnectionHandleFinalizer;
  late final OpaqueTypeFinalizer _JasonFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_JasonPtr);
  OpaqueTypeFinalizer get JasonFinalizer => _JasonFinalizer;
  late final OpaqueTypeFinalizer _LocalMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_LocalMediaTrackPtr);
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer => _LocalMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _MediaManagerHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MediaManagerHandlePtr);
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer =>
      _MediaManagerHandleFinalizer;
  late final OpaqueTypeFinalizer _ReconnectHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ReconnectHandlePtr);
  OpaqueTypeFinalizer get ReconnectHandleFinalizer => _ReconnectHandleFinalizer;
  late final OpaqueTypeFinalizer _RemoteMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RemoteMediaTrackPtr);
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer =>
      _RemoteMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _RoomHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RoomHandlePtr);
  OpaqueTypeFinalizer get RoomHandleFinalizer => _RoomHandleFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_ConnectionHandle(
      ConnectionHandle apiObj, wire_ConnectionHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DartOpaque(Object apiObj, wire_DartOpaque wireObj) {
    wireObj.handle = inner.new_dart_opaque(apiObj);
    wireObj.port = dropPort;
  }

  void _api_fill_to_wire_Jason(Jason apiObj, wire_Jason wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_LocalMediaTrack(
      LocalMediaTrack apiObj, wire_LocalMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MediaManagerHandle(
      MediaManagerHandle apiObj, wire_MediaManagerHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ReconnectHandle(
      ReconnectHandle apiObj, wire_ReconnectHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RemoteMediaTrack(
      RemoteMediaTrack apiObj, wire_RemoteMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RoomHandle(
      RoomHandle apiObj, wire_RoomHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_api_audio_track_constrs(
      ApiAudioTrackConstrs apiObj, wire_ApiAudioTrackConstrs wireObj) {
    wireObj.device_id = api2wire_opt_String(apiObj.deviceId);
  }

  void _api_fill_to_wire_api_constrain_facing_mode(
      ApiConstrainFacingMode apiObj, wire_ApiConstrainFacingMode wireObj) {
    if (apiObj is ApiConstrainFacingMode_Exact) {
      var pre_field0 = api2wire_facing_mode(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ApiConstrainFacingMode_Exact();
      wireObj.kind.ref.Exact.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ApiConstrainFacingMode_Ideal) {
      var pre_field0 = api2wire_facing_mode(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_ApiConstrainFacingMode_Ideal();
      wireObj.kind.ref.Ideal.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_api_device_video_track_constrs(
      ApiDeviceVideoTrackConstrs apiObj,
      wire_ApiDeviceVideoTrackConstrs wireObj) {
    wireObj.device_id = api2wire_opt_String(apiObj.deviceId);
    wireObj.facing_mode =
        api2wire_box_api_option_constrain_facing_mode(apiObj.facingMode);
    wireObj.height = api2wire_box_api_option_constrain_u_32(apiObj.height);
    wireObj.width = api2wire_box_api_option_constrain_u_32(apiObj.width);
  }

  void _api_fill_to_wire_api_display_video_track_constrs(
      ApiDisplayVideoTrackConstrs apiObj,
      wire_ApiDisplayVideoTrackConstrs wireObj) {
    wireObj.device_id = api2wire_opt_String(apiObj.deviceId);
    wireObj.height = api2wire_box_api_option_constrain_u_32(apiObj.height);
    wireObj.width = api2wire_box_api_option_constrain_u_32(apiObj.width);
    wireObj.frame_rate =
        api2wire_box_api_option_constrain_u_32(apiObj.frameRate);
  }

  void _api_fill_to_wire_api_media_stream_settings(
      ApiMediaStreamSettings apiObj, wire_ApiMediaStreamSettings wireObj) {
    wireObj.audio = api2wire_box_api_audio_track_constrs(apiObj.audio);
    wireObj.device_video =
        api2wire_opt_box_autoadd_api_device_video_track_constrs(
            apiObj.deviceVideo);
    wireObj.display_video =
        api2wire_opt_box_autoadd_api_display_video_track_constrs(
            apiObj.displayVideo);
  }

  void _api_fill_to_wire_api_option_constrain_facing_mode(
      ApiOptionConstrainFacingMode apiObj,
      wire_ApiOptionConstrainFacingMode wireObj) {
    if (apiObj is ApiOptionConstrainFacingMode_Some) {
      var pre_field0 =
          api2wire_box_autoadd_api_constrain_facing_mode(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ApiOptionConstrainFacingMode_Some();
      wireObj.kind.ref.Some.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ApiOptionConstrainFacingMode_None) {
      wireObj.tag = 1;
      return;
    }
  }

  void _api_fill_to_wire_api_option_constrain_u_32(
      ApiOptionConstrainU32 apiObj, wire_ApiOptionConstrainU32 wireObj) {
    if (apiObj is ApiOptionConstrainU32_Some) {
      var pre_field0 = api2wire_box_autoadd_constrain_u_32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ApiOptionConstrainU32_Some();
      wireObj.kind.ref.Some.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ApiOptionConstrainU32_None) {
      wireObj.tag = 1;
      return;
    }
  }

  void _api_fill_to_wire_box_api_audio_track_constrs(
      ApiAudioTrackConstrs apiObj,
      ffi.Pointer<wire_ApiAudioTrackConstrs> wireObj) {
    _api_fill_to_wire_api_audio_track_constrs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_api_option_constrain_facing_mode(
      ApiOptionConstrainFacingMode apiObj,
      ffi.Pointer<wire_ApiOptionConstrainFacingMode> wireObj) {
    _api_fill_to_wire_api_option_constrain_facing_mode(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_api_option_constrain_u_32(
      ApiOptionConstrainU32 apiObj,
      ffi.Pointer<wire_ApiOptionConstrainU32> wireObj) {
    _api_fill_to_wire_api_option_constrain_u_32(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_constrain_facing_mode(
      ApiConstrainFacingMode apiObj,
      ffi.Pointer<wire_ApiConstrainFacingMode> wireObj) {
    _api_fill_to_wire_api_constrain_facing_mode(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_device_video_track_constrs(
      ApiDeviceVideoTrackConstrs apiObj,
      ffi.Pointer<wire_ApiDeviceVideoTrackConstrs> wireObj) {
    _api_fill_to_wire_api_device_video_track_constrs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_display_video_track_constrs(
      ApiDisplayVideoTrackConstrs apiObj,
      ffi.Pointer<wire_ApiDisplayVideoTrackConstrs> wireObj) {
    _api_fill_to_wire_api_display_video_track_constrs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_media_stream_settings(
      ApiMediaStreamSettings apiObj,
      ffi.Pointer<wire_ApiMediaStreamSettings> wireObj) {
    _api_fill_to_wire_api_media_stream_settings(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_constrain_u_32(
      ConstrainU32 apiObj, ffi.Pointer<wire_ConstrainU32> wireObj) {
    _api_fill_to_wire_constrain_u_32(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_constrain_u_32(
      ConstrainU32 apiObj, wire_ConstrainU32 wireObj) {
    if (apiObj is ConstrainU32_Exact) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ConstrainU32_Exact();
      wireObj.kind.ref.Exact.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ConstrainU32_Ideal) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_ConstrainU32_Ideal();
      wireObj.kind.ref.Ideal.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ConstrainU32_Range) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      var pre_field1 = api2wire_u32(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_ConstrainU32_Range();
      wireObj.kind.ref.Range.ref.field0 = pre_field0;
      wireObj.kind.ref.Range.ref.field1 = pre_field1;
      return;
    }
  }

  void _api_fill_to_wire_opt_box_autoadd_api_device_video_track_constrs(
      ApiDeviceVideoTrackConstrs? apiObj,
      ffi.Pointer<wire_ApiDeviceVideoTrackConstrs> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_api_device_video_track_constrs(
          apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_api_display_video_track_constrs(
      ApiDisplayVideoTrackConstrs? apiObj,
      ffi.Pointer<wire_ApiDisplayVideoTrackConstrs> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_api_display_video_track_constrs(
          apiObj, wireObj);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MedeaJasonWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MedeaJasonWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MedeaJasonWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  Object unbox_dart_handle(
    ffi.Pointer<ffi.Handle> val,
  ) {
    return _unbox_dart_handle(
      val,
    );
  }

  late final _unbox_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Handle>)>>(
          'unbox_dart_handle');
  late final _unbox_dart_handle = _unbox_dart_handlePtr
      .asFunction<Object Function(ffi.Pointer<ffi.Handle>)>();

  void free_boxed_dart_handle(
    ffi.Pointer<ffi.Handle> val,
  ) {
    return _free_boxed_dart_handle(
      val,
    );
  }

  late final _free_boxed_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Handle>)>>(
          'free_boxed_dart_handle');
  late final _free_boxed_dart_handle = _free_boxed_dart_handlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Handle>)>();

  ffi.Pointer<ffi.Handle> box_dart_handle(
    Object val,
  ) {
    return _box_dart_handle(
      val,
    );
  }

  late final _box_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Handle> Function(ffi.Handle)>>(
          'box_dart_handle');
  late final _box_dart_handle = _box_dart_handlePtr
      .asFunction<ffi.Pointer<ffi.Handle> Function(Object)>();

  ffi.Pointer<DartValue> box_foreign_value(
    DartValue val,
  ) {
    return _box_foreign_value(
      val,
    );
  }

  late final _box_foreign_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DartValue> Function(DartValue)>>(
          'box_foreign_value');
  late final _box_foreign_value = _box_foreign_valuePtr
      .asFunction<ffi.Pointer<DartValue> Function(DartValue)>();

  Object new_argument_error(
    DartValue value,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _new_argument_error(
      value,
      name,
      message,
    );
  }

  late final _new_argument_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(DartValue, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('new_argument_error');
  late final _new_argument_error = _new_argument_errorPtr.asFunction<
      Object Function(
          DartValue, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  Object new_state_error(
    ffi.Pointer<ffi.Char> message,
  ) {
    return _new_state_error(
      message,
    );
  }

  late final _new_state_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'new_state_error');
  late final _new_state_error =
      _new_state_errorPtr.asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object new_format_exception(
    ffi.Pointer<ffi.Char> message,
  ) {
    return _new_format_exception(
      message,
    );
  }

  late final _new_format_exceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'new_format_exception');
  late final _new_format_exception = _new_format_exceptionPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object new_local_media_init_exception(
    int kind,
    ffi.Pointer<ffi.Char> message,
    DartValue cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_local_media_init_exception(
      kind,
      message,
      cause,
      stacktrace,
    );
  }

  late final _new_local_media_init_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Int64, ffi.Pointer<ffi.Char>, DartValue,
              ffi.Pointer<ffi.Char>)>>('new_local_media_init_exception');
  late final _new_local_media_init_exception =
      _new_local_media_init_exceptionPtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Char>, DartValue, ffi.Pointer<ffi.Char>)>();

  Object new_enumerate_devices_exception(
    DartError cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_enumerate_devices_exception(
      cause,
      stacktrace,
    );
  }

  late final _new_enumerate_devices_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(DartError,
              ffi.Pointer<ffi.Char>)>>('new_enumerate_devices_exception');
  late final _new_enumerate_devices_exception =
      _new_enumerate_devices_exceptionPtr
          .asFunction<Object Function(DartError, ffi.Pointer<ffi.Char>)>();

  Object new_rpc_client_exception(
    int kind,
    ffi.Pointer<ffi.Char> message,
    DartValue cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_rpc_client_exception(
      kind,
      message,
      cause,
      stacktrace,
    );
  }

  late final _new_rpc_client_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Int64, ffi.Pointer<ffi.Char>, DartValue,
              ffi.Pointer<ffi.Char>)>>('new_rpc_client_exception');
  late final _new_rpc_client_exception =
      _new_rpc_client_exceptionPtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Char>, DartValue, ffi.Pointer<ffi.Char>)>();

  Object new_media_state_transition_exception(
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> stacktrace,
    int kind,
  ) {
    return _new_media_state_transition_exception(
      message,
      stacktrace,
      kind,
    );
  }

  late final _new_media_state_transition_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int64)>>('new_media_state_transition_exception');
  late final _new_media_state_transition_exception =
      _new_media_state_transition_exceptionPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  Object new_internal_exception(
    ffi.Pointer<ffi.Char> message,
    DartValue cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_internal_exception(
      message,
      cause,
      stacktrace,
    );
  }

  late final _new_internal_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Char>, DartValue,
              ffi.Pointer<ffi.Char>)>>('new_internal_exception');
  late final _new_internal_exception = _new_internal_exceptionPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Char>, DartValue, ffi.Pointer<ffi.Char>)>();

  Object new_media_settings_update_exception(
    ffi.Pointer<ffi.Char> message,
    DartError cause,
    bool rolled_back,
  ) {
    return _new_media_settings_update_exception(
      message,
      cause,
      rolled_back,
    );
  }

  late final _new_media_settings_update_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Char>, DartError,
              ffi.Bool)>>('new_media_settings_update_exception');
  late final _new_media_settings_update_exception =
      _new_media_settings_update_exceptionPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Char>, DartError, bool)>();

  Object new_invalid_output_audio_device_id_exception(
    ffi.Pointer<ffi.Char> trace,
  ) {
    return _new_invalid_output_audio_device_id_exception(
      trace,
    );
  }

  late final _new_invalid_output_audio_device_id_exceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'new_invalid_output_audio_device_id_exception');
  late final _new_invalid_output_audio_device_id_exception =
      _new_invalid_output_audio_device_id_exceptionPtr
          .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object new_mic_volume_exception(
    DartError cause,
    ffi.Pointer<ffi.Char> trace,
  ) {
    return _new_mic_volume_exception(
      cause,
      trace,
    );
  }

  late final _new_mic_volume_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              DartError, ffi.Pointer<ffi.Char>)>>('new_mic_volume_exception');
  late final _new_mic_volume_exception = _new_mic_volume_exceptionPtr
      .asFunction<Object Function(DartError, ffi.Pointer<ffi.Char>)>();

  Object throw_panic_exception() {
    return _throw_panic_exception();
  }

  late final _throw_panic_exceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'throw_panic_exception');
  late final _throw_panic_exception =
      _throw_panic_exceptionPtr.asFunction<Object Function()>();

  void fire_panic() {
    return _fire_panic();
  }

  late final _fire_panicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('fire_panic');
  late final _fire_panic = _fire_panicPtr.asFunction<void Function()>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturn wire_connection_handle_from_ptr(
    int ptr,
  ) {
    return _wire_connection_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_connection_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_connection_handle_from_ptr');
  late final _wire_connection_handle_from_ptr =
      _wire_connection_handle_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_connection_handle_on_close(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_close(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_ConnectionHandle,
              wire_DartOpaque)>>('wire_connection_handle_on_close');
  late final _wire_connection_handle_on_close =
      _wire_connection_handle_on_closePtr.asFunction<
          WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturn wire_connection_handle_on_remote_track_added(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_remote_track_added(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_remote_track_addedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>>(
      'wire_connection_handle_on_remote_track_added');
  late final _wire_connection_handle_on_remote_track_added =
      _wire_connection_handle_on_remote_track_addedPtr.asFunction<
          WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturn wire_connection_handle_on_quality_score_update(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_quality_score_update(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_quality_score_updatePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>>(
      'wire_connection_handle_on_quality_score_update');
  late final _wire_connection_handle_on_quality_score_update =
      _wire_connection_handle_on_quality_score_updatePtr.asFunction<
          WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturn wire_connection_handle_get_remote_member_id(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_get_remote_member_id(
      connection,
    );
  }

  late final _wire_connection_handle_get_remote_member_idPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_get_remote_member_id');
  late final _wire_connection_handle_get_remote_member_id =
      _wire_connection_handle_get_remote_member_idPtr
          .asFunction<WireSyncReturn Function(wire_ConnectionHandle)>();

  WireSyncReturn wire_connection_handle_enable_remote_audio(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_enable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_enable_remote_audio');
  late final _wire_connection_handle_enable_remote_audio =
      _wire_connection_handle_enable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_ConnectionHandle)>();

  WireSyncReturn wire_connection_handle_disable_remote_audio(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_disable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_disable_remote_audio');
  late final _wire_connection_handle_disable_remote_audio =
      _wire_connection_handle_disable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_ConnectionHandle)>();

  WireSyncReturn wire_connection_handle_enable_remote_video(
    wire_ConnectionHandle connection,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_connection_handle_enable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_enable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_ConnectionHandle, ffi.Pointer<ffi.Int64>)>>(
      'wire_connection_handle_enable_remote_video');
  late final _wire_connection_handle_enable_remote_video =
      _wire_connection_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturn Function(
              wire_ConnectionHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_connection_handle_disable_remote_video(
    wire_ConnectionHandle connection,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_connection_handle_disable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_ConnectionHandle, ffi.Pointer<ffi.Int64>)>>(
      'wire_connection_handle_disable_remote_video');
  late final _wire_connection_handle_disable_remote_video =
      _wire_connection_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturn Function(
              wire_ConnectionHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_on_panic(
    wire_DartOpaque cb,
  ) {
    return _wire_on_panic(
      cb,
    );
  }

  late final _wire_on_panicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>(
          'wire_on_panic');
  late final _wire_on_panic =
      _wire_on_panicPtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  WireSyncReturn wire_jason_new() {
    return _wire_jason_new();
  }

  late final _wire_jason_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_jason_new');
  late final _wire_jason_new =
      _wire_jason_newPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_jason_init_room(
    wire_Jason jason,
  ) {
    return _wire_jason_init_room(
      jason,
    );
  }

  late final _wire_jason_init_roomPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Jason)>>(
          'wire_jason_init_room');
  late final _wire_jason_init_room = _wire_jason_init_roomPtr
      .asFunction<WireSyncReturn Function(wire_Jason)>();

  WireSyncReturn wire_jason_media_manager(
    wire_Jason jason,
  ) {
    return _wire_jason_media_manager(
      jason,
    );
  }

  late final _wire_jason_media_managerPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Jason)>>(
          'wire_jason_media_manager');
  late final _wire_jason_media_manager = _wire_jason_media_managerPtr
      .asFunction<WireSyncReturn Function(wire_Jason)>();

  WireSyncReturn wire_jason_close_room(
    wire_Jason jason,
    wire_RoomHandle room_to_delete,
  ) {
    return _wire_jason_close_room(
      jason,
      room_to_delete,
    );
  }

  late final _wire_jason_close_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Jason, wire_RoomHandle)>>('wire_jason_close_room');
  late final _wire_jason_close_room = _wire_jason_close_roomPtr
      .asFunction<WireSyncReturn Function(wire_Jason, wire_RoomHandle)>();

  WireSyncReturn wire_jason_dispose(
    wire_Jason jason,
  ) {
    return _wire_jason_dispose(
      jason,
    );
  }

  late final _wire_jason_disposePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Jason)>>(
          'wire_jason_dispose');
  late final _wire_jason_dispose =
      _wire_jason_disposePtr.asFunction<WireSyncReturn Function(wire_Jason)>();

  WireSyncReturn wire_local_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_local_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_local_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_local_media_track_from_ptr');
  late final _wire_local_media_track_from_ptr =
      _wire_local_media_track_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_vec_local_tracks_from_ptr(
    int ptr,
  ) {
    return _wire_vec_local_tracks_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_local_tracks_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_vec_local_tracks_from_ptr');
  late final _wire_vec_local_tracks_from_ptr =
      _wire_vec_local_tracks_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_local_media_track_get_track(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_get_track(
      track,
    );
  }

  late final _wire_local_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_get_track');
  late final _wire_local_media_track_get_track =
      _wire_local_media_track_get_trackPtr
          .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_local_media_track_kind(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_kind(
      track,
    );
  }

  late final _wire_local_media_track_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_kind');
  late final _wire_local_media_track_kind = _wire_local_media_track_kindPtr
      .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_local_media_track_media_source_kind(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_local_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_media_source_kind');
  late final _wire_local_media_track_media_source_kind =
      _wire_local_media_track_media_source_kindPtr
          .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_vec_media_device_info_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_device_info_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_device_info_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_vec_media_device_info_from_ptr');
  late final _wire_vec_media_device_info_from_ptr =
      _wire_vec_media_device_info_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_vec_media_display_info_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_display_info_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_display_info_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_vec_media_display_info_from_ptr');
  late final _wire_vec_media_display_info_from_ptr =
      _wire_vec_media_display_info_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_media_manager_handle_init_local_tracks(
    wire_MediaManagerHandle manager,
    ffi.Pointer<wire_ApiMediaStreamSettings> caps,
  ) {
    return _wire_media_manager_handle_init_local_tracks(
      manager,
      caps,
    );
  }

  late final _wire_media_manager_handle_init_local_tracksPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_MediaManagerHandle,
                  ffi.Pointer<wire_ApiMediaStreamSettings>)>>(
      'wire_media_manager_handle_init_local_tracks');
  late final _wire_media_manager_handle_init_local_tracks =
      _wire_media_manager_handle_init_local_tracksPtr.asFunction<
          WireSyncReturn Function(wire_MediaManagerHandle,
              ffi.Pointer<wire_ApiMediaStreamSettings>)>();

  WireSyncReturn wire_media_manager_handle_enumerate_devices(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_enumerate_devices(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_devicesPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_enumerate_devices');
  late final _wire_media_manager_handle_enumerate_devices =
      _wire_media_manager_handle_enumerate_devicesPtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_enumerate_displays(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_enumerate_displays(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_displaysPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_enumerate_displays');
  late final _wire_media_manager_handle_enumerate_displays =
      _wire_media_manager_handle_enumerate_displaysPtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_set_output_audio_id(
    wire_MediaManagerHandle manager,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_media_manager_handle_set_output_audio_id(
      manager,
      device_id,
    );
  }

  late final _wire_media_manager_handle_set_output_audio_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_MediaManagerHandle, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_media_manager_handle_set_output_audio_id');
  late final _wire_media_manager_handle_set_output_audio_id =
      _wire_media_manager_handle_set_output_audio_idPtr.asFunction<
          WireSyncReturn Function(
              wire_MediaManagerHandle, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_media_manager_handle_set_microphone_volume(
    wire_MediaManagerHandle manager,
    int level,
  ) {
    return _wire_media_manager_handle_set_microphone_volume(
      manager,
      level,
    );
  }

  late final _wire_media_manager_handle_set_microphone_volumePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_MediaManagerHandle,
              ffi.Int64)>>('wire_media_manager_handle_set_microphone_volume');
  late final _wire_media_manager_handle_set_microphone_volume =
      _wire_media_manager_handle_set_microphone_volumePtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle, int)>();

  WireSyncReturn wire_media_manager_handle_microphone_volume_is_available(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_microphone_volume_is_available(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volume_is_availablePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturn Function(wire_MediaManagerHandle)>>(
          'wire_media_manager_handle_microphone_volume_is_available');
  late final _wire_media_manager_handle_microphone_volume_is_available =
      _wire_media_manager_handle_microphone_volume_is_availablePtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_microphone_volume(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_microphone_volume(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volumePtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_microphone_volume');
  late final _wire_media_manager_handle_microphone_volume =
      _wire_media_manager_handle_microphone_volumePtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_on_device_change(
    wire_MediaManagerHandle manager,
    wire_DartOpaque cb,
  ) {
    return _wire_media_manager_handle_on_device_change(
      manager,
      cb,
    );
  }

  late final _wire_media_manager_handle_on_device_changePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_MediaManagerHandle,
              wire_DartOpaque)>>('wire_media_manager_handle_on_device_change');
  late final _wire_media_manager_handle_on_device_change =
      _wire_media_manager_handle_on_device_changePtr.asFunction<
          WireSyncReturn Function(wire_MediaManagerHandle, wire_DartOpaque)>();

  WireSyncReturn wire_reconnect_handle_from_ptr(
    int ptr,
  ) {
    return _wire_reconnect_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_reconnect_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_reconnect_handle_from_ptr');
  late final _wire_reconnect_handle_from_ptr =
      _wire_reconnect_handle_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_reconnect_handle_reconnect_with_delay(
    wire_ReconnectHandle reconnect_handle,
    int delay_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_delay(
      reconnect_handle,
      delay_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_delayPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_ReconnectHandle,
              ffi.Int64)>>('wire_reconnect_handle_reconnect_with_delay');
  late final _wire_reconnect_handle_reconnect_with_delay =
      _wire_reconnect_handle_reconnect_with_delayPtr
          .asFunction<WireSyncReturn Function(wire_ReconnectHandle, int)>();

  WireSyncReturn wire_reconnect_handle_reconnect_with_backoff(
    wire_ReconnectHandle reconnect_handle,
    int starting_delay,
    double multiplier,
    int max_delay,
    ffi.Pointer<ffi.Int64> max_elapsed_time_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_backoff(
      reconnect_handle,
      starting_delay,
      multiplier,
      max_delay,
      max_elapsed_time_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_backoffPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_ReconnectHandle, ffi.Int64,
                  ffi.Double, ffi.Int64, ffi.Pointer<ffi.Int64>)>>(
      'wire_reconnect_handle_reconnect_with_backoff');
  late final _wire_reconnect_handle_reconnect_with_backoff =
      _wire_reconnect_handle_reconnect_with_backoffPtr.asFunction<
          WireSyncReturn Function(wire_ReconnectHandle, int, double, int,
              ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_remote_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_remote_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_remote_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_remote_media_track_from_ptr');
  late final _wire_remote_media_track_from_ptr =
      _wire_remote_media_track_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_remote_media_track_get_track(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_get_track(
      track,
    );
  }

  late final _wire_remote_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_get_track');
  late final _wire_remote_media_track_get_track =
      _wire_remote_media_track_get_trackPtr
          .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_on_muted(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_muted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_mutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_muted');
  late final _wire_remote_media_track_on_muted =
      _wire_remote_media_track_on_mutedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_on_unmuted(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_unmuted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_unmutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_unmuted');
  late final _wire_remote_media_track_on_unmuted =
      _wire_remote_media_track_on_unmutedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_on_stopped(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_stopped(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_stoppedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_stopped');
  late final _wire_remote_media_track_on_stopped =
      _wire_remote_media_track_on_stoppedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_on_media_direction_changed(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_media_direction_changed(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_media_direction_changedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>>(
      'wire_remote_media_track_on_media_direction_changed');
  late final _wire_remote_media_track_on_media_direction_changed =
      _wire_remote_media_track_on_media_direction_changedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_muted(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_muted(
      track,
    );
  }

  late final _wire_remote_media_track_mutedPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_muted');
  late final _wire_remote_media_track_muted = _wire_remote_media_track_mutedPtr
      .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_kind(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_kind(
      track,
    );
  }

  late final _wire_remote_media_track_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_kind');
  late final _wire_remote_media_track_kind = _wire_remote_media_track_kindPtr
      .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_media_source_kind(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_remote_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_media_source_kind');
  late final _wire_remote_media_track_media_source_kind =
      _wire_remote_media_track_media_source_kindPtr
          .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_media_direction(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_media_direction(
      track,
    );
  }

  late final _wire_remote_media_track_media_directionPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_media_direction');
  late final _wire_remote_media_track_media_direction =
      _wire_remote_media_track_media_directionPtr
          .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_room_close_reason_from_ptr(
    int ptr,
  ) {
    return _wire_room_close_reason_from_ptr(
      ptr,
    );
  }

  late final _wire_room_close_reason_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_room_close_reason_from_ptr');
  late final _wire_room_close_reason_from_ptr =
      _wire_room_close_reason_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_room_handle_join(
    wire_RoomHandle room_handle,
    ffi.Pointer<wire_uint_8_list> token,
  ) {
    return _wire_room_handle_join(
      room_handle,
      token,
    );
  }

  late final _wire_room_handle_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<wire_uint_8_list>)>>('wire_room_handle_join');
  late final _wire_room_handle_join = _wire_room_handle_joinPtr.asFunction<
      WireSyncReturn Function(
          wire_RoomHandle, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_room_handle_set_local_media_settings(
    wire_RoomHandle room_handle,
    ffi.Pointer<wire_ApiMediaStreamSettings> settings,
    bool stop_first,
    bool rollback_on_fail,
  ) {
    return _wire_room_handle_set_local_media_settings(
      room_handle,
      settings,
      stop_first,
      rollback_on_fail,
    );
  }

  late final _wire_room_handle_set_local_media_settingsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_RoomHandle,
              ffi.Pointer<wire_ApiMediaStreamSettings>,
              ffi.Bool,
              ffi.Bool)>>('wire_room_handle_set_local_media_settings');
  late final _wire_room_handle_set_local_media_settings =
      _wire_room_handle_set_local_media_settingsPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<wire_ApiMediaStreamSettings>, bool, bool)>();

  WireSyncReturn wire_room_handle_mute_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_mute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_mute_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_mute_audio');
  late final _wire_room_handle_mute_audio = _wire_room_handle_mute_audioPtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_unmute_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_unmute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_unmute_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_unmute_audio');
  late final _wire_room_handle_unmute_audio = _wire_room_handle_unmute_audioPtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_enable_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_enable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_enable_audio');
  late final _wire_room_handle_enable_audio = _wire_room_handle_enable_audioPtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_disable_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_disable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_disable_audio');
  late final _wire_room_handle_disable_audio =
      _wire_room_handle_disable_audioPtr
          .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_mute_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_room_handle_mute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_mute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int64>)>>('wire_room_handle_mute_video');
  late final _wire_room_handle_mute_video =
      _wire_room_handle_mute_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_room_handle_unmute_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_room_handle_unmute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_unmute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int64>)>>('wire_room_handle_unmute_video');
  late final _wire_room_handle_unmute_video =
      _wire_room_handle_unmute_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_room_handle_enable_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_room_handle_enable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int64>)>>('wire_room_handle_enable_video');
  late final _wire_room_handle_enable_video =
      _wire_room_handle_enable_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_room_handle_disable_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_room_handle_disable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int64>)>>('wire_room_handle_disable_video');
  late final _wire_room_handle_disable_video =
      _wire_room_handle_disable_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_room_handle_enable_remote_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_enable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_remote_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_enable_remote_audio');
  late final _wire_room_handle_enable_remote_audio =
      _wire_room_handle_enable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_disable_remote_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_disable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_remote_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_disable_remote_audio');
  late final _wire_room_handle_disable_remote_audio =
      _wire_room_handle_disable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_enable_remote_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_room_handle_enable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_remote_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int64>)>>('wire_room_handle_enable_remote_video');
  late final _wire_room_handle_enable_remote_video =
      _wire_room_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_room_handle_disable_remote_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int64> source_kind,
  ) {
    return _wire_room_handle_disable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_RoomHandle, ffi.Pointer<ffi.Int64>)>>(
      'wire_room_handle_disable_remote_video');
  late final _wire_room_handle_disable_remote_video =
      _wire_room_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int64>)>();

  WireSyncReturn wire_room_handle_on_new_connection(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_new_connection(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_new_connectionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_new_connection');
  late final _wire_room_handle_on_new_connection =
      _wire_room_handle_on_new_connectionPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_close(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_close(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_RoomHandle, wire_DartOpaque)>>('wire_room_handle_on_close');
  late final _wire_room_handle_on_close = _wire_room_handle_on_closePtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_local_track(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_local_track(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_local_trackPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_local_track');
  late final _wire_room_handle_on_local_track =
      _wire_room_handle_on_local_trackPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_connection_loss(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_connection_loss(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_connection_lossPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_connection_loss');
  late final _wire_room_handle_on_connection_loss =
      _wire_room_handle_on_connection_lossPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_failed_local_media(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_failed_local_media(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_failed_local_mediaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_failed_local_media');
  late final _wire_room_handle_on_failed_local_media =
      _wire_room_handle_on_failed_local_mediaPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  wire_ConnectionHandle new_ConnectionHandle() {
    return _new_ConnectionHandle();
  }

  late final _new_ConnectionHandlePtr =
      _lookup<ffi.NativeFunction<wire_ConnectionHandle Function()>>(
          'new_ConnectionHandle');
  late final _new_ConnectionHandle =
      _new_ConnectionHandlePtr.asFunction<wire_ConnectionHandle Function()>();

  wire_DartOpaque new_DartOpaque() {
    return _new_DartOpaque();
  }

  late final _new_DartOpaquePtr =
      _lookup<ffi.NativeFunction<wire_DartOpaque Function()>>('new_DartOpaque');
  late final _new_DartOpaque =
      _new_DartOpaquePtr.asFunction<wire_DartOpaque Function()>();

  wire_Jason new_Jason() {
    return _new_Jason();
  }

  late final _new_JasonPtr =
      _lookup<ffi.NativeFunction<wire_Jason Function()>>('new_Jason');
  late final _new_Jason = _new_JasonPtr.asFunction<wire_Jason Function()>();

  wire_LocalMediaTrack new_LocalMediaTrack() {
    return _new_LocalMediaTrack();
  }

  late final _new_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_LocalMediaTrack Function()>>(
          'new_LocalMediaTrack');
  late final _new_LocalMediaTrack =
      _new_LocalMediaTrackPtr.asFunction<wire_LocalMediaTrack Function()>();

  wire_MediaManagerHandle new_MediaManagerHandle() {
    return _new_MediaManagerHandle();
  }

  late final _new_MediaManagerHandlePtr =
      _lookup<ffi.NativeFunction<wire_MediaManagerHandle Function()>>(
          'new_MediaManagerHandle');
  late final _new_MediaManagerHandle = _new_MediaManagerHandlePtr
      .asFunction<wire_MediaManagerHandle Function()>();

  wire_ReconnectHandle new_ReconnectHandle() {
    return _new_ReconnectHandle();
  }

  late final _new_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<wire_ReconnectHandle Function()>>(
          'new_ReconnectHandle');
  late final _new_ReconnectHandle =
      _new_ReconnectHandlePtr.asFunction<wire_ReconnectHandle Function()>();

  wire_RemoteMediaTrack new_RemoteMediaTrack() {
    return _new_RemoteMediaTrack();
  }

  late final _new_RemoteMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_RemoteMediaTrack Function()>>(
          'new_RemoteMediaTrack');
  late final _new_RemoteMediaTrack =
      _new_RemoteMediaTrackPtr.asFunction<wire_RemoteMediaTrack Function()>();

  wire_RoomHandle new_RoomHandle() {
    return _new_RoomHandle();
  }

  late final _new_RoomHandlePtr =
      _lookup<ffi.NativeFunction<wire_RoomHandle Function()>>('new_RoomHandle');
  late final _new_RoomHandle =
      _new_RoomHandlePtr.asFunction<wire_RoomHandle Function()>();

  ffi.Pointer<wire_ApiAudioTrackConstrs> new_box_api_audio_track_constrs_0() {
    return _new_box_api_audio_track_constrs_0();
  }

  late final _new_box_api_audio_track_constrs_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiAudioTrackConstrs>
              Function()>>('new_box_api_audio_track_constrs_0');
  late final _new_box_api_audio_track_constrs_0 =
      _new_box_api_audio_track_constrs_0Ptr
          .asFunction<ffi.Pointer<wire_ApiAudioTrackConstrs> Function()>();

  ffi.Pointer<wire_ApiOptionConstrainFacingMode>
      new_box_api_option_constrain_facing_mode_0() {
    return _new_box_api_option_constrain_facing_mode_0();
  }

  late final _new_box_api_option_constrain_facing_mode_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiOptionConstrainFacingMode>
              Function()>>('new_box_api_option_constrain_facing_mode_0');
  late final _new_box_api_option_constrain_facing_mode_0 =
      _new_box_api_option_constrain_facing_mode_0Ptr.asFunction<
          ffi.Pointer<wire_ApiOptionConstrainFacingMode> Function()>();

  ffi.Pointer<wire_ApiOptionConstrainU32>
      new_box_api_option_constrain_u_32_0() {
    return _new_box_api_option_constrain_u_32_0();
  }

  late final _new_box_api_option_constrain_u_32_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiOptionConstrainU32>
              Function()>>('new_box_api_option_constrain_u_32_0');
  late final _new_box_api_option_constrain_u_32_0 =
      _new_box_api_option_constrain_u_32_0Ptr
          .asFunction<ffi.Pointer<wire_ApiOptionConstrainU32> Function()>();

  ffi.Pointer<wire_ApiConstrainFacingMode>
      new_box_autoadd_api_constrain_facing_mode_0() {
    return _new_box_autoadd_api_constrain_facing_mode_0();
  }

  late final _new_box_autoadd_api_constrain_facing_mode_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiConstrainFacingMode>
              Function()>>('new_box_autoadd_api_constrain_facing_mode_0');
  late final _new_box_autoadd_api_constrain_facing_mode_0 =
      _new_box_autoadd_api_constrain_facing_mode_0Ptr
          .asFunction<ffi.Pointer<wire_ApiConstrainFacingMode> Function()>();

  ffi.Pointer<wire_ApiDeviceVideoTrackConstrs>
      new_box_autoadd_api_device_video_track_constrs_0() {
    return _new_box_autoadd_api_device_video_track_constrs_0();
  }

  late final _new_box_autoadd_api_device_video_track_constrs_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiDeviceVideoTrackConstrs>
              Function()>>('new_box_autoadd_api_device_video_track_constrs_0');
  late final _new_box_autoadd_api_device_video_track_constrs_0 =
      _new_box_autoadd_api_device_video_track_constrs_0Ptr.asFunction<
          ffi.Pointer<wire_ApiDeviceVideoTrackConstrs> Function()>();

  ffi.Pointer<wire_ApiDisplayVideoTrackConstrs>
      new_box_autoadd_api_display_video_track_constrs_0() {
    return _new_box_autoadd_api_display_video_track_constrs_0();
  }

  late final _new_box_autoadd_api_display_video_track_constrs_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiDisplayVideoTrackConstrs>
              Function()>>('new_box_autoadd_api_display_video_track_constrs_0');
  late final _new_box_autoadd_api_display_video_track_constrs_0 =
      _new_box_autoadd_api_display_video_track_constrs_0Ptr.asFunction<
          ffi.Pointer<wire_ApiDisplayVideoTrackConstrs> Function()>();

  ffi.Pointer<wire_ApiMediaStreamSettings>
      new_box_autoadd_api_media_stream_settings_0() {
    return _new_box_autoadd_api_media_stream_settings_0();
  }

  late final _new_box_autoadd_api_media_stream_settings_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ApiMediaStreamSettings>
              Function()>>('new_box_autoadd_api_media_stream_settings_0');
  late final _new_box_autoadd_api_media_stream_settings_0 =
      _new_box_autoadd_api_media_stream_settings_0Ptr
          .asFunction<ffi.Pointer<wire_ApiMediaStreamSettings> Function()>();

  ffi.Pointer<wire_ConstrainU32> new_box_autoadd_constrain_u_32_0() {
    return _new_box_autoadd_constrain_u_32_0();
  }

  late final _new_box_autoadd_constrain_u_32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConstrainU32> Function()>>(
          'new_box_autoadd_constrain_u_32_0');
  late final _new_box_autoadd_constrain_u_32_0 =
      _new_box_autoadd_constrain_u_32_0Ptr
          .asFunction<ffi.Pointer<wire_ConstrainU32> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_ConnectionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ConnectionHandle(
      ptr,
    );
  }

  late final _drop_opaque_ConnectionHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ConnectionHandle');
  late final _drop_opaque_ConnectionHandle = _drop_opaque_ConnectionHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ConnectionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ConnectionHandle(
      ptr,
    );
  }

  late final _share_opaque_ConnectionHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ConnectionHandle');
  late final _share_opaque_ConnectionHandle = _share_opaque_ConnectionHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_Jason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Jason(
      ptr,
    );
  }

  late final _drop_opaque_JasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_Jason');
  late final _drop_opaque_Jason =
      _drop_opaque_JasonPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Jason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Jason(
      ptr,
    );
  }

  late final _share_opaque_JasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_Jason');
  late final _share_opaque_Jason = _share_opaque_JasonPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_LocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_LocalMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_LocalMediaTrack');
  late final _drop_opaque_LocalMediaTrack = _drop_opaque_LocalMediaTrackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_LocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_LocalMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_LocalMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_LocalMediaTrack');
  late final _share_opaque_LocalMediaTrack = _share_opaque_LocalMediaTrackPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MediaManagerHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MediaManagerHandle(
      ptr,
    );
  }

  late final _drop_opaque_MediaManagerHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MediaManagerHandle');
  late final _drop_opaque_MediaManagerHandle =
      _drop_opaque_MediaManagerHandlePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MediaManagerHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MediaManagerHandle(
      ptr,
    );
  }

  late final _share_opaque_MediaManagerHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MediaManagerHandle');
  late final _share_opaque_MediaManagerHandle =
      _share_opaque_MediaManagerHandlePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ReconnectHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ReconnectHandle(
      ptr,
    );
  }

  late final _drop_opaque_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ReconnectHandle');
  late final _drop_opaque_ReconnectHandle = _drop_opaque_ReconnectHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ReconnectHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ReconnectHandle(
      ptr,
    );
  }

  late final _share_opaque_ReconnectHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ReconnectHandle');
  late final _share_opaque_ReconnectHandle = _share_opaque_ReconnectHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RemoteMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RemoteMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_RemoteMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RemoteMediaTrack');
  late final _drop_opaque_RemoteMediaTrack = _drop_opaque_RemoteMediaTrackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RemoteMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RemoteMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_RemoteMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RemoteMediaTrack');
  late final _share_opaque_RemoteMediaTrack = _share_opaque_RemoteMediaTrackPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RoomHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RoomHandle(
      ptr,
    );
  }

  late final _drop_opaque_RoomHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RoomHandle');
  late final _drop_opaque_RoomHandle = _drop_opaque_RoomHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RoomHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RoomHandle(
      ptr,
    );
  }

  late final _share_opaque_RoomHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RoomHandle');
  late final _share_opaque_RoomHandle = _share_opaque_RoomHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ApiConstrainFacingModeKind>
      inflate_ApiConstrainFacingMode_Exact() {
    return _inflate_ApiConstrainFacingMode_Exact();
  }

  late final _inflate_ApiConstrainFacingMode_ExactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ApiConstrainFacingModeKind>
              Function()>>('inflate_ApiConstrainFacingMode_Exact');
  late final _inflate_ApiConstrainFacingMode_Exact =
      _inflate_ApiConstrainFacingMode_ExactPtr
          .asFunction<ffi.Pointer<ApiConstrainFacingModeKind> Function()>();

  ffi.Pointer<ApiConstrainFacingModeKind>
      inflate_ApiConstrainFacingMode_Ideal() {
    return _inflate_ApiConstrainFacingMode_Ideal();
  }

  late final _inflate_ApiConstrainFacingMode_IdealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ApiConstrainFacingModeKind>
              Function()>>('inflate_ApiConstrainFacingMode_Ideal');
  late final _inflate_ApiConstrainFacingMode_Ideal =
      _inflate_ApiConstrainFacingMode_IdealPtr
          .asFunction<ffi.Pointer<ApiConstrainFacingModeKind> Function()>();

  ffi.Pointer<ApiOptionConstrainFacingModeKind>
      inflate_ApiOptionConstrainFacingMode_Some() {
    return _inflate_ApiOptionConstrainFacingMode_Some();
  }

  late final _inflate_ApiOptionConstrainFacingMode_SomePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ApiOptionConstrainFacingModeKind>
              Function()>>('inflate_ApiOptionConstrainFacingMode_Some');
  late final _inflate_ApiOptionConstrainFacingMode_Some =
      _inflate_ApiOptionConstrainFacingMode_SomePtr.asFunction<
          ffi.Pointer<ApiOptionConstrainFacingModeKind> Function()>();

  ffi.Pointer<ApiOptionConstrainU32Kind> inflate_ApiOptionConstrainU32_Some() {
    return _inflate_ApiOptionConstrainU32_Some();
  }

  late final _inflate_ApiOptionConstrainU32_SomePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ApiOptionConstrainU32Kind>
              Function()>>('inflate_ApiOptionConstrainU32_Some');
  late final _inflate_ApiOptionConstrainU32_Some =
      _inflate_ApiOptionConstrainU32_SomePtr
          .asFunction<ffi.Pointer<ApiOptionConstrainU32Kind> Function()>();

  ffi.Pointer<ConstrainU32Kind> inflate_ConstrainU32_Exact() {
    return _inflate_ConstrainU32_Exact();
  }

  late final _inflate_ConstrainU32_ExactPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ConstrainU32Kind> Function()>>(
          'inflate_ConstrainU32_Exact');
  late final _inflate_ConstrainU32_Exact = _inflate_ConstrainU32_ExactPtr
      .asFunction<ffi.Pointer<ConstrainU32Kind> Function()>();

  ffi.Pointer<ConstrainU32Kind> inflate_ConstrainU32_Ideal() {
    return _inflate_ConstrainU32_Ideal();
  }

  late final _inflate_ConstrainU32_IdealPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ConstrainU32Kind> Function()>>(
          'inflate_ConstrainU32_Ideal');
  late final _inflate_ConstrainU32_Ideal = _inflate_ConstrainU32_IdealPtr
      .asFunction<ffi.Pointer<ConstrainU32Kind> Function()>();

  ffi.Pointer<ConstrainU32Kind> inflate_ConstrainU32_Range() {
    return _inflate_ConstrainU32_Range();
  }

  late final _inflate_ConstrainU32_RangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ConstrainU32Kind> Function()>>(
          'inflate_ConstrainU32_Range');
  late final _inflate_ConstrainU32_Range = _inflate_ConstrainU32_RangePtr
      .asFunction<ffi.Pointer<ConstrainU32Kind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

abstract class MemoryOwner {
  static const int Rust = 0;
  static const int Dart = 1;
}

abstract class DartValue_Tag {
  static const int None = 0;
  static const int Ptr = 1;
  static const int Handle = 2;
  static const int String = 3;
  static const int Int = 4;
  static const int Float = 5;
  static const int Bool = 6;
}

class String_Body extends ffi.Struct {
  @DartValue_Tag1()
  external int tag;

  external ffi.Pointer<ffi.Char> _0;

  @MemoryOwner1()
  external int _1;
}

typedef DartValue_Tag1 = ffi.Uint8;
typedef MemoryOwner1 = ffi.Uint8;

class DartValue extends ffi.Union {
  @DartValue_Tag1()
  external int tag;

  external String_Body string;
}

class wire_ConnectionHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DartOpaque extends ffi.Struct {
  @ffi.Int64()
  external int port;

  @ffi.UintPtr()
  external int handle;
}

class wire_Jason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RoomHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaManagerHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ApiAudioTrackConstrs extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;
}

class wire_ApiConstrainFacingMode_Exact extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_ApiConstrainFacingMode_Ideal extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class ApiConstrainFacingModeKind extends ffi.Union {
  external ffi.Pointer<wire_ApiConstrainFacingMode_Exact> Exact;

  external ffi.Pointer<wire_ApiConstrainFacingMode_Ideal> Ideal;
}

class wire_ApiConstrainFacingMode extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ApiConstrainFacingModeKind> kind;
}

class wire_ApiOptionConstrainFacingMode_Some extends ffi.Struct {
  external ffi.Pointer<wire_ApiConstrainFacingMode> field0;
}

class wire_ApiOptionConstrainFacingMode_None extends ffi.Opaque {}

class ApiOptionConstrainFacingModeKind extends ffi.Union {
  external ffi.Pointer<wire_ApiOptionConstrainFacingMode_Some> Some;

  external ffi.Pointer<wire_ApiOptionConstrainFacingMode_None> None;
}

class wire_ApiOptionConstrainFacingMode extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ApiOptionConstrainFacingModeKind> kind;
}

class wire_ConstrainU32_Exact extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class wire_ConstrainU32_Ideal extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class wire_ConstrainU32_Range extends ffi.Struct {
  @ffi.Uint32()
  external int field0;

  @ffi.Uint32()
  external int field1;
}

class ConstrainU32Kind extends ffi.Union {
  external ffi.Pointer<wire_ConstrainU32_Exact> Exact;

  external ffi.Pointer<wire_ConstrainU32_Ideal> Ideal;

  external ffi.Pointer<wire_ConstrainU32_Range> Range;
}

class wire_ConstrainU32 extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ConstrainU32Kind> kind;
}

class wire_ApiOptionConstrainU32_Some extends ffi.Struct {
  external ffi.Pointer<wire_ConstrainU32> field0;
}

class wire_ApiOptionConstrainU32_None extends ffi.Opaque {}

class ApiOptionConstrainU32Kind extends ffi.Union {
  external ffi.Pointer<wire_ApiOptionConstrainU32_Some> Some;

  external ffi.Pointer<wire_ApiOptionConstrainU32_None> None;
}

class wire_ApiOptionConstrainU32 extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ApiOptionConstrainU32Kind> kind;
}

class wire_ApiDeviceVideoTrackConstrs extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_ApiOptionConstrainFacingMode> facing_mode;

  external ffi.Pointer<wire_ApiOptionConstrainU32> height;

  external ffi.Pointer<wire_ApiOptionConstrainU32> width;
}

class wire_ApiDisplayVideoTrackConstrs extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_ApiOptionConstrainU32> height;

  external ffi.Pointer<wire_ApiOptionConstrainU32> width;

  external ffi.Pointer<wire_ApiOptionConstrainU32> frame_rate;
}

class wire_ApiMediaStreamSettings extends ffi.Struct {
  external ffi.Pointer<wire_ApiAudioTrackConstrs> audio;

  external ffi.Pointer<wire_ApiDeviceVideoTrackConstrs> device_video;

  external ffi.Pointer<wire_ApiDisplayVideoTrackConstrs> display_video;
}

class wire_ReconnectHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RemoteMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartError = ffi.Pointer<ffi.Handle>;
typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
