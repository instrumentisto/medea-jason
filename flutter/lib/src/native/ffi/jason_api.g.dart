// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart';
import 'package:uuid/uuid.dart';

part 'jason_api.g.freezed.dart';

abstract class MedeaJason {
  /// Returns the [`ConnectionHandle`] from the [`ForeignClass`] address.
  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta;

  /// Sets a callback to be invoked once the provided `connection` is closed.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_close()`] errors.
  void connectionHandleOnClose(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta;

  /// Sets a callback to be invoked once a new [`remote::Track`] is added to the
  /// provided `connection`.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_remote_track_added()`] errors.
  ///
  /// [`remote::Track`]: media::track::remote::Track
  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta;

  /// Sets a callback to be invoked when a quality score of the provided
  /// `connection` is updated by a server.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::on_quality_score_update()`] errors.
  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta;

  /// Returns remote `Member` ID of the provided `connection`.
  ///
  /// # Errors
  ///
  /// If [`ConnectionHandle::get_remote_member_id()`] errors.
  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta;

  /// Enables inbound audio in the provided `connection`.
  Object connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in the provided `connection`.
  Object connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in the provided `connection`.
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  Object connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in the provided `connection`.
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  Object connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta;

  /// Sets the provided [`Dart_Handle`] as a callback for the Rust panic hook.
  void onPanic({required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOnPanicConstMeta;

  /// Instantiates a new [`Jason`] interface to interact with this library.
  Jason jasonNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta;

  /// Creates a new [`Room`] and returns its [`RoomHandle`].
  ///
  /// [`Room`]: room::Room
  RoomHandle jasonInitRoom({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta;

  /// Returns a [`MediaManagerHandle`].
  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonDispose({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta;

  /// Returns the [`LocalMediaTrack`] from the [`ForeignClass`] address.
  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta;

  /// Returns the [`Vec<RustOpaque<LocalMediaTrack>>`] from the [`ForeignClass`]
  /// address.
  List<LocalMediaTrack> vecLocalTracksFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of the
  /// provided [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta;

  /// Returns a [`MediaKind::Audio`] if the provided [`LocalMediaTrack`]
  /// represents an audio track, or a [`MediaKind::Video`] if it represents a
  /// video track.
  MediaKind localMediaTrackKind({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta;

  /// Sets callback to invoke when this [`LocalMediaTrack`] is ended.
  void localMediaTrackOnEnded(
      {required LocalMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackOnEndedConstMeta;

  /// Returns a [`media::MediaStreamTrackState::Live`] if this [`LocalMediaTrack`]
  /// is active, or a [`media::MediaStreamTrackState::Ended`] if it has ended.
  Object localMediaTrackState({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackStateConstMeta;

  /// Returns a [`MediaSourceKind::Device`] if the provided [`LocalMediaTrack`] is
  /// sourced from some device (webcam/microphone), or a
  /// [`MediaSourceKind::Display`] if it's captured via
  /// [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture/#dom-mediadevices-getdisplaymedia
  MediaSourceKind localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta;

  /// Frees the data behind the provided opaque local track.
  Object localMediaTrackFree({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFreeConstMeta;

  /// Returns the [`Vec<ApiMediaDeviceDetails>`] from the [`ForeignClass`]
  /// address.
  List<ApiMediaDeviceDetails> vecMediaDeviceDetailsFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceDetailsFromPtrConstMeta;

  /// Returns the [`Vec<RustOpaque<ApiMediaDisplayDetails>>`] from the
  /// [`ForeignClass`] address.
  List<ApiMediaDisplayDetails> vecMediaDisplayDetailsFromPtr(
      {required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayDetailsFromPtrConstMeta;

  /// Returns [`LocalMediaTrack`]s objects, built from the provided
  /// [`ApiMediaStreamSettings`].
  Object mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required ApiMediaStreamSettings caps,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta;

  /// Returns a list of [`ApiMediaDeviceDetails`] objects representing available
  /// media input and devices, such as microphones, cameras, and so forth.
  Object mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta;

  /// Returns a list of [`ApiMediaDisplayDetails`] objects representing available
  /// sources that can be used for screen capturing.
  Object mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta;

  /// Switches the current output audio device to the device with the provided
  /// `device_id`.
  Object mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta;

  /// Sets the microphone volume level in percents.
  Object mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta;

  /// Indicates whether it's possible to access microphone volume settings.
  Object mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta;

  /// Returns the current microphone volume level in percents.
  Object mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta;

  /// Subscribes onto the [`MediaManagerHandle`]'s `devicechange` event.
  /// Sets an ideal [frameRate][1] constraint.
  ///
  /// # Errors
  ///
  /// If [`MediaManagerHandle::on_device_change()`] errors.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaManagerHandleOnDeviceChangeConstMeta;

  /// Returns the [`ReconnectHandle`] from the [`ForeignClass`] address.
  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta;

  /// Tries to reconnect a [`Room`] after the provided delay in milliseconds.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here.
  ///
  /// [`Room`]: room::Room
  Object reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta;

  /// Tries to reconnect a [`Room`] in a loop with a growing backoff delay.
  ///
  /// The first attempt will be performed immediately, and the second attempt will
  /// be performed after `starting_delay_ms`.
  ///
  /// Delay between reconnection attempts won't be greater than
  /// `max_delay_ms`.
  ///
  /// After each reconnection attempt, delay between reconnections will be
  /// multiplied by the given `multiplier` until it reaches `max_delay_ms`.
  ///
  /// If `multiplier` is a negative number then it will be considered as `0.0`.
  /// This might cause a busy loop, so it's not recommended.
  ///
  /// Max elapsed time can be limited with an optional `max_elapsed_time_ms`
  /// argument.
  ///
  /// If the [`Room`] is already reconnecting then new reconnection attempt won't
  /// be performed. Instead, it will wait for the first reconnection attempt
  /// result and use it here.
  ///
  /// [`Room`]: room::Room
  Object reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta;

  /// Returns the [`RemoteMediaTrack`] from the [`ForeignClass`] address.
  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta;

  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`RemoteMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  Object remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta;

  /// Sets callback to invoke when this [`RemoteMediaTrack`] is muted.
  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta;

  /// Sets callback to invoke when this [`RemoteMediaTrack`] is unmuted.
  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta;

  /// Sets callback to invoke when this [`RemoteMediaTrack`] is stopped.
  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta;

  /// Sets callback to invoke whenever this [`RemoteMediaTrack`]'s general
  /// [`MediaDirection`] is changed.
  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta;

  /// Indicate whether this [`RemoteMediaTrack`] is muted.
  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta;

  /// Returns this [`RemoteMediaTrack`]'s kind (audio/video).
  MediaKind remoteMediaTrackKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta;

  /// Returns this [`RemoteMediaTrack`]'s media source kind.
  MediaSourceKind remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaSourceKindConstMeta;

  /// Returns the current general [`MediaDirection`] of this [`RemoteMediaTrack`].
  MediaDirection remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta;

  /// Returns the [`RoomCloseReason`] from the [`ForeignClass`] address.
  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta;

  /// Connects to a media server and joins the [`Room`] with the provided
  /// authorization `token`.
  ///
  /// Authorization token has a fixed format:
  /// `{{ Host URL }}/{{ Room ID }}/{{ Member ID }}?token={{ Auth Token }}`
  /// (e.g. `wss://medea.com/MyConf1/Alice?token=777`).
  ///
  /// [`Room`]: room::Room
  Object roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta;

  /// Updates this [`Room`]'s [`ApiMediaStreamSettings`]. This affects all the
  /// [`PeerConnection`]s in this [`Room`]. If [`ApiMediaStreamSettings`] are
  /// configured for some [`Room`], then this [`Room`] can only send media tracks
  /// that correspond to these settings. [`ApiMediaStreamSettings`] update will
  /// change media tracks in all sending peers, so that might cause a new
  /// [getUserMedia()][1] request to happen.
  ///
  /// Media obtaining/injection errors are additionally fired to
  /// `on_failed_local_media` callback.
  ///
  /// If `stop_first` set to `true` then affected local `Tracks` will be
  /// dropped before new [`ApiMediaStreamSettings`] are applied. This is usually
  /// required when changing video source device due to hardware limitations,
  /// e.g. having an active track sourced from device `A` may hinder
  /// [getUserMedia()][1] requests to device `B`.
  ///
  /// `rollback_on_fail` option configures [`ApiMediaStreamSettings`] update
  /// request to automatically rollback to previous settings if new settings
  /// cannot be applied.
  ///
  /// If recovering from fail state isn't possible then affected media types will
  /// be disabled.
  ///
  /// [`Room`]: room::Room
  /// [`PeerConnection`]: crate::peer::PeerConnection
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadevices-getusermedia
  Object roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required ApiMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleSetLocalMediaSettingsConstMeta;

  /// Mutes outbound audio in the provided [`Room`].
  ///
  /// [`Room`]: room::Room
  Object roomHandleMuteAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta;

  /// Unmutes outbound audio in the provided [`Room`].
  ///
  /// [`Room`]: room::Room
  Object roomHandleUnmuteAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta;

  /// Enables outbound audio in the provided [`Room`].
  ///
  /// [`Room`]: room::Room
  Object roomHandleEnableAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta;

  /// Disables outbound audio in the provided [`Room`].
  ///
  /// [`Room`]: room::Room
  Object roomHandleDisableAudio({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta;

  /// Mutes outbound video in the provided [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not a [`MediaSourceKind`] index.
  ///
  /// [`Room`]: room::Room
  Object roomHandleMuteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta;

  /// Unmutes outbound video in the provided [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not a [`MediaSourceKind`] index.
  ///
  /// [`Room`]: room::Room
  Object roomHandleUnmuteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta;

  /// Enables outbound video in the provided [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  ///
  /// [`Room`]: room::Room
  Object roomHandleEnableVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta;

  /// Disables outbound video in the provided [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  ///
  /// [`Room`]: room::Room
  Object roomHandleDisableVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta;

  /// Enables inbound audio in the provided [`Room`].
  ///
  /// [`Room`]: room::Room
  Object roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in the provided [`Room`].
  ///
  /// [`Room`]: room::Room
  Object roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in the provided [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  ///
  /// [`Room`]: room::Room
  Object roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in the provided [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// # Errors
  ///
  /// If `source_kind` is not [`MediaSourceKind`] index.
  ///
  /// [`Room`]: room::Room
  Object roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta;

  /// Sets a callback to be invoked once a new [`Connection`] with some remote
  /// `Peer` is established.
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_new_connection()`] errors.
  ///
  /// [`Connection`]: connection::Connection
  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta;

  /// Sets a callback to be invoked once the provided [`Room`] is closed,
  /// providing a [`RoomCloseReason`].
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_close()`] errors.
  ///
  /// [`Room`]: room::Room
  void roomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta;

  /// Sets a callback to be invoked when a new [`LocalMediaTrack`] is added to
  /// the provided [`Room`].
  ///
  /// This might happen in such cases:
  /// 1. Media server initiates a media request.
  /// 2. `enable_audio`/`enable_video` is called.
  /// 3. [`MediaStreamSettings`] updated via `set_local_media_settings`.
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_local_track()`] errors.
  ///
  /// [`MediaStreamSettings`]: media::MediaStreamSettings
  /// [`Room`]: room::Room
  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta;

  /// Sets a callback to be invoked once a connection with server is lost.
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_connection_loss()`] errors.
  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta;

  /// Sets a callback to be invoked on local media acquisition failures.
  ///
  /// # Errors
  ///
  /// If [`RoomHandle::on_failed_local_media()`] errors.
  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta;

  DropFnType get dropOpaqueConnectionHandle;
  ShareFnType get shareOpaqueConnectionHandle;
  OpaqueTypeFinalizer get ConnectionHandleFinalizer;

  DropFnType get dropOpaqueJason;
  ShareFnType get shareOpaqueJason;
  OpaqueTypeFinalizer get JasonFinalizer;

  DropFnType get dropOpaqueLocalMediaTrack;
  ShareFnType get shareOpaqueLocalMediaTrack;
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer;

  DropFnType get dropOpaqueMediaManagerHandle;
  ShareFnType get shareOpaqueMediaManagerHandle;
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer;

  DropFnType get dropOpaqueReconnectHandle;
  ShareFnType get shareOpaqueReconnectHandle;
  OpaqueTypeFinalizer get ReconnectHandleFinalizer;

  DropFnType get dropOpaqueRemoteMediaTrack;
  ShareFnType get shareOpaqueRemoteMediaTrack;
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer;

  DropFnType get dropOpaqueRoomHandle;
  ShareFnType get shareOpaqueRoomHandle;
  OpaqueTypeFinalizer get RoomHandleFinalizer;
}

@sealed
class ConnectionHandle extends FrbOpaque {
  final MedeaJason bridge;
  ConnectionHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueConnectionHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueConnectionHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ConnectionHandleFinalizer;
}

@sealed
class Jason extends FrbOpaque {
  final MedeaJason bridge;
  Jason.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueJason;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueJason;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.JasonFinalizer;
}

@sealed
class LocalMediaTrack extends FrbOpaque {
  final MedeaJason bridge;
  LocalMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueLocalMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueLocalMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.LocalMediaTrackFinalizer;
}

@sealed
class MediaManagerHandle extends FrbOpaque {
  final MedeaJason bridge;
  MediaManagerHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMediaManagerHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMediaManagerHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MediaManagerHandleFinalizer;
}

@sealed
class ReconnectHandle extends FrbOpaque {
  final MedeaJason bridge;
  ReconnectHandle.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueReconnectHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueReconnectHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ReconnectHandleFinalizer;
}

@sealed
class RemoteMediaTrack extends FrbOpaque {
  final MedeaJason bridge;
  RemoteMediaTrack.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRemoteMediaTrack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRemoteMediaTrack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RemoteMediaTrackFinalizer;
}

@sealed
class RoomHandle extends FrbOpaque {
  final MedeaJason bridge;
  RoomHandle.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRoomHandle;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRoomHandle;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RoomHandleFinalizer;
}

/// Constraints applicable to audio tracks.
class ApiAudioConstraints {
  /// Identifier of the device generating the content for the media track.
  String? deviceId;

  ApiAudioConstraints({
    this.deviceId,
  });
}

@freezed
class ApiConstrainFacingMode with _$ApiConstrainFacingMode {
  /// Exact value required for this property.
  const factory ApiConstrainFacingMode.exact(
    FacingMode field0,
  ) = ApiConstrainFacingMode_Exact;

  /// Ideal (target) value for this property.
  const factory ApiConstrainFacingMode.ideal(
    FacingMode field0,
  ) = ApiConstrainFacingMode_Ideal;
}

/// Constraints applicable to video tracks that are sourced from some media
/// device.
class ApiDeviceVideoTrackConstraints {
  /// Identifier of the device generating the content for the media track.
  String? deviceId;

  /// Describes the directions that the camera can face, as seen from the
  /// user's perspective.
  ApiConstrainFacingMode? facingMode;

  /// Height of the video in pixels.
  ConstrainU32? height;

  /// Width of the video in pixels.
  ConstrainU32? width;

  ApiDeviceVideoTrackConstraints({
    this.deviceId,
    this.facingMode,
    this.height,
    this.width,
  });
}

/// Constraints applicable to video tracks sourced from a screen capturing.
class ApiDisplayVideoTrackConstraints {
  /// Identifier of the device generating the content for the media track.
  String? deviceId;

  /// [Height][1] of the video in pixels.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-height
  ConstrainU32? height;

  /// [Width][1] of the video in pixels.
  ///
  /// [1]: https://tinyurl.com/w3-streams#def-constraint-width
  ConstrainU32? width;

  /// [Frame rate][1] of the video.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dfn-framerate
  ConstrainU32? frameRate;

  ApiDisplayVideoTrackConstraints({
    this.deviceId,
    this.height,
    this.width,
    this.frameRate,
  });
}

/// Representation of a [MediaDeviceInfo][0] ONLY for input devices.
///
/// [0]: https://w3.org/TR/mediacapture-streams#device-info
class ApiMediaDeviceDetails {
  /// [`MediaDeviceKind`] of this [`ApiMediaDeviceDetails`].
  ///
  /// [`MediaDeviceKind`]: media::MediaDeviceKind
  final MediaDeviceKind kind;

  /// Unique identifier of the device represented by this
  /// [`ApiMediaDeviceDetails`].
  final String deviceId;

  /// Label describing the device represented by this
  /// [`ApiMediaDeviceDetails`] (for example, "External USB Webcam").
  final String label;

  /// Group identifier of the device represented by this
  /// [`ApiMediaDeviceDetails`].
  ///
  /// Two devices have the same group identifier if they belong to the same
  /// physical device. For example, the audio input and output devices
  /// representing the speaker and microphone of the same headset have the
  /// same [groupId][1].
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadeviceinfo-groupid
  final String? groupId;

  /// Indicates whether the last attempt to use the provided device failed.
  final bool isFailed;

  const ApiMediaDeviceDetails({
    required this.kind,
    required this.deviceId,
    required this.label,
    this.groupId,
    required this.isFailed,
  });
}

/// Representation of a display source.
class ApiMediaDisplayDetails {
  /// Unique identifier of the display represented by this
  /// [`ApiMediaDisplayDetails`].
  final String deviceId;

  /// Title describing the represented display.
  final String? title;

  const ApiMediaDisplayDetails({
    required this.deviceId,
    this.title,
  });
}

/// [MediaStreamConstraints][1] wrapper.
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
class ApiMediaStreamSettings {
  /// [MediaStreamConstraints][1] for the audio media type.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
  ApiAudioConstraints? audio;

  /// [MediaStreamConstraints][1] for the device video media type.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
  ApiDeviceVideoTrackConstraints? deviceVideo;

  /// [MediaStreamConstraints][1] for the display video media type.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamconstraints
  ApiDisplayVideoTrackConstraints? displayVideo;

  ApiMediaStreamSettings({
    this.audio,
    this.deviceVideo,
    this.displayVideo,
  });
}

@freezed
class ConstrainU32 with _$ConstrainU32 {
  /// Must be the parameter's value.
  const factory ConstrainU32.exact(
    int field0,
  ) = ConstrainU32_Exact;

  /// Should be used if possible.
  const factory ConstrainU32.ideal(
    int field0,
  ) = ConstrainU32_Ideal;

  /// Parameter's value must be in this range.
  const factory ConstrainU32.range(
    int field0,
    int field1,
  ) = ConstrainU32_Range;
}

/// Describes directions that a camera can face, as seen from a user's
/// perspective.
///
/// Representation of a [VideoFacingModeEnum][1].
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-videofacingmodeenum
enum FacingMode {
  /// Facing towards a user (a self-view camera).
  user,

  /// Facing away from a user (viewing an environment).
  environment,

  /// Facing to the left of a user.
  left,

  /// Facing to the right of a user.
  right,
}

/// [MediaDeviceInfo.kind][1] representation.
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadeviceinfo-kind
enum MediaDeviceKind {
  /// Audio input device (for example, a microphone).
  audioInput,

  /// Video input device (for example, a webcam).
  videoInput,

  /// Audio output device (for example, a pair of headphones).
  audioOutput,
}

/// Media exchange direction of a [`Track`].
enum MediaDirection {
  /// [`Track`] is enabled on both receiver and sender sides.
  sendRecv,

  /// [`Track`] is enabled on sender side only.
  sendOnly,

  /// [`Track`] is enabled on receiver side only.
  recvOnly,

  /// [`Track`] is disabled on both sides.
  inactive,
}

/// [MediaStreamTrack.kind][1] representation.
///
/// [1]: https://w3.org/TR/mediacapture-streams#dom-mediastreamtrack-kind
enum MediaKind {
  /// Audio track.
  audio,

  /// Video track.
  video,
}

/// Media source type.
enum MediaSourceKind {
  /// Media is sourced from some media device (webcam or microphone).
  device,

  /// Media is obtained with screen-capture.
  display,
}

/// Reason of why [`Room`] has been closed.
///
/// This struct is passed into [`RoomHandle::on_close`] callback.
class RoomCloseReason {
  /// Indicator if [`Room`] is closed by server.
  ///
  /// `true` if [`CloseReason::ByServer`].
  final bool isClosedByServer;

  /// Reason of closing.
  final String reason;

  /// Indicator if closing is considered as error.
  ///
  /// This field may be `true` only on closing by client.
  final bool isErr;

  const RoomCloseReason({
    required this.isClosedByServer,
    required this.reason,
    required this.isErr,
  });
}

class MedeaJasonImpl implements MedeaJason {
  final MedeaJasonPlatform _platform;
  factory MedeaJasonImpl(ExternalLibrary dylib) =>
      MedeaJasonImpl.raw(MedeaJasonPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MedeaJasonImpl.wasm(FutureOr<WasmModule> module) =>
      MedeaJasonImpl(module as ExternalLibrary);
  MedeaJasonImpl.raw(this._platform);
  ConnectionHandle connectionHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_connection_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_ConnectionHandle,
      constMeta: kConnectionHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_from_ptr",
        argNames: ["ptr"],
      );

  void connectionHandleOnClose(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectionHandleOnCloseConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectionHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connection_handle_on_close",
        argNames: ["connection", "f"],
      );

  void connectionHandleOnRemoteTrackAdded(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_remote_track_added(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectionHandleOnRemoteTrackAddedConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnRemoteTrackAddedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_remote_track_added",
            argNames: ["connection", "f"],
          );

  void connectionHandleOnQualityScoreUpdate(
      {required ConnectionHandle connection, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_on_quality_score_update(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectionHandleOnQualityScoreUpdateConstMeta,
      argValues: [connection, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleOnQualityScoreUpdateConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_on_quality_score_update",
            argNames: ["connection", "f"],
          );

  String connectionHandleGetRemoteMemberId(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_get_remote_member_id(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kConnectionHandleGetRemoteMemberIdConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleGetRemoteMemberIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_get_remote_member_id",
            argNames: ["connection"],
          );

  Object connectionHandleEnableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleEnableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_audio",
            argNames: ["connection"],
          );

  Object connectionHandleDisableRemoteAudio(
      {required ConnectionHandle connection, dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_connection_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleDisableRemoteAudioConstMeta,
      argValues: [connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteAudioConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_audio",
            argNames: ["connection"],
          );

  Object connectionHandleEnableRemoteVideo(
      {required ConnectionHandle connection,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleEnableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleEnableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_enable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  Object connectionHandleDisableRemoteVideo(
      {required ConnectionHandle connection,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ConnectionHandle(connection);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_connection_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kConnectionHandleDisableRemoteVideoConstMeta,
      argValues: [connection, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectionHandleDisableRemoteVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connection_handle_disable_remote_video",
            argNames: ["connection", "sourceKind"],
          );

  void onPanic({required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_on_panic(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kOnPanicConstMeta,
      argValues: [cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOnPanicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "on_panic",
        argNames: ["cb"],
      );

  Jason jasonNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_new(),
      parseSuccessData: _wire2api_Jason,
      constMeta: kJasonNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_new",
        argNames: [],
      );

  RoomHandle jasonInitRoom({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_init_room(arg0),
      parseSuccessData: _wire2api_RoomHandle,
      constMeta: kJasonInitRoomConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_init_room",
        argNames: ["jason"],
      );

  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_media_manager(arg0),
      parseSuccessData: _wire2api_MediaManagerHandle,
      constMeta: kJasonMediaManagerConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_media_manager",
        argNames: ["jason"],
      );

  void jasonCloseRoom(
      {required Jason jason, required RoomHandle roomToDelete, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    var arg1 = _platform.api2wire_RoomHandle(roomToDelete);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_close_room(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kJasonCloseRoomConstMeta,
      argValues: [jason, roomToDelete],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_close_room",
        argNames: ["jason", "roomToDelete"],
      );

  void jasonDispose({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_dispose(arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kJasonDisposeConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonDisposeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_dispose",
        argNames: ["jason"],
      );

  LocalMediaTrack localMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_LocalMediaTrack,
      constMeta: kLocalMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_from_ptr",
        argNames: ["ptr"],
      );

  List<LocalMediaTrack> vecLocalTracksFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_vec_local_tracks_from_ptr(arg0),
      parseSuccessData: _wire2api_list_LocalMediaTrack,
      constMeta: kVecLocalTracksFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecLocalTracksFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_local_tracks_from_ptr",
        argNames: ["ptr"],
      );

  Object localMediaTrackGetTrack(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_get_track(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kLocalMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_get_track",
        argNames: ["track"],
      );

  MediaKind localMediaTrackKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_kind(arg0),
      parseSuccessData: _wire2api_media_kind,
      constMeta: kLocalMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_kind",
        argNames: ["track"],
      );

  void localMediaTrackOnEnded(
      {required LocalMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_local_media_track_on_ended(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kLocalMediaTrackOnEndedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackOnEndedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_on_ended",
        argNames: ["track", "f"],
      );

  Object localMediaTrackState({required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_state(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kLocalMediaTrackStateConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_state",
        argNames: ["track"],
      );

  MediaSourceKind localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_local_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_media_source_kind,
      constMeta: kLocalMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_media_source_kind",
        argNames: ["track"],
      );

  Object localMediaTrackFree({required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_free(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kLocalMediaTrackFreeConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackFreeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_free",
        argNames: ["track"],
      );

  List<ApiMediaDeviceDetails> vecMediaDeviceDetailsFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_vec_media_device_details_from_ptr(arg0),
      parseSuccessData: _wire2api_list_api_media_device_details,
      constMeta: kVecMediaDeviceDetailsFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDeviceDetailsFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_device_details_from_ptr",
        argNames: ["ptr"],
      );

  List<ApiMediaDisplayDetails> vecMediaDisplayDetailsFromPtr(
      {required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_vec_media_display_details_from_ptr(arg0),
      parseSuccessData: _wire2api_list_api_media_display_details,
      constMeta: kVecMediaDisplayDetailsFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVecMediaDisplayDetailsFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vec_media_display_details_from_ptr",
        argNames: ["ptr"],
      );

  Object mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required ApiMediaStreamSettings caps,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_box_autoadd_api_media_stream_settings(caps);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_init_local_tracks(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleInitLocalTracksConstMeta,
      argValues: [manager, caps],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_init_local_tracks",
            argNames: ["manager", "caps"],
          );

  Object mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_devices(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleEnumerateDevicesConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_devices",
            argNames: ["manager"],
          );

  Object mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_displays(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleEnumerateDisplaysConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_displays",
            argNames: ["manager"],
          );

  Object mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_output_audio_id(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleSetOutputAudioIdConstMeta,
      argValues: [manager, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_output_audio_id",
            argNames: ["manager", "deviceId"],
          );

  Object mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_i64(level);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_microphone_volume(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleSetMicrophoneVolumeConstMeta,
      argValues: [manager, level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_microphone_volume",
            argNames: ["manager", "level"],
          );

  Object mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_microphone_volume_is_available(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume_is_available",
            argNames: ["manager"],
          );

  Object mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_microphone_volume(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kMediaManagerHandleMicrophoneVolumeConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume",
            argNames: ["manager"],
          );

  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_on_device_change(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediaManagerHandleOnDeviceChangeConstMeta,
      argValues: [manager, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleOnDeviceChangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_on_device_change",
            argNames: ["manager", "cb"],
          );

  ReconnectHandle reconnectHandleFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_reconnect_handle_from_ptr(arg0),
      parseSuccessData: _wire2api_ReconnectHandle,
      constMeta: kReconnectHandleFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReconnectHandleFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reconnect_handle_from_ptr",
        argNames: ["ptr"],
      );

  Object reconnectHandleReconnectWithDelay(
      {required ReconnectHandle reconnectHandle,
      required int delayMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = api2wire_u32(delayMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_delay(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kReconnectHandleReconnectWithDelayConstMeta,
      argValues: [reconnectHandle, delayMs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithDelayConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_delay",
            argNames: ["reconnectHandle", "delayMs"],
          );

  Object reconnectHandleReconnectWithBackoff(
      {required ReconnectHandle reconnectHandle,
      required int startingDelay,
      required double multiplier,
      required int maxDelay,
      int? maxElapsedTimeMs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ReconnectHandle(reconnectHandle);
    var arg1 = api2wire_u32(startingDelay);
    var arg2 = api2wire_f64(multiplier);
    var arg3 = api2wire_u32(maxDelay);
    var arg4 = _platform.api2wire_opt_box_autoadd_u32(maxElapsedTimeMs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_reconnect_handle_reconnect_with_backoff(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kReconnectHandleReconnectWithBackoffConstMeta,
      argValues: [
        reconnectHandle,
        startingDelay,
        multiplier,
        maxDelay,
        maxElapsedTimeMs
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReconnectHandleReconnectWithBackoffConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reconnect_handle_reconnect_with_backoff",
            argNames: [
              "reconnectHandle",
              "startingDelay",
              "multiplier",
              "maxDelay",
              "maxElapsedTimeMs"
            ],
          );

  RemoteMediaTrack remoteMediaTrackFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_from_ptr(arg0),
      parseSuccessData: _wire2api_RemoteMediaTrack,
      constMeta: kRemoteMediaTrackFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_from_ptr",
        argNames: ["ptr"],
      );

  Object remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_get_track(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRemoteMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_get_track",
        argNames: ["track"],
      );

  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_muted(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnMutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_muted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_unmuted(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnUnmutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_unmuted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_stopped(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnStoppedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_stopped",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track, required Object f, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_DartOpaque(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_remote_media_track_on_media_direction_changed(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoteMediaTrackOnMediaDirectionChangedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_on_media_direction_changed",
            argNames: ["track", "f"],
          );

  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_muted(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kRemoteMediaTrackMutedConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_muted",
        argNames: ["track"],
      );

  MediaKind remoteMediaTrackKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_kind(arg0),
      parseSuccessData: _wire2api_media_kind,
      constMeta: kRemoteMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_kind",
        argNames: ["track"],
      );

  MediaSourceKind remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_media_source_kind,
      constMeta: kRemoteMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackMediaSourceKindConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_media_source_kind",
            argNames: ["track"],
          );

  MediaDirection remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_direction(arg0),
      parseSuccessData: _wire2api_media_direction,
      constMeta: kRemoteMediaTrackMediaDirectionConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_media_direction",
        argNames: ["track"],
      );

  RoomCloseReason roomCloseReasonFromPtr({required int ptr, dynamic hint}) {
    var arg0 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_close_reason_from_ptr(arg0),
      parseSuccessData: _wire2api_room_close_reason,
      constMeta: kRoomCloseReasonFromPtrConstMeta,
      argValues: [ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomCloseReasonFromPtrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_close_reason_from_ptr",
        argNames: ["ptr"],
      );

  Object roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_String(token);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_join(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleJoinConstMeta,
      argValues: [roomHandle, token],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_join",
        argNames: ["roomHandle", "token"],
      );

  Object roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required ApiMediaStreamSettings settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 =
        _platform.api2wire_box_autoadd_api_media_stream_settings(settings);
    var arg2 = stopFirst;
    var arg3 = rollbackOnFail;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_room_handle_set_local_media_settings(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleSetLocalMediaSettingsConstMeta,
      argValues: [roomHandle, settings, stopFirst, rollbackOnFail],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomHandleSetLocalMediaSettingsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_handle_set_local_media_settings",
            argNames: ["roomHandle", "settings", "stopFirst", "rollbackOnFail"],
          );

  Object roomHandleMuteAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleMuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleUnmuteAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleUnmuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleEnableAudio({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleMuteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleMuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleUnmuteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleUnmuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleEnableVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleDisableVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_audio",
        argNames: ["roomHandle"],
      );

  Object roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleEnableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  Object roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle,
      MediaSourceKind? sourceKind,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_media_source_kind(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_DartOpaque,
      constMeta: kRoomHandleDisableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_new_connection(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnNewConnectionConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_new_connection",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnClose(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnCloseConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_close",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_local_track(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnLocalTrackConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_local_track",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_connection_loss(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnConnectionLossConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_connection_loss",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required Object cb, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_DartOpaque(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_failed_local_media(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRoomHandleOnFailedLocalMediaConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_failed_local_media",
        argNames: ["roomHandle", "cb"],
      );

  DropFnType get dropOpaqueConnectionHandle =>
      _platform.inner.drop_opaque_ConnectionHandle;
  ShareFnType get shareOpaqueConnectionHandle =>
      _platform.inner.share_opaque_ConnectionHandle;
  OpaqueTypeFinalizer get ConnectionHandleFinalizer =>
      _platform.ConnectionHandleFinalizer;

  DropFnType get dropOpaqueJason => _platform.inner.drop_opaque_Jason;
  ShareFnType get shareOpaqueJason => _platform.inner.share_opaque_Jason;
  OpaqueTypeFinalizer get JasonFinalizer => _platform.JasonFinalizer;

  DropFnType get dropOpaqueLocalMediaTrack =>
      _platform.inner.drop_opaque_LocalMediaTrack;
  ShareFnType get shareOpaqueLocalMediaTrack =>
      _platform.inner.share_opaque_LocalMediaTrack;
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer =>
      _platform.LocalMediaTrackFinalizer;

  DropFnType get dropOpaqueMediaManagerHandle =>
      _platform.inner.drop_opaque_MediaManagerHandle;
  ShareFnType get shareOpaqueMediaManagerHandle =>
      _platform.inner.share_opaque_MediaManagerHandle;
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer =>
      _platform.MediaManagerHandleFinalizer;

  DropFnType get dropOpaqueReconnectHandle =>
      _platform.inner.drop_opaque_ReconnectHandle;
  ShareFnType get shareOpaqueReconnectHandle =>
      _platform.inner.share_opaque_ReconnectHandle;
  OpaqueTypeFinalizer get ReconnectHandleFinalizer =>
      _platform.ReconnectHandleFinalizer;

  DropFnType get dropOpaqueRemoteMediaTrack =>
      _platform.inner.drop_opaque_RemoteMediaTrack;
  ShareFnType get shareOpaqueRemoteMediaTrack =>
      _platform.inner.share_opaque_RemoteMediaTrack;
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer =>
      _platform.RemoteMediaTrackFinalizer;

  DropFnType get dropOpaqueRoomHandle => _platform.inner.drop_opaque_RoomHandle;
  ShareFnType get shareOpaqueRoomHandle =>
      _platform.inner.share_opaque_RoomHandle;
  OpaqueTypeFinalizer get RoomHandleFinalizer => _platform.RoomHandleFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ConnectionHandle _wire2api_ConnectionHandle(dynamic raw) {
    return ConnectionHandle.fromRaw(raw[0], raw[1], this);
  }

  Object _wire2api_DartOpaque(dynamic raw) {
    return _platform.inner.get_dart_object(raw);
  }

  Jason _wire2api_Jason(dynamic raw) {
    return Jason.fromRaw(raw[0], raw[1], this);
  }

  LocalMediaTrack _wire2api_LocalMediaTrack(dynamic raw) {
    return LocalMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  MediaManagerHandle _wire2api_MediaManagerHandle(dynamic raw) {
    return MediaManagerHandle.fromRaw(raw[0], raw[1], this);
  }

  ReconnectHandle _wire2api_ReconnectHandle(dynamic raw) {
    return ReconnectHandle.fromRaw(raw[0], raw[1], this);
  }

  RemoteMediaTrack _wire2api_RemoteMediaTrack(dynamic raw) {
    return RemoteMediaTrack.fromRaw(raw[0], raw[1], this);
  }

  RoomHandle _wire2api_RoomHandle(dynamic raw) {
    return RoomHandle.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  ApiMediaDeviceDetails _wire2api_api_media_device_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiMediaDeviceDetails(
      kind: _wire2api_media_device_kind(arr[0]),
      deviceId: _wire2api_String(arr[1]),
      label: _wire2api_String(arr[2]),
      groupId: _wire2api_opt_String(arr[3]),
      isFailed: _wire2api_bool(arr[4]),
    );
  }

  ApiMediaDisplayDetails _wire2api_api_media_display_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiMediaDisplayDetails(
      deviceId: _wire2api_String(arr[0]),
      title: _wire2api_opt_String(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<LocalMediaTrack> _wire2api_list_LocalMediaTrack(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_LocalMediaTrack).toList();
  }

  List<ApiMediaDeviceDetails> _wire2api_list_api_media_device_details(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_api_media_device_details)
        .toList();
  }

  List<ApiMediaDisplayDetails> _wire2api_list_api_media_display_details(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_api_media_display_details)
        .toList();
  }

  MediaDeviceKind _wire2api_media_device_kind(dynamic raw) {
    return MediaDeviceKind.values[raw as int];
  }

  MediaDirection _wire2api_media_direction(dynamic raw) {
    return MediaDirection.values[raw as int];
  }

  MediaKind _wire2api_media_kind(dynamic raw) {
    return MediaKind.values[raw as int];
  }

  MediaSourceKind _wire2api_media_source_kind(dynamic raw) {
    return MediaSourceKind.values[raw as int];
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  RoomCloseReason _wire2api_room_close_reason(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RoomCloseReason(
      isClosedByServer: _wire2api_bool(arr[0]),
      reason: _wire2api_String(arr[1]),
      isErr: _wire2api_bool(arr[2]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_facing_mode(FacingMode raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_media_source_kind(MediaSourceKind raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class MedeaJasonPlatform extends FlutterRustBridgeBase<MedeaJasonWire> {
  MedeaJasonPlatform(ffi.DynamicLibrary dylib) : super(MedeaJasonWire(dylib));

// Section: api2wire

  @protected
  wire_ConnectionHandle api2wire_ConnectionHandle(ConnectionHandle raw) {
    final ptr = inner.new_ConnectionHandle();
    _api_fill_to_wire_ConnectionHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_DartOpaque api2wire_DartOpaque(Object raw) {
    inner.dartApi.initApi();
    final ptr = inner.new_DartOpaque();
    _api_fill_to_wire_DartOpaque(raw, ptr);
    return ptr;
  }

  @protected
  wire_Jason api2wire_Jason(Jason raw) {
    final ptr = inner.new_Jason();
    _api_fill_to_wire_Jason(raw, ptr);
    return ptr;
  }

  @protected
  wire_LocalMediaTrack api2wire_LocalMediaTrack(LocalMediaTrack raw) {
    final ptr = inner.new_LocalMediaTrack();
    _api_fill_to_wire_LocalMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_MediaManagerHandle api2wire_MediaManagerHandle(MediaManagerHandle raw) {
    final ptr = inner.new_MediaManagerHandle();
    _api_fill_to_wire_MediaManagerHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_ReconnectHandle api2wire_ReconnectHandle(ReconnectHandle raw) {
    final ptr = inner.new_ReconnectHandle();
    _api_fill_to_wire_ReconnectHandle(raw, ptr);
    return ptr;
  }

  @protected
  wire_RemoteMediaTrack api2wire_RemoteMediaTrack(RemoteMediaTrack raw) {
    final ptr = inner.new_RemoteMediaTrack();
    _api_fill_to_wire_RemoteMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  wire_RoomHandle api2wire_RoomHandle(RoomHandle raw) {
    final ptr = inner.new_RoomHandle();
    _api_fill_to_wire_RoomHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_ApiAudioConstraints>
      api2wire_box_autoadd_api_audio_constraints(ApiAudioConstraints raw) {
    final ptr = inner.new_box_autoadd_api_audio_constraints_0();
    _api_fill_to_wire_api_audio_constraints(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiConstrainFacingMode>
      api2wire_box_autoadd_api_constrain_facing_mode(
          ApiConstrainFacingMode raw) {
    final ptr = inner.new_box_autoadd_api_constrain_facing_mode_0();
    _api_fill_to_wire_api_constrain_facing_mode(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiDeviceVideoTrackConstraints>
      api2wire_box_autoadd_api_device_video_track_constraints(
          ApiDeviceVideoTrackConstraints raw) {
    final ptr = inner.new_box_autoadd_api_device_video_track_constraints_0();
    _api_fill_to_wire_api_device_video_track_constraints(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiDisplayVideoTrackConstraints>
      api2wire_box_autoadd_api_display_video_track_constraints(
          ApiDisplayVideoTrackConstraints raw) {
    final ptr = inner.new_box_autoadd_api_display_video_track_constraints_0();
    _api_fill_to_wire_api_display_video_track_constraints(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApiMediaStreamSettings>
      api2wire_box_autoadd_api_media_stream_settings(
          ApiMediaStreamSettings raw) {
    final ptr = inner.new_box_autoadd_api_media_stream_settings_0();
    _api_fill_to_wire_api_media_stream_settings(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConstrainU32> api2wire_box_autoadd_constrain_u_32(
      ConstrainU32 raw) {
    final ptr = inner.new_box_autoadd_constrain_u_32_0();
    _api_fill_to_wire_constrain_u_32(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_media_source_kind(
      MediaSourceKind raw) {
    return inner
        .new_box_autoadd_media_source_kind_0(api2wire_media_source_kind(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_ApiAudioConstraints>
      api2wire_opt_box_autoadd_api_audio_constraints(ApiAudioConstraints? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_api_audio_constraints(raw);
  }

  @protected
  ffi.Pointer<wire_ApiConstrainFacingMode>
      api2wire_opt_box_autoadd_api_constrain_facing_mode(
          ApiConstrainFacingMode? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_api_constrain_facing_mode(raw);
  }

  @protected
  ffi.Pointer<wire_ApiDeviceVideoTrackConstraints>
      api2wire_opt_box_autoadd_api_device_video_track_constraints(
          ApiDeviceVideoTrackConstraints? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_api_device_video_track_constraints(raw);
  }

  @protected
  ffi.Pointer<wire_ApiDisplayVideoTrackConstraints>
      api2wire_opt_box_autoadd_api_display_video_track_constraints(
          ApiDisplayVideoTrackConstraints? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_api_display_video_track_constraints(raw);
  }

  @protected
  ffi.Pointer<wire_ConstrainU32> api2wire_opt_box_autoadd_constrain_u_32(
      ConstrainU32? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_constrain_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_autoadd_media_source_kind(
      MediaSourceKind? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_media_source_kind(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _ConnectionHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ConnectionHandlePtr);
  OpaqueTypeFinalizer get ConnectionHandleFinalizer =>
      _ConnectionHandleFinalizer;
  late final OpaqueTypeFinalizer _JasonFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_JasonPtr);
  OpaqueTypeFinalizer get JasonFinalizer => _JasonFinalizer;
  late final OpaqueTypeFinalizer _LocalMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_LocalMediaTrackPtr);
  OpaqueTypeFinalizer get LocalMediaTrackFinalizer => _LocalMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _MediaManagerHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MediaManagerHandlePtr);
  OpaqueTypeFinalizer get MediaManagerHandleFinalizer =>
      _MediaManagerHandleFinalizer;
  late final OpaqueTypeFinalizer _ReconnectHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ReconnectHandlePtr);
  OpaqueTypeFinalizer get ReconnectHandleFinalizer => _ReconnectHandleFinalizer;
  late final OpaqueTypeFinalizer _RemoteMediaTrackFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RemoteMediaTrackPtr);
  OpaqueTypeFinalizer get RemoteMediaTrackFinalizer =>
      _RemoteMediaTrackFinalizer;
  late final OpaqueTypeFinalizer _RoomHandleFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RoomHandlePtr);
  OpaqueTypeFinalizer get RoomHandleFinalizer => _RoomHandleFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_ConnectionHandle(
      ConnectionHandle apiObj, wire_ConnectionHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DartOpaque(Object apiObj, wire_DartOpaque wireObj) {
    wireObj.handle = inner.new_dart_opaque(apiObj);
    wireObj.port = dropPort;
  }

  void _api_fill_to_wire_Jason(Jason apiObj, wire_Jason wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_LocalMediaTrack(
      LocalMediaTrack apiObj, wire_LocalMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MediaManagerHandle(
      MediaManagerHandle apiObj, wire_MediaManagerHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ReconnectHandle(
      ReconnectHandle apiObj, wire_ReconnectHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RemoteMediaTrack(
      RemoteMediaTrack apiObj, wire_RemoteMediaTrack wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RoomHandle(
      RoomHandle apiObj, wire_RoomHandle wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_api_audio_constraints(
      ApiAudioConstraints apiObj, wire_ApiAudioConstraints wireObj) {
    wireObj.device_id = api2wire_opt_String(apiObj.deviceId);
  }

  void _api_fill_to_wire_api_constrain_facing_mode(
      ApiConstrainFacingMode apiObj, wire_ApiConstrainFacingMode wireObj) {
    if (apiObj is ApiConstrainFacingMode_Exact) {
      var pre_field0 = api2wire_facing_mode(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ApiConstrainFacingMode_Exact();
      wireObj.kind.ref.Exact.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ApiConstrainFacingMode_Ideal) {
      var pre_field0 = api2wire_facing_mode(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_ApiConstrainFacingMode_Ideal();
      wireObj.kind.ref.Ideal.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_api_device_video_track_constraints(
      ApiDeviceVideoTrackConstraints apiObj,
      wire_ApiDeviceVideoTrackConstraints wireObj) {
    wireObj.device_id = api2wire_opt_String(apiObj.deviceId);
    wireObj.facing_mode =
        api2wire_opt_box_autoadd_api_constrain_facing_mode(apiObj.facingMode);
    wireObj.height = api2wire_opt_box_autoadd_constrain_u_32(apiObj.height);
    wireObj.width = api2wire_opt_box_autoadd_constrain_u_32(apiObj.width);
  }

  void _api_fill_to_wire_api_display_video_track_constraints(
      ApiDisplayVideoTrackConstraints apiObj,
      wire_ApiDisplayVideoTrackConstraints wireObj) {
    wireObj.device_id = api2wire_opt_String(apiObj.deviceId);
    wireObj.height = api2wire_opt_box_autoadd_constrain_u_32(apiObj.height);
    wireObj.width = api2wire_opt_box_autoadd_constrain_u_32(apiObj.width);
    wireObj.frame_rate =
        api2wire_opt_box_autoadd_constrain_u_32(apiObj.frameRate);
  }

  void _api_fill_to_wire_api_media_stream_settings(
      ApiMediaStreamSettings apiObj, wire_ApiMediaStreamSettings wireObj) {
    wireObj.audio =
        api2wire_opt_box_autoadd_api_audio_constraints(apiObj.audio);
    wireObj.device_video =
        api2wire_opt_box_autoadd_api_device_video_track_constraints(
            apiObj.deviceVideo);
    wireObj.display_video =
        api2wire_opt_box_autoadd_api_display_video_track_constraints(
            apiObj.displayVideo);
  }

  void _api_fill_to_wire_box_autoadd_api_audio_constraints(
      ApiAudioConstraints apiObj,
      ffi.Pointer<wire_ApiAudioConstraints> wireObj) {
    _api_fill_to_wire_api_audio_constraints(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_constrain_facing_mode(
      ApiConstrainFacingMode apiObj,
      ffi.Pointer<wire_ApiConstrainFacingMode> wireObj) {
    _api_fill_to_wire_api_constrain_facing_mode(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_device_video_track_constraints(
      ApiDeviceVideoTrackConstraints apiObj,
      ffi.Pointer<wire_ApiDeviceVideoTrackConstraints> wireObj) {
    _api_fill_to_wire_api_device_video_track_constraints(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_display_video_track_constraints(
      ApiDisplayVideoTrackConstraints apiObj,
      ffi.Pointer<wire_ApiDisplayVideoTrackConstraints> wireObj) {
    _api_fill_to_wire_api_display_video_track_constraints(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_api_media_stream_settings(
      ApiMediaStreamSettings apiObj,
      ffi.Pointer<wire_ApiMediaStreamSettings> wireObj) {
    _api_fill_to_wire_api_media_stream_settings(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_constrain_u_32(
      ConstrainU32 apiObj, ffi.Pointer<wire_ConstrainU32> wireObj) {
    _api_fill_to_wire_constrain_u_32(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_constrain_u_32(
      ConstrainU32 apiObj, wire_ConstrainU32 wireObj) {
    if (apiObj is ConstrainU32_Exact) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ConstrainU32_Exact();
      wireObj.kind.ref.Exact.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ConstrainU32_Ideal) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_ConstrainU32_Ideal();
      wireObj.kind.ref.Ideal.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ConstrainU32_Range) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      var pre_field1 = api2wire_u32(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_ConstrainU32_Range();
      wireObj.kind.ref.Range.ref.field0 = pre_field0;
      wireObj.kind.ref.Range.ref.field1 = pre_field1;
      return;
    }
  }

  void _api_fill_to_wire_opt_box_autoadd_api_audio_constraints(
      ApiAudioConstraints? apiObj,
      ffi.Pointer<wire_ApiAudioConstraints> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_api_audio_constraints(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_api_constrain_facing_mode(
      ApiConstrainFacingMode? apiObj,
      ffi.Pointer<wire_ApiConstrainFacingMode> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_api_constrain_facing_mode(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_api_device_video_track_constraints(
      ApiDeviceVideoTrackConstraints? apiObj,
      ffi.Pointer<wire_ApiDeviceVideoTrackConstraints> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_api_device_video_track_constraints(
          apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_api_display_video_track_constraints(
      ApiDisplayVideoTrackConstraints? apiObj,
      ffi.Pointer<wire_ApiDisplayVideoTrackConstraints> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_api_display_video_track_constraints(
          apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_constrain_u_32(
      ConstrainU32? apiObj, ffi.Pointer<wire_ConstrainU32> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_constrain_u_32(apiObj, wireObj);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class MedeaJasonWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MedeaJasonWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MedeaJasonWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  Object unbox_dart_handle(
    ffi.Pointer<ffi.Handle> val,
  ) {
    return _unbox_dart_handle(
      val,
    );
  }

  late final _unbox_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Handle>)>>(
          'unbox_dart_handle');
  late final _unbox_dart_handle = _unbox_dart_handlePtr
      .asFunction<Object Function(ffi.Pointer<ffi.Handle>)>();

  void free_boxed_dart_handle(
    ffi.Pointer<ffi.Handle> val,
  ) {
    return _free_boxed_dart_handle(
      val,
    );
  }

  late final _free_boxed_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Handle>)>>(
          'free_boxed_dart_handle');
  late final _free_boxed_dart_handle = _free_boxed_dart_handlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Handle>)>();

  ffi.Pointer<ffi.Handle> box_dart_handle(
    Object val,
  ) {
    return _box_dart_handle(
      val,
    );
  }

  late final _box_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Handle> Function(ffi.Handle)>>(
          'box_dart_handle');
  late final _box_dart_handle = _box_dart_handlePtr
      .asFunction<ffi.Pointer<ffi.Handle> Function(Object)>();

  ffi.Pointer<DartValue> box_foreign_value(
    DartValue val,
  ) {
    return _box_foreign_value(
      val,
    );
  }

  late final _box_foreign_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DartValue> Function(DartValue)>>(
          'box_foreign_value');
  late final _box_foreign_value = _box_foreign_valuePtr
      .asFunction<ffi.Pointer<DartValue> Function(DartValue)>();

  Object new_state_error(
    ffi.Pointer<ffi.Char> message,
  ) {
    return _new_state_error(
      message,
    );
  }

  late final _new_state_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'new_state_error');
  late final _new_state_error =
      _new_state_errorPtr.asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object new_format_exception(
    ffi.Pointer<ffi.Char> message,
  ) {
    return _new_format_exception(
      message,
    );
  }

  late final _new_format_exceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'new_format_exception');
  late final _new_format_exception = _new_format_exceptionPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object new_local_media_init_exception(
    int kind,
    ffi.Pointer<ffi.Char> message,
    DartValue cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_local_media_init_exception(
      kind,
      message,
      cause,
      stacktrace,
    );
  }

  late final _new_local_media_init_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Int64, ffi.Pointer<ffi.Char>, DartValue,
              ffi.Pointer<ffi.Char>)>>('new_local_media_init_exception');
  late final _new_local_media_init_exception =
      _new_local_media_init_exceptionPtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Char>, DartValue, ffi.Pointer<ffi.Char>)>();

  Object new_enumerate_devices_exception(
    DartError cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_enumerate_devices_exception(
      cause,
      stacktrace,
    );
  }

  late final _new_enumerate_devices_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(DartError,
              ffi.Pointer<ffi.Char>)>>('new_enumerate_devices_exception');
  late final _new_enumerate_devices_exception =
      _new_enumerate_devices_exceptionPtr
          .asFunction<Object Function(DartError, ffi.Pointer<ffi.Char>)>();

  Object new_rpc_client_exception(
    int kind,
    ffi.Pointer<ffi.Char> message,
    DartValue cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_rpc_client_exception(
      kind,
      message,
      cause,
      stacktrace,
    );
  }

  late final _new_rpc_client_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Int64, ffi.Pointer<ffi.Char>, DartValue,
              ffi.Pointer<ffi.Char>)>>('new_rpc_client_exception');
  late final _new_rpc_client_exception =
      _new_rpc_client_exceptionPtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Char>, DartValue, ffi.Pointer<ffi.Char>)>();

  Object new_media_state_transition_exception(
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> stacktrace,
    int kind,
  ) {
    return _new_media_state_transition_exception(
      message,
      stacktrace,
      kind,
    );
  }

  late final _new_media_state_transition_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int64)>>('new_media_state_transition_exception');
  late final _new_media_state_transition_exception =
      _new_media_state_transition_exceptionPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  Object new_internal_exception(
    ffi.Pointer<ffi.Char> message,
    DartValue cause,
    ffi.Pointer<ffi.Char> stacktrace,
  ) {
    return _new_internal_exception(
      message,
      cause,
      stacktrace,
    );
  }

  late final _new_internal_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Char>, DartValue,
              ffi.Pointer<ffi.Char>)>>('new_internal_exception');
  late final _new_internal_exception = _new_internal_exceptionPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Char>, DartValue, ffi.Pointer<ffi.Char>)>();

  Object new_media_settings_update_exception(
    ffi.Pointer<ffi.Char> message,
    DartError cause,
    bool rolled_back,
  ) {
    return _new_media_settings_update_exception(
      message,
      cause,
      rolled_back,
    );
  }

  late final _new_media_settings_update_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Char>, DartError,
              ffi.Bool)>>('new_media_settings_update_exception');
  late final _new_media_settings_update_exception =
      _new_media_settings_update_exceptionPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Char>, DartError, bool)>();

  Object new_invalid_output_audio_device_id_exception(
    ffi.Pointer<ffi.Char> trace,
  ) {
    return _new_invalid_output_audio_device_id_exception(
      trace,
    );
  }

  late final _new_invalid_output_audio_device_id_exceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'new_invalid_output_audio_device_id_exception');
  late final _new_invalid_output_audio_device_id_exception =
      _new_invalid_output_audio_device_id_exceptionPtr
          .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object new_mic_volume_exception(
    DartError cause,
    ffi.Pointer<ffi.Char> trace,
  ) {
    return _new_mic_volume_exception(
      cause,
      trace,
    );
  }

  late final _new_mic_volume_exceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              DartError, ffi.Pointer<ffi.Char>)>>('new_mic_volume_exception');
  late final _new_mic_volume_exception = _new_mic_volume_exceptionPtr
      .asFunction<Object Function(DartError, ffi.Pointer<ffi.Char>)>();

  Object throw_panic_exception() {
    return _throw_panic_exception();
  }

  late final _throw_panic_exceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'throw_panic_exception');
  late final _throw_panic_exception =
      _throw_panic_exceptionPtr.asFunction<Object Function()>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturn wire_connection_handle_from_ptr(
    int ptr,
  ) {
    return _wire_connection_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_connection_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_connection_handle_from_ptr');
  late final _wire_connection_handle_from_ptr =
      _wire_connection_handle_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_connection_handle_on_close(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_close(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_ConnectionHandle,
              wire_DartOpaque)>>('wire_connection_handle_on_close');
  late final _wire_connection_handle_on_close =
      _wire_connection_handle_on_closePtr.asFunction<
          WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturn wire_connection_handle_on_remote_track_added(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_remote_track_added(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_remote_track_addedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>>(
      'wire_connection_handle_on_remote_track_added');
  late final _wire_connection_handle_on_remote_track_added =
      _wire_connection_handle_on_remote_track_addedPtr.asFunction<
          WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturn wire_connection_handle_on_quality_score_update(
    wire_ConnectionHandle connection,
    wire_DartOpaque f,
  ) {
    return _wire_connection_handle_on_quality_score_update(
      connection,
      f,
    );
  }

  late final _wire_connection_handle_on_quality_score_updatePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>>(
      'wire_connection_handle_on_quality_score_update');
  late final _wire_connection_handle_on_quality_score_update =
      _wire_connection_handle_on_quality_score_updatePtr.asFunction<
          WireSyncReturn Function(wire_ConnectionHandle, wire_DartOpaque)>();

  WireSyncReturn wire_connection_handle_get_remote_member_id(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_get_remote_member_id(
      connection,
    );
  }

  late final _wire_connection_handle_get_remote_member_idPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_get_remote_member_id');
  late final _wire_connection_handle_get_remote_member_id =
      _wire_connection_handle_get_remote_member_idPtr
          .asFunction<WireSyncReturn Function(wire_ConnectionHandle)>();

  WireSyncReturn wire_connection_handle_enable_remote_audio(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_enable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_enable_remote_audio');
  late final _wire_connection_handle_enable_remote_audio =
      _wire_connection_handle_enable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_ConnectionHandle)>();

  WireSyncReturn wire_connection_handle_disable_remote_audio(
    wire_ConnectionHandle connection,
  ) {
    return _wire_connection_handle_disable_remote_audio(
      connection,
    );
  }

  late final _wire_connection_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_ConnectionHandle)>>(
      'wire_connection_handle_disable_remote_audio');
  late final _wire_connection_handle_disable_remote_audio =
      _wire_connection_handle_disable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_ConnectionHandle)>();

  WireSyncReturn wire_connection_handle_enable_remote_video(
    wire_ConnectionHandle connection,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_connection_handle_enable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_enable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_ConnectionHandle, ffi.Pointer<ffi.Int32>)>>(
      'wire_connection_handle_enable_remote_video');
  late final _wire_connection_handle_enable_remote_video =
      _wire_connection_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturn Function(
              wire_ConnectionHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_connection_handle_disable_remote_video(
    wire_ConnectionHandle connection,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_connection_handle_disable_remote_video(
      connection,
      source_kind,
    );
  }

  late final _wire_connection_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_ConnectionHandle, ffi.Pointer<ffi.Int32>)>>(
      'wire_connection_handle_disable_remote_video');
  late final _wire_connection_handle_disable_remote_video =
      _wire_connection_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturn Function(
              wire_ConnectionHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_on_panic(
    wire_DartOpaque cb,
  ) {
    return _wire_on_panic(
      cb,
    );
  }

  late final _wire_on_panicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>(
          'wire_on_panic');
  late final _wire_on_panic =
      _wire_on_panicPtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  WireSyncReturn wire_jason_new() {
    return _wire_jason_new();
  }

  late final _wire_jason_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_jason_new');
  late final _wire_jason_new =
      _wire_jason_newPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_jason_init_room(
    wire_Jason jason,
  ) {
    return _wire_jason_init_room(
      jason,
    );
  }

  late final _wire_jason_init_roomPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Jason)>>(
          'wire_jason_init_room');
  late final _wire_jason_init_room = _wire_jason_init_roomPtr
      .asFunction<WireSyncReturn Function(wire_Jason)>();

  WireSyncReturn wire_jason_media_manager(
    wire_Jason jason,
  ) {
    return _wire_jason_media_manager(
      jason,
    );
  }

  late final _wire_jason_media_managerPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Jason)>>(
          'wire_jason_media_manager');
  late final _wire_jason_media_manager = _wire_jason_media_managerPtr
      .asFunction<WireSyncReturn Function(wire_Jason)>();

  WireSyncReturn wire_jason_close_room(
    wire_Jason jason,
    wire_RoomHandle room_to_delete,
  ) {
    return _wire_jason_close_room(
      jason,
      room_to_delete,
    );
  }

  late final _wire_jason_close_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Jason, wire_RoomHandle)>>('wire_jason_close_room');
  late final _wire_jason_close_room = _wire_jason_close_roomPtr
      .asFunction<WireSyncReturn Function(wire_Jason, wire_RoomHandle)>();

  WireSyncReturn wire_jason_dispose(
    wire_Jason jason,
  ) {
    return _wire_jason_dispose(
      jason,
    );
  }

  late final _wire_jason_disposePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Jason)>>(
          'wire_jason_dispose');
  late final _wire_jason_dispose =
      _wire_jason_disposePtr.asFunction<WireSyncReturn Function(wire_Jason)>();

  WireSyncReturn wire_local_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_local_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_local_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_local_media_track_from_ptr');
  late final _wire_local_media_track_from_ptr =
      _wire_local_media_track_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_vec_local_tracks_from_ptr(
    int ptr,
  ) {
    return _wire_vec_local_tracks_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_local_tracks_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_vec_local_tracks_from_ptr');
  late final _wire_vec_local_tracks_from_ptr =
      _wire_vec_local_tracks_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_local_media_track_get_track(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_get_track(
      track,
    );
  }

  late final _wire_local_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_get_track');
  late final _wire_local_media_track_get_track =
      _wire_local_media_track_get_trackPtr
          .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_local_media_track_kind(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_kind(
      track,
    );
  }

  late final _wire_local_media_track_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_kind');
  late final _wire_local_media_track_kind = _wire_local_media_track_kindPtr
      .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_local_media_track_on_ended(
    wire_LocalMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_local_media_track_on_ended(
      track,
      f,
    );
  }

  late final _wire_local_media_track_on_endedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LocalMediaTrack,
              wire_DartOpaque)>>('wire_local_media_track_on_ended');
  late final _wire_local_media_track_on_ended =
      _wire_local_media_track_on_endedPtr.asFunction<
          WireSyncReturn Function(wire_LocalMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_local_media_track_state(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_state(
      track,
    );
  }

  late final _wire_local_media_track_statePtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_state');
  late final _wire_local_media_track_state = _wire_local_media_track_statePtr
      .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_local_media_track_media_source_kind(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_local_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_media_source_kind');
  late final _wire_local_media_track_media_source_kind =
      _wire_local_media_track_media_source_kindPtr
          .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_local_media_track_free(
    wire_LocalMediaTrack track,
  ) {
    return _wire_local_media_track_free(
      track,
    );
  }

  late final _wire_local_media_track_freePtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_LocalMediaTrack)>>(
      'wire_local_media_track_free');
  late final _wire_local_media_track_free = _wire_local_media_track_freePtr
      .asFunction<WireSyncReturn Function(wire_LocalMediaTrack)>();

  WireSyncReturn wire_vec_media_device_details_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_device_details_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_device_details_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_vec_media_device_details_from_ptr');
  late final _wire_vec_media_device_details_from_ptr =
      _wire_vec_media_device_details_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_vec_media_display_details_from_ptr(
    int ptr,
  ) {
    return _wire_vec_media_display_details_from_ptr(
      ptr,
    );
  }

  late final _wire_vec_media_display_details_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_vec_media_display_details_from_ptr');
  late final _wire_vec_media_display_details_from_ptr =
      _wire_vec_media_display_details_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_media_manager_handle_init_local_tracks(
    wire_MediaManagerHandle manager,
    ffi.Pointer<wire_ApiMediaStreamSettings> caps,
  ) {
    return _wire_media_manager_handle_init_local_tracks(
      manager,
      caps,
    );
  }

  late final _wire_media_manager_handle_init_local_tracksPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_MediaManagerHandle,
                  ffi.Pointer<wire_ApiMediaStreamSettings>)>>(
      'wire_media_manager_handle_init_local_tracks');
  late final _wire_media_manager_handle_init_local_tracks =
      _wire_media_manager_handle_init_local_tracksPtr.asFunction<
          WireSyncReturn Function(wire_MediaManagerHandle,
              ffi.Pointer<wire_ApiMediaStreamSettings>)>();

  WireSyncReturn wire_media_manager_handle_enumerate_devices(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_enumerate_devices(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_devicesPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_enumerate_devices');
  late final _wire_media_manager_handle_enumerate_devices =
      _wire_media_manager_handle_enumerate_devicesPtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_enumerate_displays(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_enumerate_displays(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_displaysPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_enumerate_displays');
  late final _wire_media_manager_handle_enumerate_displays =
      _wire_media_manager_handle_enumerate_displaysPtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_set_output_audio_id(
    wire_MediaManagerHandle manager,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_media_manager_handle_set_output_audio_id(
      manager,
      device_id,
    );
  }

  late final _wire_media_manager_handle_set_output_audio_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_MediaManagerHandle, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_media_manager_handle_set_output_audio_id');
  late final _wire_media_manager_handle_set_output_audio_id =
      _wire_media_manager_handle_set_output_audio_idPtr.asFunction<
          WireSyncReturn Function(
              wire_MediaManagerHandle, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_media_manager_handle_set_microphone_volume(
    wire_MediaManagerHandle manager,
    int level,
  ) {
    return _wire_media_manager_handle_set_microphone_volume(
      manager,
      level,
    );
  }

  late final _wire_media_manager_handle_set_microphone_volumePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_MediaManagerHandle,
              ffi.Int64)>>('wire_media_manager_handle_set_microphone_volume');
  late final _wire_media_manager_handle_set_microphone_volume =
      _wire_media_manager_handle_set_microphone_volumePtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle, int)>();

  WireSyncReturn wire_media_manager_handle_microphone_volume_is_available(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_microphone_volume_is_available(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volume_is_availablePtr =
      _lookup<
              ffi
              .NativeFunction<
                  WireSyncReturn Function(wire_MediaManagerHandle)>>(
          'wire_media_manager_handle_microphone_volume_is_available');
  late final _wire_media_manager_handle_microphone_volume_is_available =
      _wire_media_manager_handle_microphone_volume_is_availablePtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_microphone_volume(
    wire_MediaManagerHandle manager,
  ) {
    return _wire_media_manager_handle_microphone_volume(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volumePtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_MediaManagerHandle)>>(
      'wire_media_manager_handle_microphone_volume');
  late final _wire_media_manager_handle_microphone_volume =
      _wire_media_manager_handle_microphone_volumePtr
          .asFunction<WireSyncReturn Function(wire_MediaManagerHandle)>();

  WireSyncReturn wire_media_manager_handle_on_device_change(
    wire_MediaManagerHandle manager,
    wire_DartOpaque cb,
  ) {
    return _wire_media_manager_handle_on_device_change(
      manager,
      cb,
    );
  }

  late final _wire_media_manager_handle_on_device_changePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_MediaManagerHandle,
              wire_DartOpaque)>>('wire_media_manager_handle_on_device_change');
  late final _wire_media_manager_handle_on_device_change =
      _wire_media_manager_handle_on_device_changePtr.asFunction<
          WireSyncReturn Function(wire_MediaManagerHandle, wire_DartOpaque)>();

  WireSyncReturn wire_reconnect_handle_from_ptr(
    int ptr,
  ) {
    return _wire_reconnect_handle_from_ptr(
      ptr,
    );
  }

  late final _wire_reconnect_handle_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_reconnect_handle_from_ptr');
  late final _wire_reconnect_handle_from_ptr =
      _wire_reconnect_handle_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_reconnect_handle_reconnect_with_delay(
    wire_ReconnectHandle reconnect_handle,
    int delay_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_delay(
      reconnect_handle,
      delay_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_delayPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_ReconnectHandle,
              ffi.Uint32)>>('wire_reconnect_handle_reconnect_with_delay');
  late final _wire_reconnect_handle_reconnect_with_delay =
      _wire_reconnect_handle_reconnect_with_delayPtr
          .asFunction<WireSyncReturn Function(wire_ReconnectHandle, int)>();

  WireSyncReturn wire_reconnect_handle_reconnect_with_backoff(
    wire_ReconnectHandle reconnect_handle,
    int starting_delay,
    double multiplier,
    int max_delay,
    ffi.Pointer<ffi.Uint32> max_elapsed_time_ms,
  ) {
    return _wire_reconnect_handle_reconnect_with_backoff(
      reconnect_handle,
      starting_delay,
      multiplier,
      max_delay,
      max_elapsed_time_ms,
    );
  }

  late final _wire_reconnect_handle_reconnect_with_backoffPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_ReconnectHandle, ffi.Uint32,
                  ffi.Double, ffi.Uint32, ffi.Pointer<ffi.Uint32>)>>(
      'wire_reconnect_handle_reconnect_with_backoff');
  late final _wire_reconnect_handle_reconnect_with_backoff =
      _wire_reconnect_handle_reconnect_with_backoffPtr.asFunction<
          WireSyncReturn Function(wire_ReconnectHandle, int, double, int,
              ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturn wire_remote_media_track_from_ptr(
    int ptr,
  ) {
    return _wire_remote_media_track_from_ptr(
      ptr,
    );
  }

  late final _wire_remote_media_track_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_remote_media_track_from_ptr');
  late final _wire_remote_media_track_from_ptr =
      _wire_remote_media_track_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_remote_media_track_get_track(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_get_track(
      track,
    );
  }

  late final _wire_remote_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_get_track');
  late final _wire_remote_media_track_get_track =
      _wire_remote_media_track_get_trackPtr
          .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_on_muted(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_muted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_mutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_muted');
  late final _wire_remote_media_track_on_muted =
      _wire_remote_media_track_on_mutedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_on_unmuted(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_unmuted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_unmutedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_unmuted');
  late final _wire_remote_media_track_on_unmuted =
      _wire_remote_media_track_on_unmutedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_on_stopped(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_stopped(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_stoppedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack,
              wire_DartOpaque)>>('wire_remote_media_track_on_stopped');
  late final _wire_remote_media_track_on_stopped =
      _wire_remote_media_track_on_stoppedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_on_media_direction_changed(
    wire_RemoteMediaTrack track,
    wire_DartOpaque f,
  ) {
    return _wire_remote_media_track_on_media_direction_changed(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_media_direction_changedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>>(
      'wire_remote_media_track_on_media_direction_changed');
  late final _wire_remote_media_track_on_media_direction_changed =
      _wire_remote_media_track_on_media_direction_changedPtr.asFunction<
          WireSyncReturn Function(wire_RemoteMediaTrack, wire_DartOpaque)>();

  WireSyncReturn wire_remote_media_track_muted(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_muted(
      track,
    );
  }

  late final _wire_remote_media_track_mutedPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_muted');
  late final _wire_remote_media_track_muted = _wire_remote_media_track_mutedPtr
      .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_kind(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_kind(
      track,
    );
  }

  late final _wire_remote_media_track_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_kind');
  late final _wire_remote_media_track_kind = _wire_remote_media_track_kindPtr
      .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_media_source_kind(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_remote_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_media_source_kind');
  late final _wire_remote_media_track_media_source_kind =
      _wire_remote_media_track_media_source_kindPtr
          .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_remote_media_track_media_direction(
    wire_RemoteMediaTrack track,
  ) {
    return _wire_remote_media_track_media_direction(
      track,
    );
  }

  late final _wire_remote_media_track_media_directionPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>>(
      'wire_remote_media_track_media_direction');
  late final _wire_remote_media_track_media_direction =
      _wire_remote_media_track_media_directionPtr
          .asFunction<WireSyncReturn Function(wire_RemoteMediaTrack)>();

  WireSyncReturn wire_room_close_reason_from_ptr(
    int ptr,
  ) {
    return _wire_room_close_reason_from_ptr(
      ptr,
    );
  }

  late final _wire_room_close_reason_from_ptrPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_room_close_reason_from_ptr');
  late final _wire_room_close_reason_from_ptr =
      _wire_room_close_reason_from_ptrPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_room_handle_join(
    wire_RoomHandle room_handle,
    ffi.Pointer<wire_uint_8_list> token,
  ) {
    return _wire_room_handle_join(
      room_handle,
      token,
    );
  }

  late final _wire_room_handle_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<wire_uint_8_list>)>>('wire_room_handle_join');
  late final _wire_room_handle_join = _wire_room_handle_joinPtr.asFunction<
      WireSyncReturn Function(
          wire_RoomHandle, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_room_handle_set_local_media_settings(
    wire_RoomHandle room_handle,
    ffi.Pointer<wire_ApiMediaStreamSettings> settings,
    bool stop_first,
    bool rollback_on_fail,
  ) {
    return _wire_room_handle_set_local_media_settings(
      room_handle,
      settings,
      stop_first,
      rollback_on_fail,
    );
  }

  late final _wire_room_handle_set_local_media_settingsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_RoomHandle,
              ffi.Pointer<wire_ApiMediaStreamSettings>,
              ffi.Bool,
              ffi.Bool)>>('wire_room_handle_set_local_media_settings');
  late final _wire_room_handle_set_local_media_settings =
      _wire_room_handle_set_local_media_settingsPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<wire_ApiMediaStreamSettings>, bool, bool)>();

  WireSyncReturn wire_room_handle_mute_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_mute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_mute_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_mute_audio');
  late final _wire_room_handle_mute_audio = _wire_room_handle_mute_audioPtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_unmute_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_unmute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_unmute_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_unmute_audio');
  late final _wire_room_handle_unmute_audio = _wire_room_handle_unmute_audioPtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_enable_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_enable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_enable_audio');
  late final _wire_room_handle_enable_audio = _wire_room_handle_enable_audioPtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_disable_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_disable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_disable_audio');
  late final _wire_room_handle_disable_audio =
      _wire_room_handle_disable_audioPtr
          .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_mute_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_room_handle_mute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_mute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int32>)>>('wire_room_handle_mute_video');
  late final _wire_room_handle_mute_video =
      _wire_room_handle_mute_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_room_handle_unmute_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_room_handle_unmute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_unmute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int32>)>>('wire_room_handle_unmute_video');
  late final _wire_room_handle_unmute_video =
      _wire_room_handle_unmute_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_room_handle_enable_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_room_handle_enable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int32>)>>('wire_room_handle_enable_video');
  late final _wire_room_handle_enable_video =
      _wire_room_handle_enable_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_room_handle_disable_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_room_handle_disable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int32>)>>('wire_room_handle_disable_video');
  late final _wire_room_handle_disable_video =
      _wire_room_handle_disable_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_room_handle_enable_remote_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_enable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_remote_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_enable_remote_audio');
  late final _wire_room_handle_enable_remote_audio =
      _wire_room_handle_enable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_disable_remote_audio(
    wire_RoomHandle room_handle,
  ) {
    return _wire_room_handle_disable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_remote_audioPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_RoomHandle)>>(
          'wire_room_handle_disable_remote_audio');
  late final _wire_room_handle_disable_remote_audio =
      _wire_room_handle_disable_remote_audioPtr
          .asFunction<WireSyncReturn Function(wire_RoomHandle)>();

  WireSyncReturn wire_room_handle_enable_remote_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_room_handle_enable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_remote_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              ffi.Pointer<ffi.Int32>)>>('wire_room_handle_enable_remote_video');
  late final _wire_room_handle_enable_remote_video =
      _wire_room_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_room_handle_disable_remote_video(
    wire_RoomHandle room_handle,
    ffi.Pointer<ffi.Int32> source_kind,
  ) {
    return _wire_room_handle_disable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_RoomHandle, ffi.Pointer<ffi.Int32>)>>(
      'wire_room_handle_disable_remote_video');
  late final _wire_room_handle_disable_remote_video =
      _wire_room_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, ffi.Pointer<ffi.Int32>)>();

  WireSyncReturn wire_room_handle_on_new_connection(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_new_connection(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_new_connectionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_new_connection');
  late final _wire_room_handle_on_new_connection =
      _wire_room_handle_on_new_connectionPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_close(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_close(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_RoomHandle, wire_DartOpaque)>>('wire_room_handle_on_close');
  late final _wire_room_handle_on_close = _wire_room_handle_on_closePtr
      .asFunction<WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_local_track(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_local_track(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_local_trackPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_local_track');
  late final _wire_room_handle_on_local_track =
      _wire_room_handle_on_local_trackPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_connection_loss(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_connection_loss(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_connection_lossPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_connection_loss');
  late final _wire_room_handle_on_connection_loss =
      _wire_room_handle_on_connection_lossPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  WireSyncReturn wire_room_handle_on_failed_local_media(
    wire_RoomHandle room_handle,
    wire_DartOpaque cb,
  ) {
    return _wire_room_handle_on_failed_local_media(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_failed_local_mediaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_RoomHandle,
              wire_DartOpaque)>>('wire_room_handle_on_failed_local_media');
  late final _wire_room_handle_on_failed_local_media =
      _wire_room_handle_on_failed_local_mediaPtr.asFunction<
          WireSyncReturn Function(wire_RoomHandle, wire_DartOpaque)>();

  wire_ConnectionHandle new_ConnectionHandle() {
    return _new_ConnectionHandle();
  }

  late final _new_ConnectionHandlePtr =
      _lookup<ffi.NativeFunction<wire_ConnectionHandle Function()>>(
          'new_ConnectionHandle');
  late final _new_ConnectionHandle =
      _new_ConnectionHandlePtr.asFunction<wire_ConnectionHandle Function()>();

  wire_DartOpaque new_DartOpaque() {
    return _new_DartOpaque();
  }

  late final _new_DartOpaquePtr =
      _lookup<ffi.NativeFunction<wire_DartOpaque Function()>>('new_DartOpaque');
  late final _new_DartOpaque =
      _new_DartOpaquePtr.asFunction<wire_DartOpaque Function()>();

  wire_Jason new_Jason() {
    return _new_Jason();
  }

  late final _new_JasonPtr =
      _lookup<ffi.NativeFunction<wire_Jason Function()>>('new_Jason');
  late final _new_Jason = _new_JasonPtr.asFunction<wire_Jason Function()>();

  wire_LocalMediaTrack new_LocalMediaTrack() {
    return _new_LocalMediaTrack();
  }

  late final _new_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_LocalMediaTrack Function()>>(
          'new_LocalMediaTrack');
  late final _new_LocalMediaTrack =
      _new_LocalMediaTrackPtr.asFunction<wire_LocalMediaTrack Function()>();

  wire_MediaManagerHandle new_MediaManagerHandle() {
    return _new_MediaManagerHandle();
  }

  late final _new_MediaManagerHandlePtr =
      _lookup<ffi.NativeFunction<wire_MediaManagerHandle Function()>>(
          'new_MediaManagerHandle');
  late final _new_MediaManagerHandle = _new_MediaManagerHandlePtr
      .asFunction<wire_MediaManagerHandle Function()>();

  wire_ReconnectHandle new_ReconnectHandle() {
    return _new_ReconnectHandle();
  }

  late final _new_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<wire_ReconnectHandle Function()>>(
          'new_ReconnectHandle');
  late final _new_ReconnectHandle =
      _new_ReconnectHandlePtr.asFunction<wire_ReconnectHandle Function()>();

  wire_RemoteMediaTrack new_RemoteMediaTrack() {
    return _new_RemoteMediaTrack();
  }

  late final _new_RemoteMediaTrackPtr =
      _lookup<ffi.NativeFunction<wire_RemoteMediaTrack Function()>>(
          'new_RemoteMediaTrack');
  late final _new_RemoteMediaTrack =
      _new_RemoteMediaTrackPtr.asFunction<wire_RemoteMediaTrack Function()>();

  wire_RoomHandle new_RoomHandle() {
    return _new_RoomHandle();
  }

  late final _new_RoomHandlePtr =
      _lookup<ffi.NativeFunction<wire_RoomHandle Function()>>('new_RoomHandle');
  late final _new_RoomHandle =
      _new_RoomHandlePtr.asFunction<wire_RoomHandle Function()>();

  ffi.Pointer<wire_ApiAudioConstraints>
      new_box_autoadd_api_audio_constraints_0() {
    return _new_box_autoadd_api_audio_constraints_0();
  }

  late final _new_box_autoadd_api_audio_constraints_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ApiAudioConstraints> Function()>>(
      'new_box_autoadd_api_audio_constraints_0');
  late final _new_box_autoadd_api_audio_constraints_0 =
      _new_box_autoadd_api_audio_constraints_0Ptr
          .asFunction<ffi.Pointer<wire_ApiAudioConstraints> Function()>();

  ffi.Pointer<wire_ApiConstrainFacingMode>
      new_box_autoadd_api_constrain_facing_mode_0() {
    return _new_box_autoadd_api_constrain_facing_mode_0();
  }

  late final _new_box_autoadd_api_constrain_facing_mode_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_ApiConstrainFacingMode> Function()>>(
      'new_box_autoadd_api_constrain_facing_mode_0');
  late final _new_box_autoadd_api_constrain_facing_mode_0 =
      _new_box_autoadd_api_constrain_facing_mode_0Ptr
          .asFunction<ffi.Pointer<wire_ApiConstrainFacingMode> Function()>();

  ffi.Pointer<wire_ApiDeviceVideoTrackConstraints>
      new_box_autoadd_api_device_video_track_constraints_0() {
    return _new_box_autoadd_api_device_video_track_constraints_0();
  }

  late final _new_box_autoadd_api_device_video_track_constraints_0Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_ApiDeviceVideoTrackConstraints> Function()>>(
      'new_box_autoadd_api_device_video_track_constraints_0');
  late final _new_box_autoadd_api_device_video_track_constraints_0 =
      _new_box_autoadd_api_device_video_track_constraints_0Ptr.asFunction<
          ffi.Pointer<wire_ApiDeviceVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_ApiDisplayVideoTrackConstraints>
      new_box_autoadd_api_display_video_track_constraints_0() {
    return _new_box_autoadd_api_display_video_track_constraints_0();
  }

  late final _new_box_autoadd_api_display_video_track_constraints_0Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<wire_ApiDisplayVideoTrackConstraints>
                      Function()>>(
          'new_box_autoadd_api_display_video_track_constraints_0');
  late final _new_box_autoadd_api_display_video_track_constraints_0 =
      _new_box_autoadd_api_display_video_track_constraints_0Ptr.asFunction<
          ffi.Pointer<wire_ApiDisplayVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_ApiMediaStreamSettings>
      new_box_autoadd_api_media_stream_settings_0() {
    return _new_box_autoadd_api_media_stream_settings_0();
  }

  late final _new_box_autoadd_api_media_stream_settings_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_ApiMediaStreamSettings> Function()>>(
      'new_box_autoadd_api_media_stream_settings_0');
  late final _new_box_autoadd_api_media_stream_settings_0 =
      _new_box_autoadd_api_media_stream_settings_0Ptr
          .asFunction<ffi.Pointer<wire_ApiMediaStreamSettings> Function()>();

  ffi.Pointer<wire_ConstrainU32> new_box_autoadd_constrain_u_32_0() {
    return _new_box_autoadd_constrain_u_32_0();
  }

  late final _new_box_autoadd_constrain_u_32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConstrainU32> Function()>>(
          'new_box_autoadd_constrain_u_32_0');
  late final _new_box_autoadd_constrain_u_32_0 =
      _new_box_autoadd_constrain_u_32_0Ptr
          .asFunction<ffi.Pointer<wire_ConstrainU32> Function()>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_media_source_kind_0(
    int value,
  ) {
    return _new_box_autoadd_media_source_kind_0(
      value,
    );
  }

  late final _new_box_autoadd_media_source_kind_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_autoadd_media_source_kind_0');
  late final _new_box_autoadd_media_source_kind_0 =
      _new_box_autoadd_media_source_kind_0Ptr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_ConnectionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ConnectionHandle(
      ptr,
    );
  }

  late final _drop_opaque_ConnectionHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ConnectionHandle');
  late final _drop_opaque_ConnectionHandle = _drop_opaque_ConnectionHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ConnectionHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ConnectionHandle(
      ptr,
    );
  }

  late final _share_opaque_ConnectionHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ConnectionHandle');
  late final _share_opaque_ConnectionHandle = _share_opaque_ConnectionHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_Jason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Jason(
      ptr,
    );
  }

  late final _drop_opaque_JasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_Jason');
  late final _drop_opaque_Jason =
      _drop_opaque_JasonPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Jason(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Jason(
      ptr,
    );
  }

  late final _share_opaque_JasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_Jason');
  late final _share_opaque_Jason = _share_opaque_JasonPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_LocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_LocalMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_LocalMediaTrack');
  late final _drop_opaque_LocalMediaTrack = _drop_opaque_LocalMediaTrackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_LocalMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_LocalMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_LocalMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_LocalMediaTrack');
  late final _share_opaque_LocalMediaTrack = _share_opaque_LocalMediaTrackPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MediaManagerHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MediaManagerHandle(
      ptr,
    );
  }

  late final _drop_opaque_MediaManagerHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MediaManagerHandle');
  late final _drop_opaque_MediaManagerHandle =
      _drop_opaque_MediaManagerHandlePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MediaManagerHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MediaManagerHandle(
      ptr,
    );
  }

  late final _share_opaque_MediaManagerHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MediaManagerHandle');
  late final _share_opaque_MediaManagerHandle =
      _share_opaque_MediaManagerHandlePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ReconnectHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ReconnectHandle(
      ptr,
    );
  }

  late final _drop_opaque_ReconnectHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ReconnectHandle');
  late final _drop_opaque_ReconnectHandle = _drop_opaque_ReconnectHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ReconnectHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ReconnectHandle(
      ptr,
    );
  }

  late final _share_opaque_ReconnectHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ReconnectHandle');
  late final _share_opaque_ReconnectHandle = _share_opaque_ReconnectHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RemoteMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RemoteMediaTrack(
      ptr,
    );
  }

  late final _drop_opaque_RemoteMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RemoteMediaTrack');
  late final _drop_opaque_RemoteMediaTrack = _drop_opaque_RemoteMediaTrackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RemoteMediaTrack(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RemoteMediaTrack(
      ptr,
    );
  }

  late final _share_opaque_RemoteMediaTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RemoteMediaTrack');
  late final _share_opaque_RemoteMediaTrack = _share_opaque_RemoteMediaTrackPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RoomHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RoomHandle(
      ptr,
    );
  }

  late final _drop_opaque_RoomHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RoomHandle');
  late final _drop_opaque_RoomHandle = _drop_opaque_RoomHandlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RoomHandle(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RoomHandle(
      ptr,
    );
  }

  late final _share_opaque_RoomHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RoomHandle');
  late final _share_opaque_RoomHandle = _share_opaque_RoomHandlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ApiConstrainFacingModeKind>
      inflate_ApiConstrainFacingMode_Exact() {
    return _inflate_ApiConstrainFacingMode_Exact();
  }

  late final _inflate_ApiConstrainFacingMode_ExactPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ApiConstrainFacingModeKind> Function()>>(
      'inflate_ApiConstrainFacingMode_Exact');
  late final _inflate_ApiConstrainFacingMode_Exact =
      _inflate_ApiConstrainFacingMode_ExactPtr
          .asFunction<ffi.Pointer<ApiConstrainFacingModeKind> Function()>();

  ffi.Pointer<ApiConstrainFacingModeKind>
      inflate_ApiConstrainFacingMode_Ideal() {
    return _inflate_ApiConstrainFacingMode_Ideal();
  }

  late final _inflate_ApiConstrainFacingMode_IdealPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ApiConstrainFacingModeKind> Function()>>(
      'inflate_ApiConstrainFacingMode_Ideal');
  late final _inflate_ApiConstrainFacingMode_Ideal =
      _inflate_ApiConstrainFacingMode_IdealPtr
          .asFunction<ffi.Pointer<ApiConstrainFacingModeKind> Function()>();

  ffi.Pointer<ConstrainU32Kind> inflate_ConstrainU32_Exact() {
    return _inflate_ConstrainU32_Exact();
  }

  late final _inflate_ConstrainU32_ExactPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ConstrainU32Kind> Function()>>(
          'inflate_ConstrainU32_Exact');
  late final _inflate_ConstrainU32_Exact = _inflate_ConstrainU32_ExactPtr
      .asFunction<ffi.Pointer<ConstrainU32Kind> Function()>();

  ffi.Pointer<ConstrainU32Kind> inflate_ConstrainU32_Ideal() {
    return _inflate_ConstrainU32_Ideal();
  }

  late final _inflate_ConstrainU32_IdealPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ConstrainU32Kind> Function()>>(
          'inflate_ConstrainU32_Ideal');
  late final _inflate_ConstrainU32_Ideal = _inflate_ConstrainU32_IdealPtr
      .asFunction<ffi.Pointer<ConstrainU32Kind> Function()>();

  ffi.Pointer<ConstrainU32Kind> inflate_ConstrainU32_Range() {
    return _inflate_ConstrainU32_Range();
  }

  late final _inflate_ConstrainU32_RangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ConstrainU32Kind> Function()>>(
          'inflate_ConstrainU32_Range');
  late final _inflate_ConstrainU32_Range = _inflate_ConstrainU32_RangePtr
      .asFunction<ffi.Pointer<ConstrainU32Kind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();

  void fire_panic() {
    return _fire_panic();
  }

  late final _fire_panicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('fire_panic');
  late final _fire_panic = _fire_panicPtr.asFunction<void Function()>();

  int init_jason_dart_api_dl(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _init_jason_dart_api_dl(
      data,
    );
  }

  late final _init_jason_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_jason_dart_api_dl');
  late final _init_jason_dart_api_dl = _init_jason_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  Object init_device_constraints() {
    return _init_device_constraints();
  }

  late final _init_device_constraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'init_device_constraints');
  late final _init_device_constraints =
      _init_device_constraintsPtr.asFunction<Object Function()>();

  Object init_display_constraints() {
    return _init_display_constraints();
  }

  late final _init_display_constraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'init_display_constraints');
  late final _init_display_constraints =
      _init_display_constraintsPtr.asFunction<Object Function()>();

  Object new_video_constraints() {
    return _new_video_constraints();
  }

  late final _new_video_constraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'new_video_constraints');
  late final _new_video_constraints =
      _new_video_constraintsPtr.asFunction<Object Function()>();

  Object new_audio_constraints() {
    return _new_audio_constraints();
  }

  late final _new_audio_constraintsPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'new_audio_constraints');
  late final _new_audio_constraints =
      _new_audio_constraintsPtr.asFunction<Object Function()>();

  void set_video_constraint_value(
    Object constraints,
    int kind,
    DartValue value,
  ) {
    return _set_video_constraint_value(
      constraints,
      kind,
      value,
    );
  }

  late final _set_video_constraint_valuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Handle, ffi.Int64, DartValue)>>(
      'set_video_constraint_value');
  late final _set_video_constraint_value = _set_video_constraint_valuePtr
      .asFunction<void Function(Object, int, DartValue)>();

  void set_audio_constraint_value(
    Object constraints,
    int kind,
    DartValue value,
  ) {
    return _set_audio_constraint_value(
      constraints,
      kind,
      value,
    );
  }

  late final _set_audio_constraint_valuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Handle, ffi.Int64, DartValue)>>(
      'set_audio_constraint_value');
  late final _set_audio_constraint_value = _set_audio_constraint_valuePtr
      .asFunction<void Function(Object, int, DartValue)>();

  void set_video_constraint(
    Object constraints,
    int ty,
    Object video,
  ) {
    return _set_video_constraint(
      constraints,
      ty,
      video,
    );
  }

  late final _set_video_constraintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle, ffi.Int64, ffi.Handle)>>('set_video_constraint');
  late final _set_video_constraint =
      _set_video_constraintPtr.asFunction<void Function(Object, int, Object)>();

  void set_audio_constraint(
    Object constraints,
    int ty,
    Object audio,
  ) {
    return _set_audio_constraint(
      constraints,
      ty,
      audio,
    );
  }

  late final _set_audio_constraintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle, ffi.Int64, ffi.Handle)>>('set_audio_constraint');
  late final _set_audio_constraint =
      _set_audio_constraintPtr.asFunction<void Function(Object, int, Object)>();

  void rust_executor_init(
    int wake_port,
  ) {
    return _rust_executor_init(
      wake_port,
    );
  }

  late final _rust_executor_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'rust_executor_init');
  late final _rust_executor_init =
      _rust_executor_initPtr.asFunction<void Function(int)>();

  void rust_executor_poll_task(
    ffi.Pointer<Task> task,
  ) {
    return _rust_executor_poll_task(
      task,
    );
  }

  late final _rust_executor_poll_taskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Task>)>>(
          'rust_executor_poll_task');
  late final _rust_executor_poll_task = _rust_executor_poll_taskPtr
      .asFunction<void Function(ffi.Pointer<Task>)>();

  Object init(
    DartValueArg_String candidate,
    DartValueArg_Option_String sdp_mid,
    DartValueArg_Option_u16 sdp_m_line_index,
  ) {
    return _init(
      candidate,
      sdp_mid,
      sdp_m_line_index,
    );
  }

  late final _initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(DartValueArg_String, DartValueArg_Option_String,
              DartValueArg_Option_u16)>>('init');
  late final _init = _initPtr.asFunction<
      Object Function(DartValueArg_String, DartValueArg_Option_String,
          DartValueArg_Option_u16)>();

  ffi.Pointer<ffi.Char> candidate(
    Object ice_candidate,
  ) {
    return _candidate(
      ice_candidate,
    );
  }

  late final _candidatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'candidate');
  late final _candidate =
      _candidatePtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  int sdp_m_line_index(
    Object ice_candidate,
  ) {
    return _sdp_m_line_index(
      ice_candidate,
    );
  }

  late final _sdp_m_line_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Handle)>>(
          'sdp_m_line_index');
  late final _sdp_m_line_index =
      _sdp_m_line_indexPtr.asFunction<int Function(Object)>();

  ffi.Pointer<ffi.Char> sdp_mid(
    Object ice_candidate,
  ) {
    return _sdp_mid(
      ice_candidate,
    );
  }

  late final _sdp_midPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'sdp_mid');
  late final _sdp_mid =
      _sdp_midPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  void add(
    Object list,
    ffi.Pointer<ffi.Char> url,
    DartValueArg_String username,
    DartValueArg_String credentials,
  ) {
    return _add(
      list,
      url,
      username,
      credentials,
    );
  }

  late final _addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Handle, ffi.Pointer<ffi.Char>,
              DartValueArg_String, DartValueArg_String)>>('add');
  late final _add = _addPtr.asFunction<
      void Function(Object, ffi.Pointer<ffi.Char>, DartValueArg_String,
          DartValueArg_String)>();

  ffi.Pointer<ffi.Char> device_id(
    Object info,
  ) {
    return _device_id(
      info,
    );
  }

  late final _device_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'device_id');
  late final _device_id =
      _device_idPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  int kind(
    Object info,
  ) {
    return _kind(
      info,
    );
  }

  late final _kindPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Handle)>>('kind');
  late final _kind = _kindPtr.asFunction<int Function(Object)>();

  ffi.Pointer<ffi.Char> label(
    Object info,
  ) {
    return _label(
      info,
    );
  }

  late final _labelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'label');
  late final _label =
      _labelPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  ffi.Pointer<DartValueArg_Option_String> group_id(
    Object info,
  ) {
    return _group_id(
      info,
    );
  }

  late final _group_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_String> Function(
              ffi.Handle)>>('group_id');
  late final _group_id = _group_idPtr
      .asFunction<ffi.Pointer<DartValueArg_Option_String> Function(Object)>();

  bool is_failed(
    Object info,
  ) {
    return _is_failed(
      info,
    );
  }

  late final _is_failedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('is_failed');
  late final _is_failed = _is_failedPtr.asFunction<bool Function(Object)>();

  Object enumerate_devices() {
    return _enumerate_devices();
  }

  late final _enumerate_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('enumerate_devices');
  late final _enumerate_devices =
      _enumerate_devicesPtr.asFunction<Object Function()>();

  Object enumerate_displays() {
    return _enumerate_displays();
  }

  late final _enumerate_displaysPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('enumerate_displays');
  late final _enumerate_displays =
      _enumerate_displaysPtr.asFunction<Object Function()>();

  Object get_user_media(
    Object constraints,
  ) {
    return _get_user_media(
      constraints,
    );
  }

  late final _get_user_mediaPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'get_user_media');
  late final _get_user_media =
      _get_user_mediaPtr.asFunction<Object Function(Object)>();

  Object get_display_media(
    Object constraints,
  ) {
    return _get_display_media(
      constraints,
    );
  }

  late final _get_display_mediaPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'get_display_media');
  late final _get_display_media =
      _get_display_mediaPtr.asFunction<Object Function(Object)>();

  Object set_output_audio_id(
    ffi.Pointer<ffi.Char> device_id,
  ) {
    return _set_output_audio_id(
      device_id,
    );
  }

  late final _set_output_audio_idPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Char>)>>(
          'set_output_audio_id');
  late final _set_output_audio_id = _set_output_audio_idPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>)>();

  Object microphone_volume_is_available() {
    return _microphone_volume_is_available();
  }

  late final _microphone_volume_is_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'microphone_volume_is_available');
  late final _microphone_volume_is_available =
      _microphone_volume_is_availablePtr.asFunction<Object Function()>();

  Object microphone_volume() {
    return _microphone_volume();
  }

  late final _microphone_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('microphone_volume');
  late final _microphone_volume =
      _microphone_volumePtr.asFunction<Object Function()>();

  Object set_microphone_volume(
    int level,
  ) {
    return _set_microphone_volume(
      level,
    );
  }

  late final _set_microphone_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'set_microphone_volume');
  late final _set_microphone_volume =
      _set_microphone_volumePtr.asFunction<Object Function(int)>();

  void on_device_change(
    Object cb,
  ) {
    return _on_device_change(
      cb,
    );
  }

  late final _on_device_changePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'on_device_change');
  late final _on_device_change =
      _on_device_changePtr.asFunction<void Function(Object)>();

  int get_media_exception_kind(
    Object exception,
  ) {
    return _get_media_exception_kind(
      exception,
    );
  }

  late final _get_media_exception_kindPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Handle)>>(
          'get_media_exception_kind');
  late final _get_media_exception_kind =
      _get_media_exception_kindPtr.asFunction<int Function(Object)>();

  ffi.Pointer<DartValueArg_Option_String> title(
    Object info,
  ) {
    return _title(
      info,
    );
  }

  late final _titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_String> Function(
              ffi.Handle)>>('title');
  late final _title = _titlePtr
      .asFunction<ffi.Pointer<DartValueArg_Option_String> Function(Object)>();

  ffi.Pointer<ffi.Char> id(
    Object track,
  ) {
    return _id(
      track,
    );
  }

  late final _idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'id');
  late final _id = _idPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  ffi.Pointer<DartValueArg_Option_i64> facing_mode(
    Object track,
  ) {
    return _facing_mode(
      track,
    );
  }

  late final _facing_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_i64> Function(
              ffi.Handle)>>('facing_mode');
  late final _facing_mode = _facing_modePtr
      .asFunction<ffi.Pointer<DartValueArg_Option_i64> Function(Object)>();

  ffi.Pointer<DartValueArg_Option_u32> height(
    Object track,
  ) {
    return _height(
      track,
    );
  }

  late final _heightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_u32> Function(ffi.Handle)>>('height');
  late final _height = _heightPtr
      .asFunction<ffi.Pointer<DartValueArg_Option_u32> Function(Object)>();

  ffi.Pointer<DartValueArg_Option_u32> width(
    Object track,
  ) {
    return _width(
      track,
    );
  }

  late final _widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_u32> Function(ffi.Handle)>>('width');
  late final _width = _widthPtr
      .asFunction<ffi.Pointer<DartValueArg_Option_u32> Function(Object)>();

  bool enabled(
    Object track,
  ) {
    return _enabled(
      track,
    );
  }

  late final _enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('enabled');
  late final _enabled = _enabledPtr.asFunction<bool Function(Object)>();

  void set_enabled(
    Object track,
    bool is_enabled,
  ) {
    return _set_enabled(
      track,
      is_enabled,
    );
  }

  late final _set_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Bool)>>(
          'set_enabled');
  late final _set_enabled =
      _set_enabledPtr.asFunction<void Function(Object, bool)>();

  Object ready_state(
    Object track,
  ) {
    return _ready_state(
      track,
    );
  }

  late final _ready_statePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'ready_state');
  late final _ready_state =
      _ready_statePtr.asFunction<Object Function(Object)>();

  Object stop(
    Object track,
  ) {
    return _stop(
      track,
    );
  }

  late final _stopPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>('stop');
  late final _stop = _stopPtr.asFunction<Object Function(Object)>();

  void on_ended(
    Object track,
    Object cb,
  ) {
    return _on_ended(
      track,
      cb,
    );
  }

  late final _on_endedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'on_ended');
  late final _on_ended =
      _on_endedPtr.asFunction<void Function(Object, Object)>();

  Object clone(
    Object track,
  ) {
    return _clone(
      track,
    );
  }

  late final _clonePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>('clone');
  late final _clone = _clonePtr.asFunction<Object Function(Object)>();

  Object dispose(
    Object track,
  ) {
    return _dispose(
      track,
    );
  }

  late final _disposePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>('dispose');
  late final _dispose = _disposePtr.asFunction<Object Function(Object)>();

  int ice_connection_state(
    Object peer,
  ) {
    return _ice_connection_state(
      peer,
    );
  }

  late final _ice_connection_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>(
          'ice_connection_state');
  late final _ice_connection_state =
      _ice_connection_statePtr.asFunction<int Function(Object)>();

  void on_connection_state_change(
    Object peer,
    Object cb,
  ) {
    return _on_connection_state_change(
      peer,
      cb,
    );
  }

  late final _on_connection_state_changePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'on_connection_state_change');
  late final _on_connection_state_change = _on_connection_state_changePtr
      .asFunction<void Function(Object, Object)>();

  ffi.Pointer<DartValueArg_Option_i32> connection_state(
    Object peer,
  ) {
    return _connection_state(
      peer,
    );
  }

  late final _connection_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_i32> Function(
              ffi.Handle)>>('connection_state');
  late final _connection_state = _connection_statePtr
      .asFunction<ffi.Pointer<DartValueArg_Option_i32> Function(Object)>();

  void restart_ice(
    Object peer,
  ) {
    return _restart_ice(
      peer,
    );
  }

  late final _restart_icePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>('restart_ice');
  late final _restart_ice = _restart_icePtr.asFunction<void Function(Object)>();

  Object rollback(
    Object peer,
  ) {
    return _rollback(
      peer,
    );
  }

  late final _rollbackPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>('rollback');
  late final _rollback = _rollbackPtr.asFunction<Object Function(Object)>();

  void on_track(
    Object peer,
    Object cb,
  ) {
    return _on_track(
      peer,
      cb,
    );
  }

  late final _on_trackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'on_track');
  late final _on_track =
      _on_trackPtr.asFunction<void Function(Object, Object)>();

  void on_ice_candidate(
    Object peer,
    Object cb,
  ) {
    return _on_ice_candidate(
      peer,
      cb,
    );
  }

  late final _on_ice_candidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'on_ice_candidate');
  late final _on_ice_candidate =
      _on_ice_candidatePtr.asFunction<void Function(Object, Object)>();

  Object get_transceiver_by_mid(
    Object peer,
    ffi.Pointer<ffi.Char> mid,
  ) {
    return _get_transceiver_by_mid(
      peer,
      mid,
    );
  }

  late final _get_transceiver_by_midPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Char>)>>('get_transceiver_by_mid');
  late final _get_transceiver_by_mid = _get_transceiver_by_midPtr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Char>)>();

  Object add_ice_candidate(
    Object peer,
    Object candidate,
  ) {
    return _add_ice_candidate(
      peer,
      candidate,
    );
  }

  late final _add_ice_candidatePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'add_ice_candidate');
  late final _add_ice_candidate =
      _add_ice_candidatePtr.asFunction<Object Function(Object, Object)>();

  void on_ice_connection_state_change(
    Object peer,
    Object cb,
  ) {
    return _on_ice_connection_state_change(
      peer,
      cb,
    );
  }

  late final _on_ice_connection_state_changePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'on_ice_connection_state_change');
  late final _on_ice_connection_state_change =
      _on_ice_connection_state_changePtr
          .asFunction<void Function(Object, Object)>();

  Object new_peer(
    Object ice_servers,
    bool is_force_relayed,
  ) {
    return _new_peer(
      ice_servers,
      is_force_relayed,
    );
  }

  late final _new_peerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Bool)>>(
          'new_peer');
  late final _new_peer =
      _new_peerPtr.asFunction<Object Function(Object, bool)>();

  Object add_transceiver(
    Object peer,
    int kind,
    int direction,
  ) {
    return _add_transceiver(
      peer,
      kind,
      direction,
    );
  }

  late final _add_transceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Int64, ffi.Int64)>>('add_transceiver');
  late final _add_transceiver =
      _add_transceiverPtr.asFunction<Object Function(Object, int, int)>();

  Object create_offer(
    Object peer,
  ) {
    return _create_offer(
      peer,
    );
  }

  late final _create_offerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'create_offer');
  late final _create_offer =
      _create_offerPtr.asFunction<Object Function(Object)>();

  Object create_answer(
    Object peer,
  ) {
    return _create_answer(
      peer,
    );
  }

  late final _create_answerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'create_answer');
  late final _create_answer =
      _create_answerPtr.asFunction<Object Function(Object)>();

  Object set_local_description(
    Object peer,
    ffi.Pointer<ffi.Char> ty,
    ffi.Pointer<ffi.Char> offer,
  ) {
    return _set_local_description(
      peer,
      ty,
      offer,
    );
  }

  late final _set_local_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_local_description');
  late final _set_local_description = _set_local_descriptionPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  Object set_remote_description(
    Object peer,
    ffi.Pointer<ffi.Char> ty,
    ffi.Pointer<ffi.Char> offer,
  ) {
    return _set_remote_description(
      peer,
      ty,
      offer,
    );
  }

  late final _set_remote_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_remote_description');
  late final _set_remote_description = _set_remote_descriptionPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void close(
    Object peer,
  ) {
    return _close(
      peer,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>('close');
  late final _close = _closePtr.asFunction<void Function(Object)>();

  Object get_direction(
    Object transceiver,
  ) {
    return _get_direction(
      transceiver,
    );
  }

  late final _get_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'get_direction');
  late final _get_direction =
      _get_directionPtr.asFunction<Object Function(Object)>();

  ffi.Pointer<DartValueArg_Option_DartHandle> get_send_track(
    Object transceiver,
  ) {
    return _get_send_track(
      transceiver,
    );
  }

  late final _get_send_trackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_DartHandle> Function(
              ffi.Handle)>>('get_send_track');
  late final _get_send_track = _get_send_trackPtr.asFunction<
      ffi.Pointer<DartValueArg_Option_DartHandle> Function(Object)>();

  Object replace_track(
    Object transceiver,
    Object track,
  ) {
    return _replace_track(
      transceiver,
      track,
    );
  }

  late final _replace_trackPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'replace_track');
  late final _replace_track =
      _replace_trackPtr.asFunction<Object Function(Object, Object)>();

  Object drop_sender(
    Object transceiver,
  ) {
    return _drop_sender(
      transceiver,
    );
  }

  late final _drop_senderPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'drop_sender');
  late final _drop_sender =
      _drop_senderPtr.asFunction<Object Function(Object)>();

  bool is_stopped(
    Object transceiver,
  ) {
    return _is_stopped(
      transceiver,
    );
  }

  late final _is_stoppedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Handle)>>('is_stopped');
  late final _is_stopped = _is_stoppedPtr.asFunction<bool Function(Object)>();

  ffi.Pointer<DartValueArg_Option_String> mid(
    Object transceiver,
  ) {
    return _mid(
      transceiver,
    );
  }

  late final _midPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_String> Function(ffi.Handle)>>('mid');
  late final _mid = _midPtr
      .asFunction<ffi.Pointer<DartValueArg_Option_String> Function(Object)>();

  Object set_recv(
    Object transceiver,
    bool active,
  ) {
    return _set_recv(
      transceiver,
      active,
    );
  }

  late final _set_recvPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Bool)>>(
          'set_recv');
  late final _set_recv =
      _set_recvPtr.asFunction<Object Function(Object, bool)>();

  Object set_send(
    Object transceiver,
    bool active,
  ) {
    return _set_send(
      transceiver,
      active,
    );
  }

  late final _set_sendPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Bool)>>(
          'set_send');
  late final _set_send =
      _set_sendPtr.asFunction<Object Function(Object, bool)>();

  Object connect(
    ffi.Pointer<ffi.Char> url,
    Object on_message,
    Object on_close,
  ) {
    return _connect(
      url,
      on_message,
      on_close,
    );
  }

  late final _connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Char>, ffi.Handle, ffi.Handle)>>('connect');
  late final _connect = _connectPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Char>, Object, Object)>();

  void send(
    Object transport,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _send(
      transport,
      message,
    );
  }

  late final _sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Handle, ffi.Pointer<ffi.Char>)>>('send');
  late final _send =
      _sendPtr.asFunction<void Function(Object, ffi.Pointer<ffi.Char>)>();

  int close_code(
    Object close_frame,
  ) {
    return _close_code(
      close_frame,
    );
  }

  late final _close_codePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>('close_code');
  late final _close_code = _close_codePtr.asFunction<int Function(Object)>();

  ffi.Pointer<ffi.Char> close_reason(
    Object close_frame,
  ) {
    return _close_reason(
      close_frame,
    );
  }

  late final _close_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'close_reason');
  late final _close_reason =
      _close_reasonPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  void Callback__call_two_arg(
    ffi.Pointer<ffi.Int> cb,
    DartValue first,
    DartValue second,
  ) {
    return _Callback__call_two_arg(
      cb,
      first,
      second,
    );
  }

  late final _Callback__call_two_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, DartValue,
              DartValue)>>('Callback__call_two_arg');
  late final _Callback__call_two_arg = _Callback__call_two_argPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, DartValue, DartValue)>();

  void Callback__call(
    ffi.Pointer<ffi.Int> cb,
    DartValue val,
  ) {
    return _Callback__call(
      cb,
      val,
    );
  }

  late final _Callback__callPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, DartValue)>>(
      'Callback__call');
  late final _Callback__call = _Callback__callPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, DartValue)>();

  Object call_two_arg_proxy(
    ffi.Pointer<ffi.Int> cb,
  ) {
    return _call_two_arg_proxy(
      cb,
    );
  }

  late final _call_two_arg_proxyPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Int>)>>(
          'call_two_arg_proxy');
  late final _call_two_arg_proxy = _call_two_arg_proxyPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Int>)>();

  Object call_proxy(
    ffi.Pointer<ffi.Int> cb,
  ) {
    return _call_proxy(
      cb,
    );
  }

  late final _call_proxyPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Int>)>>(
          'call_proxy');
  late final _call_proxy =
      _call_proxyPtr.asFunction<Object Function(ffi.Pointer<ffi.Int>)>();

  Object test_callback_listener_int(
    DartValueArg_i64 expects,
  ) {
    return _test_callback_listener_int(
      expects,
    );
  }

  late final _test_callback_listener_intPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(DartValueArg_i64)>>(
          'test_callback_listener_int');
  late final _test_callback_listener_int = _test_callback_listener_intPtr
      .asFunction<Object Function(DartValueArg_i64)>();

  Object test_callback_listener_string(
    DartValueArg_String expects,
  ) {
    return _test_callback_listener_string(
      expects,
    );
  }

  late final _test_callback_listener_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(DartValueArg_String)>>(
          'test_callback_listener_string');
  late final _test_callback_listener_string = _test_callback_listener_stringPtr
      .asFunction<Object Function(DartValueArg_String)>();

  Object test_callback_listener_optional_int(
    DartValueArg_Option_i64 expects,
  ) {
    return _test_callback_listener_optional_int(
      expects,
    );
  }

  late final _test_callback_listener_optional_intPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(DartValueArg_Option_i64)>>(
          'test_callback_listener_optional_int');
  late final _test_callback_listener_optional_int =
      _test_callback_listener_optional_intPtr
          .asFunction<Object Function(DartValueArg_Option_i64)>();

  Object test_callback_listener_optional_string(
    DartValueArg_Option_String expects,
  ) {
    return _test_callback_listener_optional_string(
      expects,
    );
  }

  late final _test_callback_listener_optional_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(DartValueArg_Option_String)>>(
      'test_callback_listener_optional_string');
  late final _test_callback_listener_optional_string =
      _test_callback_listener_optional_stringPtr
          .asFunction<Object Function(DartValueArg_Option_String)>();

  void register__test__test_callback_handle_function(
    TestCallbackHandleFunction f,
  ) {
    return _register__test__test_callback_handle_function(
      f,
    );
  }

  late final _register__test__test_callback_handle_functionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TestCallbackHandleFunction)>>(
      'register__test__test_callback_handle_function');
  late final _register__test__test_callback_handle_function =
      _register__test__test_callback_handle_functionPtr
          .asFunction<void Function(TestCallbackHandleFunction)>();

  Object test_callback_listener_dart_handle() {
    return _test_callback_listener_dart_handle();
  }

  late final _test_callback_listener_dart_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'test_callback_listener_dart_handle');
  late final _test_callback_listener_dart_handle =
      _test_callback_listener_dart_handlePtr.asFunction<Object Function()>();

  void complete(
    Object fut,
    DartValue val,
  ) {
    return _complete(
      fut,
      val,
    );
  }

  late final _completePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, DartValue)>>(
          'complete');
  late final _complete =
      _completePtr.asFunction<void Function(Object, DartValue)>();

  void complete_error(
    Object fut,
    DartError val,
  ) {
    return _complete_error(
      fut,
      val,
    );
  }

  late final _complete_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, DartError)>>(
          'complete_error');
  late final _complete_error =
      _complete_errorPtr.asFunction<void Function(Object, DartError)>();

  Object future(
    Object fut,
  ) {
    return _future(
      fut,
    );
  }

  late final _futurePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>('future');
  late final _future = _futurePtr.asFunction<Object Function(Object)>();

  Object delayed(
    int delay_ms,
  ) {
    return _delayed(
      delay_ms,
    );
  }

  late final _delayedPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int32)>>('delayed');
  late final _delayed = _delayedPtr.asFunction<Object Function(int)>();

  void FutureFromDart__resolve_ok(
    ffi.Pointer<FutureFromDart> future,
    DartValue val,
  ) {
    return _FutureFromDart__resolve_ok(
      future,
      val,
    );
  }

  late final _FutureFromDart__resolve_okPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FutureFromDart>,
              DartValue)>>('FutureFromDart__resolve_ok');
  late final _FutureFromDart__resolve_ok = _FutureFromDart__resolve_okPtr
      .asFunction<void Function(ffi.Pointer<FutureFromDart>, DartValue)>();

  void FutureFromDart__resolve_err(
    ffi.Pointer<FutureFromDart> future,
    Object val,
  ) {
    return _FutureFromDart__resolve_err(
      future,
      val,
    );
  }

  late final _FutureFromDart__resolve_errPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FutureFromDart>,
              ffi.Handle)>>('FutureFromDart__resolve_err');
  late final _FutureFromDart__resolve_err = _FutureFromDart__resolve_errPtr
      .asFunction<void Function(ffi.Pointer<FutureFromDart>, Object)>();

  void complete_proxy(
    Object fut,
    ffi.Pointer<FutureFromDart> resolver,
  ) {
    return _complete_proxy(
      fut,
      resolver,
    );
  }

  late final _complete_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle, ffi.Pointer<FutureFromDart>)>>('complete_proxy');
  late final _complete_proxy = _complete_proxyPtr
      .asFunction<void Function(Object, ffi.Pointer<FutureFromDart>)>();

  Object test__future_from_dart__int(
    Object future,
  ) {
    return _test__future_from_dart__int(
      future,
    );
  }

  late final _test__future_from_dart__intPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'test__future_from_dart__int');
  late final _test__future_from_dart__int =
      _test__future_from_dart__intPtr.asFunction<Object Function(Object)>();

  Object test__future_from_dart__string(
    Object future,
  ) {
    return _test__future_from_dart__string(
      future,
    );
  }

  late final _test__future_from_dart__stringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'test__future_from_dart__string');
  late final _test__future_from_dart__string =
      _test__future_from_dart__stringPtr.asFunction<Object Function(Object)>();

  void register__test__future_from_dart_handle_fn(
    TestFutureHandleFunction f,
  ) {
    return _register__test__future_from_dart_handle_fn(
      f,
    );
  }

  late final _register__test__future_from_dart_handle_fnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TestFutureHandleFunction)>>(
          'register__test__future_from_dart_handle_fn');
  late final _register__test__future_from_dart_handle_fn =
      _register__test__future_from_dart_handle_fnPtr
          .asFunction<void Function(TestFutureHandleFunction)>();

  Object test__future_from_dart__handle(
    Object future,
  ) {
    return _test__future_from_dart__handle(
      future,
    );
  }

  late final _test__future_from_dart__handlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'test__future_from_dart__handle');
  late final _test__future_from_dart__handle =
      _test__future_from_dart__handlePtr.asFunction<Object Function(Object)>();

  Object test__future_from_dart__fails(
    Object future,
  ) {
    return _test__future_from_dart__fails(
      future,
    );
  }

  late final _test__future_from_dart__failsPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'test__future_from_dart__fails');
  late final _test__future_from_dart__fails =
      _test__future_from_dart__failsPtr.asFunction<Object Function(Object)>();

  void caller(
    Object f,
    DartValue val,
  ) {
    return _caller(
      f,
      val,
    );
  }

  late final _callerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, DartValue)>>(
          'caller');
  late final _caller =
      _callerPtr.asFunction<void Function(Object, DartValue)>();

  ffi.Pointer<ffi.Char> runtime_type(
    Object handle,
  ) {
    return _runtime_type(
      handle,
    );
  }

  late final _runtime_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'runtime_type');
  late final _runtime_type =
      _runtime_typePtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  ffi.Pointer<ffi.Char> to_string(
    Object handle,
  ) {
    return _to_string(
      handle,
    );
  }

  late final _to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Handle)>>(
          'to_string');
  late final _to_string =
      _to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(Object)>();

  ffi.Pointer<DartValueArg_Option_DartHandle> get1(
    Object list,
    int index,
  ) {
    return _get1(
      list,
      index,
    );
  }

  late final _get1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DartValueArg_Option_DartHandle> Function(
              ffi.Handle, ffi.Uint32)>>('get');
  late final _get1 = _get1Ptr.asFunction<
      ffi.Pointer<DartValueArg_Option_DartHandle> Function(Object, int)>();

  int length(
    Object list,
  ) {
    return _length(
      list,
    );
  }

  late final _lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Handle)>>('length');
  late final _length = _lengthPtr.asFunction<int Function(Object)>();

  void set1(
    Object map,
    ffi.Pointer<ffi.Char> key,
    DartValue value,
  ) {
    return _set1(
      map,
      key,
      value,
    );
  }

  late final _set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle, ffi.Pointer<ffi.Char>, DartValue)>>('set');
  late final _set1 = _set1Ptr
      .asFunction<void Function(Object, ffi.Pointer<ffi.Char>, DartValue)>();

  void String_free(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _String_free(
      s,
    );
  }

  late final _String_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'String_free');
  late final _String_free =
      _String_freePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void register_free_dart_native_string(
    FreeDartNativeStringFunction f,
  ) {
    return _register_free_dart_native_string(
      f,
    );
  }

  late final _register_free_dart_native_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(FreeDartNativeStringFunction)>>(
      'register_free_dart_native_string');
  late final _register_free_dart_native_string =
      _register_free_dart_native_stringPtr
          .asFunction<void Function(FreeDartNativeStringFunction)>();
}

final class _Dart_Handle extends ffi.Opaque {}

abstract class MemoryOwner {
  static const int Rust = 0;
  static const int Dart = 1;
}

final class FutureFromDart extends ffi.Opaque {}

final class Task extends ffi.Opaque {}

abstract class DartValue_Tag {
  static const int None = 0;
  static const int Ptr = 1;
  static const int Handle = 2;
  static const int String = 3;
  static const int Int = 4;
  static const int Float = 5;
  static const int Bool = 6;
}

final class String_Body extends ffi.Struct {
  @DartValue_Tag1()
  external int tag;

  external ffi.Pointer<ffi.Char> _0;

  @MemoryOwner1()
  external int _1;
}

typedef DartValue_Tag1 = ffi.Uint8;
typedef MemoryOwner1 = ffi.Uint8;

final class DartValue extends ffi.Union {
  @DartValue_Tag1()
  external int tag;

  external UnnamedStruct1 unnamed;

  external UnnamedStruct2 unnamed1;

  external String_Body string;

  external UnnamedStruct3 unnamed2;

  external UnnamedStruct4 unnamed3;

  external UnnamedStruct5 unnamed4;
}

final class UnnamedStruct1 extends ffi.Struct {
  @DartValue_Tag1()
  external int ptr_tag;

  external ffi.Pointer<ffi.Void> ptr;
}

final class UnnamedStruct2 extends ffi.Struct {
  @DartValue_Tag1()
  external int handle_tag;

  external ffi.Pointer<ffi.Handle> handle;
}

final class UnnamedStruct3 extends ffi.Struct {
  @DartValue_Tag1()
  external int int_tag;

  @ffi.Int64()
  external int int_;
}

final class UnnamedStruct4 extends ffi.Struct {
  @DartValue_Tag1()
  external int float_tag;

  @ffi.Double()
  external double float_;
}

final class UnnamedStruct5 extends ffi.Struct {
  @DartValue_Tag1()
  external int bool_tag;

  @ffi.Bool()
  external bool bool_;
}

final class wire_ConnectionHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_DartOpaque extends ffi.Struct {
  @ffi.Int64()
  external int port;

  @ffi.UintPtr()
  external int handle;
}

final class wire_Jason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_RoomHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_LocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MediaManagerHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ApiAudioConstraints extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;
}

final class wire_ApiConstrainFacingMode_Exact extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_ApiConstrainFacingMode_Ideal extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class ApiConstrainFacingModeKind extends ffi.Union {
  external ffi.Pointer<wire_ApiConstrainFacingMode_Exact> Exact;

  external ffi.Pointer<wire_ApiConstrainFacingMode_Ideal> Ideal;
}

final class wire_ApiConstrainFacingMode extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ApiConstrainFacingModeKind> kind;
}

final class wire_ConstrainU32_Exact extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class wire_ConstrainU32_Ideal extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class wire_ConstrainU32_Range extends ffi.Struct {
  @ffi.Uint32()
  external int field0;

  @ffi.Uint32()
  external int field1;
}

final class ConstrainU32Kind extends ffi.Union {
  external ffi.Pointer<wire_ConstrainU32_Exact> Exact;

  external ffi.Pointer<wire_ConstrainU32_Ideal> Ideal;

  external ffi.Pointer<wire_ConstrainU32_Range> Range;
}

final class wire_ConstrainU32 extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ConstrainU32Kind> kind;
}

final class wire_ApiDeviceVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_ApiConstrainFacingMode> facing_mode;

  external ffi.Pointer<wire_ConstrainU32> height;

  external ffi.Pointer<wire_ConstrainU32> width;
}

final class wire_ApiDisplayVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_ConstrainU32> height;

  external ffi.Pointer<wire_ConstrainU32> width;

  external ffi.Pointer<wire_ConstrainU32> frame_rate;
}

final class wire_ApiMediaStreamSettings extends ffi.Struct {
  external ffi.Pointer<wire_ApiAudioConstraints> audio;

  external ffi.Pointer<wire_ApiDeviceVideoTrackConstraints> device_video;

  external ffi.Pointer<wire_ApiDisplayVideoTrackConstraints> display_video;
}

final class wire_ReconnectHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_RemoteMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartError = ffi.Pointer<ffi.Handle>;
typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

typedef DartValueArg_String = DartValue;
typedef DartValueArg_Option_String = DartValue;
typedef DartValueArg_Option_u16 = DartValue;
typedef DartValueArg_Option_i64 = DartValue;
typedef DartValueArg_Option_u32 = DartValue;
typedef DartValueArg_Option_i32 = DartValue;
typedef DartValueArg_Option_DartHandle = DartValue;
typedef DartValueArg_i64 = DartValue;
typedef TestCallbackHandleFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>;
typedef TestFutureHandleFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>;
typedef FreeDartNativeStringFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
