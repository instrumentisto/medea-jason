// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class JasonApi {
  /// Instantiates a new [`Jason`] interface to interact with this library.
  Jason jasonNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta;

  /// Creates a new [`Room`] and returns its [`RoomHandle`].
  ///
  /// [`Room`]: crate::room::Room
  RoomHandle jasonInitRoom({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta;

  /// Returns a [`MediaManagerHandle`].
  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta;

  /// Closes the provided [`RoomHandle`].
  void jasonCloseRoom(
      {required Jason jason, required JasonRh roomToDelete, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta;
}

@sealed
class Jason extends FrbOpaque {
  Jason.fromRaw(int ptr, int drop, int share) : super.unsafe(ptr, drop, share);
}

@sealed
class JasonRh extends FrbOpaque {
  JasonRh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MediaManagerHandle extends FrbOpaque {
  MediaManagerHandle.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RoomHandle extends FrbOpaque {
  RoomHandle.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class JasonApiImpl implements JasonApi {
  final JasonApiPlatform _platform;
  factory JasonApiImpl(ExternalLibrary dylib) =>
      JasonApiImpl.raw(JasonApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory JasonApiImpl.wasm(FutureOr<WasmModule> module) =>
      JasonApiImpl(module as ExternalLibrary);
  JasonApiImpl.raw(this._platform);
  Jason jasonNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_new(),
      parseSuccessData: _wire2api_SyncReturn_Jason,
      constMeta: kJasonNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_new",
        argNames: [],
      );

  RoomHandle jasonInitRoom({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_init_room(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomHandle,
      constMeta: kJasonInitRoomConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonInitRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_init_room",
        argNames: ["jason"],
      );

  MediaManagerHandle jasonMediaManager({required Jason jason, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_media_manager(arg0),
      parseSuccessData: _wire2api_SyncReturn_MediaManagerHandle,
      constMeta: kJasonMediaManagerConstMeta,
      argValues: [jason],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonMediaManagerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_media_manager",
        argNames: ["jason"],
      );

  void jasonCloseRoom(
      {required Jason jason, required JasonRh roomToDelete, dynamic hint}) {
    var arg0 = _platform.api2wire_Jason(jason);
    var arg1 = _platform.api2wire_JasonRh(roomToDelete);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_jason_close_room(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kJasonCloseRoomConstMeta,
      argValues: [jason, roomToDelete],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJasonCloseRoomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "jason_close_room",
        argNames: ["jason", "roomToDelete"],
      );

// Section: wire2api

  Jason _wire2api_Jason(dynamic raw) {
    return Jason.fromRaw(raw[0], raw[1], raw[2]);
  }

  MediaManagerHandle _wire2api_MediaManagerHandle(dynamic raw) {
    return MediaManagerHandle.fromRaw(raw[0], raw[1], raw[2]);
  }

  RoomHandle _wire2api_RoomHandle(dynamic raw) {
    return RoomHandle.fromRaw(raw[0], raw[1], raw[2]);
  }

  Jason _wire2api_SyncReturn_Jason(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return Jason.fromRaw(ptr, drop, lend);
  }

  MediaManagerHandle _wire2api_SyncReturn_MediaManagerHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MediaManagerHandle.fromRaw(ptr, drop, lend);
  }

  RoomHandle _wire2api_SyncReturn_RoomHandle(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RoomHandle.fromRaw(ptr, drop, lend);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

class JasonApiPlatform extends FlutterRustBridgeBase<JasonApiWire> {
  JasonApiPlatform(ffi.DynamicLibrary dylib) : super(JasonApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_Jason> api2wire_Jason(Jason raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_Jason();
    _api_fill_to_wire_Jason(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_JasonRh> api2wire_JasonRh(JasonRh raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_JasonRh();
    _api_fill_to_wire_JasonRh(raw, ptr);
    return ptr;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_Jason(Jason apiObj, ffi.Pointer<wire_Jason> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_JasonRh(
      JasonRh apiObj, ffi.Pointer<wire_JasonRh> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class JasonApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  JasonApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  JasonApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_jason_new() {
    return _wire_jason_new();
  }

  late final _wire_jason_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_jason_new');
  late final _wire_jason_new =
      _wire_jason_newPtr.asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_jason_init_room(
    ffi.Pointer<wire_Jason> jason,
  ) {
    return _wire_jason_init_room(
      jason,
    );
  }

  late final _wire_jason_init_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_Jason>)>>('wire_jason_init_room');
  late final _wire_jason_init_room = _wire_jason_init_roomPtr
      .asFunction<WireSyncReturnStruct Function(ffi.Pointer<wire_Jason>)>();

  WireSyncReturnStruct wire_jason_media_manager(
    ffi.Pointer<wire_Jason> jason,
  ) {
    return _wire_jason_media_manager(
      jason,
    );
  }

  late final _wire_jason_media_managerPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_Jason>)>>('wire_jason_media_manager');
  late final _wire_jason_media_manager = _wire_jason_media_managerPtr
      .asFunction<WireSyncReturnStruct Function(ffi.Pointer<wire_Jason>)>();

  WireSyncReturnStruct wire_jason_close_room(
    ffi.Pointer<wire_Jason> jason,
    ffi.Pointer<wire_JasonRh> room_to_delete,
  ) {
    return _wire_jason_close_room(
      jason,
      room_to_delete,
    );
  }

  late final _wire_jason_close_roomPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_Jason>,
              ffi.Pointer<wire_JasonRh>)>>('wire_jason_close_room');
  late final _wire_jason_close_room = _wire_jason_close_roomPtr.asFunction<
      WireSyncReturnStruct Function(
          ffi.Pointer<wire_Jason>, ffi.Pointer<wire_JasonRh>)>();

  ffi.Pointer<wire_Jason> new_Jason() {
    return _new_Jason();
  }

  late final _new_JasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Jason> Function()>>(
          'new_Jason');
  late final _new_Jason =
      _new_JasonPtr.asFunction<ffi.Pointer<wire_Jason> Function()>();

  ffi.Pointer<wire_JasonRh> new_JasonRh() {
    return _new_JasonRh();
  }

  late final _new_JasonRhPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_JasonRh> Function()>>(
          'new_JasonRh');
  late final _new_JasonRh =
      _new_JasonRhPtr.asFunction<ffi.Pointer<wire_JasonRh> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_Jason extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_JasonRh extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
