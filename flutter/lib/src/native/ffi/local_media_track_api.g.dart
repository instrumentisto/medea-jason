// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class LocalMediaTrackApi {
  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of this
  /// [`LocalMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  int localMediaTrackGetTrack({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta;

  /// Returns a [`MediaKind::Audio`] if this [`LocalMediaTrack`] represents an
  /// audio track, or a [`MediaKind::Video`] if it represents a video track.
  ///
  /// [`MediaKind::Audio`]: crate::media::MediaKind::Audio
  /// [`MediaKind::Video`]: crate::media::MediaKind::Video
  int localMediaTrackKind({required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta;

  /// Returns a [`MediaSourceKind::Device`] if this [`LocalMediaTrack`] is
  /// sourced from some device (webcam/microphone), or a
  /// [`MediaSourceKind::Display`] if it's captured via
  /// [MediaDevices.getDisplayMedia()][1].
  ///
  /// [1]: https://w3.org/TR/screen-capture/#dom-mediadevices-getdisplaymedia
  /// [`MediaSourceKind::Device`]: crate::media::MediaSourceKind::Device
  /// [`MediaSourceKind::Display`]: crate::media::MediaSourceKind::Display
  int localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta;
}

@sealed
class LocalMediaTrack extends FrbOpaque {
  LocalMediaTrack.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class LocalMediaTrackApiImpl implements LocalMediaTrackApi {
  final LocalMediaTrackApiPlatform _platform;
  factory LocalMediaTrackApiImpl(ExternalLibrary dylib) =>
      LocalMediaTrackApiImpl.raw(LocalMediaTrackApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LocalMediaTrackApiImpl.wasm(FutureOr<WasmModule> module) =>
      LocalMediaTrackApiImpl(module as ExternalLibrary);
  LocalMediaTrackApiImpl.raw(this._platform);
  int localMediaTrackGetTrack({required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_get_track(arg0),
      parseSuccessData: _wire2api_SyncReturn_usize,
      constMeta: kLocalMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_get_track",
        argNames: ["track"],
      );

  int localMediaTrackKind({required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_local_media_track_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kLocalMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_kind",
        argNames: ["track"],
      );

  int localMediaTrackMediaSourceKind(
      {required LocalMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_LocalMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_local_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kLocalMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalMediaTrackMediaSourceKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "local_media_track_media_source_kind",
        argNames: ["track"],
      );

// Section: wire2api

  int _wire2api_SyncReturn_u8(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    return dataView.getUint8(0);
  }

  int _wire2api_SyncReturn_usize(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    switch (raw.length) {
      case 8:
        {
          return dataView.getUint64(0);
        }
      case 4:
        {
          return dataView.getUint32(0);
        }
      default:
        {
          throw "Unknow lenght pointer.";
        }
    }
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

class LocalMediaTrackApiPlatform
    extends FlutterRustBridgeBase<LocalMediaTrackApiWire> {
  LocalMediaTrackApiPlatform(ffi.DynamicLibrary dylib)
      : super(LocalMediaTrackApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_LocalMediaTrack> api2wire_LocalMediaTrack(
      LocalMediaTrack raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_LocalMediaTrack();
    _api_fill_to_wire_LocalMediaTrack(raw, ptr);
    return ptr;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_LocalMediaTrack(
      LocalMediaTrack apiObj, ffi.Pointer<wire_LocalMediaTrack> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class LocalMediaTrackApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LocalMediaTrackApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LocalMediaTrackApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_local_media_track_get_track(
    ffi.Pointer<wire_LocalMediaTrack> track,
  ) {
    return _wire_local_media_track_get_track(
      track,
    );
  }

  late final _wire_local_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_LocalMediaTrack>)>>(
      'wire_local_media_track_get_track');
  late final _wire_local_media_track_get_track =
      _wire_local_media_track_get_trackPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_LocalMediaTrack>)>();

  WireSyncReturnStruct wire_local_media_track_kind(
    ffi.Pointer<wire_LocalMediaTrack> track,
  ) {
    return _wire_local_media_track_kind(
      track,
    );
  }

  late final _wire_local_media_track_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_LocalMediaTrack>)>>(
      'wire_local_media_track_kind');
  late final _wire_local_media_track_kind =
      _wire_local_media_track_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_LocalMediaTrack>)>();

  WireSyncReturnStruct wire_local_media_track_media_source_kind(
    ffi.Pointer<wire_LocalMediaTrack> track,
  ) {
    return _wire_local_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_local_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_LocalMediaTrack>)>>(
      'wire_local_media_track_media_source_kind');
  late final _wire_local_media_track_media_source_kind =
      _wire_local_media_track_media_source_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_LocalMediaTrack>)>();

  ffi.Pointer<wire_LocalMediaTrack> new_LocalMediaTrack() {
    return _new_LocalMediaTrack();
  }

  late final _new_LocalMediaTrackPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalMediaTrack> Function()>>(
          'new_LocalMediaTrack');
  late final _new_LocalMediaTrack = _new_LocalMediaTrackPtr
      .asFunction<ffi.Pointer<wire_LocalMediaTrack> Function()>();
}

class wire_LocalMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
