// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class MediaDeviceInfoApi {
  /// Returns unique identifier of the represented device.
  String mediaDeviceInfoDeviceId(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoDeviceIdConstMeta;

  /// Returns kind of the represented device.
  ///
  /// This representation of [MediaDeviceInfo][1] ONLY for input device.
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams/#device-info
  int mediaDeviceInfoKind({required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoKindConstMeta;

  /// Returns label describing the represented device (for example "External USB
  /// Webcam").
  ///
  /// If the device has no associated label, then returns an empty string.
  String mediaDeviceInfoLabel(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoLabelConstMeta;

  /// Returns group identifier of the represented device.
  ///
  /// Two devices have the same group identifier if they belong to the same
  /// physical device. For example, the audio input and output devices
  /// representing the speaker and microphone of the same headset have the
  /// same [groupId][1].
  ///
  /// [1]: https://w3.org/TR/mediacapture-streams/#dom-mediadeviceinfo-groupid
  String? mediaDeviceInfoGroupId(
      {required MediaDeviceInfo mediaDevice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoGroupIdConstMeta;
}

@sealed
class MediaDeviceInfo extends FrbOpaque {
  MediaDeviceInfo.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class MediaDeviceInfoApiImpl implements MediaDeviceInfoApi {
  final MediaDeviceInfoApiPlatform _platform;
  factory MediaDeviceInfoApiImpl(ExternalLibrary dylib) =>
      MediaDeviceInfoApiImpl.raw(MediaDeviceInfoApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MediaDeviceInfoApiImpl.wasm(FutureOr<WasmModule> module) =>
      MediaDeviceInfoApiImpl(module as ExternalLibrary);
  MediaDeviceInfoApiImpl.raw(this._platform);
  String mediaDeviceInfoDeviceId(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_device_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDeviceInfoDeviceIdConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_device_id",
        argNames: ["mediaDevice"],
      );

  int mediaDeviceInfoKind(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kMediaDeviceInfoKindConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_kind",
        argNames: ["mediaDevice"],
      );

  String mediaDeviceInfoLabel(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_label(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDeviceInfoLabelConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_label",
        argNames: ["mediaDevice"],
      );

  String? mediaDeviceInfoGroupId(
      {required MediaDeviceInfo mediaDevice, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDeviceInfo(mediaDevice);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_device_info_group_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_String,
      constMeta: kMediaDeviceInfoGroupIdConstMeta,
      argValues: [mediaDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDeviceInfoGroupIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_device_info_group_id",
        argNames: ["mediaDevice"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  String? _wire2api_SyncReturn_Option_String(dynamic raw) {
    if (raw == null) return null;
    return utf8.decode(raw);
  }

  String _wire2api_SyncReturn_String(dynamic raw) {
    return utf8.decode(raw);
  }

  int _wire2api_SyncReturn_u8(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    return dataView.getUint8(0);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

class MediaDeviceInfoApiPlatform
    extends FlutterRustBridgeBase<MediaDeviceInfoApiWire> {
  MediaDeviceInfoApiPlatform(ffi.DynamicLibrary dylib)
      : super(MediaDeviceInfoApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_MediaDeviceInfo> api2wire_MediaDeviceInfo(
      MediaDeviceInfo raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_MediaDeviceInfo();
    _api_fill_to_wire_MediaDeviceInfo(raw, ptr);
    return ptr;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_MediaDeviceInfo(
      MediaDeviceInfo apiObj, ffi.Pointer<wire_MediaDeviceInfo> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MediaDeviceInfoApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MediaDeviceInfoApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MediaDeviceInfoApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_media_device_info_device_id(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_device_id(
      media_device,
    );
  }

  late final _wire_media_device_info_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_device_id');
  late final _wire_media_device_info_device_id =
      _wire_media_device_info_device_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_device_info_kind(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_kind(
      media_device,
    );
  }

  late final _wire_media_device_info_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_kind');
  late final _wire_media_device_info_kind =
      _wire_media_device_info_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_device_info_label(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_label(
      media_device,
    );
  }

  late final _wire_media_device_info_labelPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_label');
  late final _wire_media_device_info_label =
      _wire_media_device_info_labelPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  WireSyncReturnStruct wire_media_device_info_group_id(
    ffi.Pointer<wire_MediaDeviceInfo> media_device,
  ) {
    return _wire_media_device_info_group_id(
      media_device,
    );
  }

  late final _wire_media_device_info_group_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDeviceInfo>)>>(
      'wire_media_device_info_group_id');
  late final _wire_media_device_info_group_id =
      _wire_media_device_info_group_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDeviceInfo>)>();

  ffi.Pointer<wire_MediaDeviceInfo> new_MediaDeviceInfo() {
    return _new_MediaDeviceInfo();
  }

  late final _new_MediaDeviceInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MediaDeviceInfo> Function()>>(
          'new_MediaDeviceInfo');
  late final _new_MediaDeviceInfo = _new_MediaDeviceInfoPtr
      .asFunction<ffi.Pointer<wire_MediaDeviceInfo> Function()>();
}

class wire_MediaDeviceInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
