// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class MediaDisplayInfoApi {
  /// Returns a unique identifier of the represented display.
  String mediaDisplayInfoDeviceId(
      {required MediaDisplayInfo mediaDisplay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoDeviceIdConstMeta;

  /// Returns a title describing the represented display.
  String? mediaDisplayInfoTitle(
      {required MediaDisplayInfo mediaDisplay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoTitleConstMeta;
}

@sealed
class MediaDisplayInfo extends FrbOpaque {
  MediaDisplayInfo.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class MediaDisplayInfoApiImpl implements MediaDisplayInfoApi {
  final MediaDisplayInfoApiPlatform _platform;
  factory MediaDisplayInfoApiImpl(ExternalLibrary dylib) =>
      MediaDisplayInfoApiImpl.raw(MediaDisplayInfoApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MediaDisplayInfoApiImpl.wasm(FutureOr<WasmModule> module) =>
      MediaDisplayInfoApiImpl(module as ExternalLibrary);
  MediaDisplayInfoApiImpl.raw(this._platform);
  String mediaDisplayInfoDeviceId(
      {required MediaDisplayInfo mediaDisplay, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDisplayInfo(mediaDisplay);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_display_info_device_id(arg0),
      parseSuccessData: _wire2api_SyncReturn_String,
      constMeta: kMediaDisplayInfoDeviceIdConstMeta,
      argValues: [mediaDisplay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_display_info_device_id",
        argNames: ["mediaDisplay"],
      );

  String? mediaDisplayInfoTitle(
      {required MediaDisplayInfo mediaDisplay, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaDisplayInfo(mediaDisplay);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_display_info_title(arg0),
      parseSuccessData: _wire2api_SyncReturn_Option_String,
      constMeta: kMediaDisplayInfoTitleConstMeta,
      argValues: [mediaDisplay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaDisplayInfoTitleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_display_info_title",
        argNames: ["mediaDisplay"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  String? _wire2api_SyncReturn_Option_String(dynamic raw) {
    if (raw == null) return null;
    return utf8.decode(raw);
  }

  String _wire2api_SyncReturn_String(dynamic raw) {
    return utf8.decode(raw);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

class MediaDisplayInfoApiPlatform
    extends FlutterRustBridgeBase<MediaDisplayInfoApiWire> {
  MediaDisplayInfoApiPlatform(ffi.DynamicLibrary dylib)
      : super(MediaDisplayInfoApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_MediaDisplayInfo> api2wire_MediaDisplayInfo(
      MediaDisplayInfo raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_MediaDisplayInfo();
    _api_fill_to_wire_MediaDisplayInfo(raw, ptr);
    return ptr;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_MediaDisplayInfo(
      MediaDisplayInfo apiObj, ffi.Pointer<wire_MediaDisplayInfo> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MediaDisplayInfoApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MediaDisplayInfoApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MediaDisplayInfoApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_media_display_info_device_id(
    ffi.Pointer<wire_MediaDisplayInfo> media_display,
  ) {
    return _wire_media_display_info_device_id(
      media_display,
    );
  }

  late final _wire_media_display_info_device_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDisplayInfo>)>>(
      'wire_media_display_info_device_id');
  late final _wire_media_display_info_device_id =
      _wire_media_display_info_device_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDisplayInfo>)>();

  WireSyncReturnStruct wire_media_display_info_title(
    ffi.Pointer<wire_MediaDisplayInfo> media_display,
  ) {
    return _wire_media_display_info_title(
      media_display,
    );
  }

  late final _wire_media_display_info_titlePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaDisplayInfo>)>>(
      'wire_media_display_info_title');
  late final _wire_media_display_info_title =
      _wire_media_display_info_titlePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaDisplayInfo>)>();

  ffi.Pointer<wire_MediaDisplayInfo> new_MediaDisplayInfo() {
    return _new_MediaDisplayInfo();
  }

  late final _new_MediaDisplayInfoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_MediaDisplayInfo> Function()>>(
      'new_MediaDisplayInfo');
  late final _new_MediaDisplayInfo = _new_MediaDisplayInfoPtr
      .asFunction<ffi.Pointer<wire_MediaDisplayInfo> Function()>();
}

class wire_MediaDisplayInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
