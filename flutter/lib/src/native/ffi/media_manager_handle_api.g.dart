// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class MediaManagerHandleApi {
  /// Returns [`LocalMediaTrack`]s objects, built from the provided
  /// [`MediaStreamSettings`].
  ///
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  MyDartFuture mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required MediaStreamSettings caps,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta;

  /// Returns a list of [`MediaDeviceInfo`] objects representing available media
  /// input and devices, such as microphones, cameras, and so forth.
  MyDartFuture mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta;

  /// Returns a list of [`MediaDisplayInfo`] objects representing available
  /// sources that can be used for screen capturing.
  MyDartFuture mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta;

  /// Switches the current output audio device to the device with the provided
  /// `device_id`.
  MyDartFuture mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta;

  /// Sets the microphone volume level in percents.
  MyDartFuture mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta;

  /// Indicates whether it's possible to access microphone volume settings.
  MyDartFuture mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta;

  /// Returns the current microphone volume level in percents.
  MyDartFuture mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta;

  /// Subscribes onto the [`MediaManagerHandle`]'s `devicechange` event.
  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager,
      required MediaManagerHandleDh cb,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaManagerHandleOnDeviceChangeConstMeta;
}

@sealed
class MediaManagerHandle extends FrbOpaque {
  MediaManagerHandle.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MediaManagerHandleDh extends FrbOpaque {
  MediaManagerHandleDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MediaStreamSettings extends FrbOpaque {
  MediaStreamSettings.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MyDartFuture extends FrbOpaque {
  MyDartFuture.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class MediaManagerHandleApiImpl implements MediaManagerHandleApi {
  final MediaManagerHandleApiPlatform _platform;
  factory MediaManagerHandleApiImpl(ExternalLibrary dylib) =>
      MediaManagerHandleApiImpl.raw(MediaManagerHandleApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MediaManagerHandleApiImpl.wasm(FutureOr<WasmModule> module) =>
      MediaManagerHandleApiImpl(module as ExternalLibrary);
  MediaManagerHandleApiImpl.raw(this._platform);
  MyDartFuture mediaManagerHandleInitLocalTracks(
      {required MediaManagerHandle manager,
      required MediaStreamSettings caps,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_MediaStreamSettings(caps);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_init_local_tracks(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleInitLocalTracksConstMeta,
      argValues: [manager, caps],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleInitLocalTracksConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_init_local_tracks",
            argNames: ["manager", "caps"],
          );

  MyDartFuture mediaManagerHandleEnumerateDevices(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_devices(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleEnumerateDevicesConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDevicesConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_devices",
            argNames: ["manager"],
          );

  MyDartFuture mediaManagerHandleEnumerateDisplays(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_enumerate_displays(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleEnumerateDisplaysConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleEnumerateDisplaysConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_enumerate_displays",
            argNames: ["manager"],
          );

  MyDartFuture mediaManagerHandleSetOutputAudioId(
      {required MediaManagerHandle manager,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_String(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_output_audio_id(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleSetOutputAudioIdConstMeta,
      argValues: [manager, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetOutputAudioIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_output_audio_id",
            argNames: ["manager", "deviceId"],
          );

  MyDartFuture mediaManagerHandleSetMicrophoneVolume(
      {required MediaManagerHandle manager, required int level, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_i64(level);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_set_microphone_volume(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleSetMicrophoneVolumeConstMeta,
      argValues: [manager, level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleSetMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_set_microphone_volume",
            argNames: ["manager", "level"],
          );

  MyDartFuture mediaManagerHandleMicrophoneVolumeIsAvailable(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_microphone_volume_is_available(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeIsAvailableConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume_is_available",
            argNames: ["manager"],
          );

  MyDartFuture mediaManagerHandleMicrophoneVolume(
      {required MediaManagerHandle manager, dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_manager_handle_microphone_volume(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kMediaManagerHandleMicrophoneVolumeConstMeta,
      argValues: [manager],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleMicrophoneVolumeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_microphone_volume",
            argNames: ["manager"],
          );

  void mediaManagerHandleOnDeviceChange(
      {required MediaManagerHandle manager,
      required MediaManagerHandleDh cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_MediaManagerHandle(manager);
    var arg1 = _platform.api2wire_MediaManagerHandleDh(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_media_manager_handle_on_device_change(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaManagerHandleOnDeviceChangeConstMeta,
      argValues: [manager, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaManagerHandleOnDeviceChangeConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_manager_handle_on_device_change",
            argNames: ["manager", "cb"],
          );

// Section: wire2api

  MyDartFuture _wire2api_MyDartFuture(dynamic raw) {
    return MyDartFuture.fromRaw(raw[0], raw[1], raw[2]);
  }

  MyDartFuture _wire2api_SyncReturn_MyDartFuture(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MyDartFuture.fromRaw(ptr, drop, lend);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

class MediaManagerHandleApiPlatform
    extends FlutterRustBridgeBase<MediaManagerHandleApiWire> {
  MediaManagerHandleApiPlatform(ffi.DynamicLibrary dylib)
      : super(MediaManagerHandleApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_MediaManagerHandle> api2wire_MediaManagerHandle(
      MediaManagerHandle raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_MediaManagerHandle();
    _api_fill_to_wire_MediaManagerHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MediaManagerHandleDh> api2wire_MediaManagerHandleDh(
      MediaManagerHandleDh raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_MediaManagerHandleDh();
    _api_fill_to_wire_MediaManagerHandleDh(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MediaStreamSettings> api2wire_MediaStreamSettings(
      MediaStreamSettings raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_MediaStreamSettings();
    _api_fill_to_wire_MediaStreamSettings(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_8(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_MediaManagerHandle(
      MediaManagerHandle apiObj, ffi.Pointer<wire_MediaManagerHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_MediaManagerHandleDh(MediaManagerHandleDh apiObj,
      ffi.Pointer<wire_MediaManagerHandleDh> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_MediaStreamSettings(MediaStreamSettings apiObj,
      ffi.Pointer<wire_MediaStreamSettings> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MediaManagerHandleApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MediaManagerHandleApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MediaManagerHandleApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_media_manager_handle_init_local_tracks(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    ffi.Pointer<wire_MediaStreamSettings> caps,
  ) {
    return _wire_media_manager_handle_init_local_tracks(
      manager,
      caps,
    );
  }

  late final _wire_media_manager_handle_init_local_tracksPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>,
                  ffi.Pointer<wire_MediaStreamSettings>)>>(
      'wire_media_manager_handle_init_local_tracks');
  late final _wire_media_manager_handle_init_local_tracks =
      _wire_media_manager_handle_init_local_tracksPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Pointer<wire_MediaStreamSettings>)>();

  WireSyncReturnStruct wire_media_manager_handle_enumerate_devices(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_enumerate_devices(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_devicesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>)>>(
      'wire_media_manager_handle_enumerate_devices');
  late final _wire_media_manager_handle_enumerate_devices =
      _wire_media_manager_handle_enumerate_devicesPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_enumerate_displays(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_enumerate_displays(
      manager,
    );
  }

  late final _wire_media_manager_handle_enumerate_displaysPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>)>>(
      'wire_media_manager_handle_enumerate_displays');
  late final _wire_media_manager_handle_enumerate_displays =
      _wire_media_manager_handle_enumerate_displaysPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_set_output_audio_id(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_media_manager_handle_set_output_audio_id(
      manager,
      device_id,
    );
  }

  late final _wire_media_manager_handle_set_output_audio_idPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_media_manager_handle_set_output_audio_id');
  late final _wire_media_manager_handle_set_output_audio_id =
      _wire_media_manager_handle_set_output_audio_idPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_media_manager_handle_set_microphone_volume(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    int level,
  ) {
    return _wire_media_manager_handle_set_microphone_volume(
      manager,
      level,
    );
  }

  late final _wire_media_manager_handle_set_microphone_volumePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Int64)>>('wire_media_manager_handle_set_microphone_volume');
  late final _wire_media_manager_handle_set_microphone_volume =
      _wire_media_manager_handle_set_microphone_volumePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>, int)>();

  WireSyncReturnStruct wire_media_manager_handle_microphone_volume_is_available(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_microphone_volume_is_available(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volume_is_availablePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturnStruct Function(
                      ffi.Pointer<wire_MediaManagerHandle>)>>(
          'wire_media_manager_handle_microphone_volume_is_available');
  late final _wire_media_manager_handle_microphone_volume_is_available =
      _wire_media_manager_handle_microphone_volume_is_availablePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_microphone_volume(
    ffi.Pointer<wire_MediaManagerHandle> manager,
  ) {
    return _wire_media_manager_handle_microphone_volume(
      manager,
    );
  }

  late final _wire_media_manager_handle_microphone_volumePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>)>>(
      'wire_media_manager_handle_microphone_volume');
  late final _wire_media_manager_handle_microphone_volume =
      _wire_media_manager_handle_microphone_volumePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_MediaManagerHandle>)>();

  WireSyncReturnStruct wire_media_manager_handle_on_device_change(
    ffi.Pointer<wire_MediaManagerHandle> manager,
    ffi.Pointer<wire_MediaManagerHandleDh> cb,
  ) {
    return _wire_media_manager_handle_on_device_change(
      manager,
      cb,
    );
  }

  late final _wire_media_manager_handle_on_device_changePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_MediaManagerHandle>,
                  ffi.Pointer<wire_MediaManagerHandleDh>)>>(
      'wire_media_manager_handle_on_device_change');
  late final _wire_media_manager_handle_on_device_change =
      _wire_media_manager_handle_on_device_changePtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_MediaManagerHandle>,
              ffi.Pointer<wire_MediaManagerHandleDh>)>();

  ffi.Pointer<wire_MediaManagerHandle> new_MediaManagerHandle() {
    return _new_MediaManagerHandle();
  }

  late final _new_MediaManagerHandlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_MediaManagerHandle> Function()>>(
      'new_MediaManagerHandle');
  late final _new_MediaManagerHandle = _new_MediaManagerHandlePtr
      .asFunction<ffi.Pointer<wire_MediaManagerHandle> Function()>();

  ffi.Pointer<wire_MediaManagerHandleDh> new_MediaManagerHandleDh() {
    return _new_MediaManagerHandleDh();
  }

  late final _new_MediaManagerHandleDhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_MediaManagerHandleDh>
              Function()>>('new_MediaManagerHandleDh');
  late final _new_MediaManagerHandleDh = _new_MediaManagerHandleDhPtr
      .asFunction<ffi.Pointer<wire_MediaManagerHandleDh> Function()>();

  ffi.Pointer<wire_MediaStreamSettings> new_MediaStreamSettings() {
    return _new_MediaStreamSettings();
  }

  late final _new_MediaStreamSettingsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_MediaStreamSettings> Function()>>(
      'new_MediaStreamSettings');
  late final _new_MediaStreamSettings = _new_MediaStreamSettingsPtr
      .asFunction<ffi.Pointer<wire_MediaStreamSettings> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_8(
    int len,
  ) {
    return _new_uint_8_list_8(
      len,
    );
  }

  late final _new_uint_8_list_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_8');
  late final _new_uint_8_list_8 = _new_uint_8_list_8Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();
}

class wire_MediaManagerHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_MediaStreamSettings extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MediaManagerHandleDh extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
