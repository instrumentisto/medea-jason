// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class MediaStreamSettingsApi {
  /// Creates new [`MediaStreamSettings`] with none constraints configured.
  RefCellMediaStreamSettings mediaStreamSettingsNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsNewConstMeta;

  /// Creates new [`MediaStreamSettings`] with none constraints configured.
  RoomHandleMs mediaStreamSettingsCast(
      {required RefCellMediaStreamSettings mediaStreamSettings, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsCastConstMeta;

  /// Specifies a nature and settings of an audio [`MediaStreamTrack`].
  ///
  /// [`MediaStreamTrack`]: crate::platform::MediaStreamTrack
  void mediaStreamSettingsAudio(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required AudioTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsAudioConstMeta;

  /// Set constraints for obtaining a local video sourced from a media device.
  void mediaStreamSettingsDeviceVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required DeviceVideoTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDeviceVideoConstMeta;

  /// Set constraints for capturing a local video from user's display.
  void mediaStreamSettingsDisplayVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required DisplayVideoTrackConstraints constraints,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDisplayVideoConstMeta;
}

@sealed
class AudioTrackConstraints extends FrbOpaque {
  AudioTrackConstraints.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class DeviceVideoTrackConstraints extends FrbOpaque {
  DeviceVideoTrackConstraints.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class DisplayVideoTrackConstraints extends FrbOpaque {
  DisplayVideoTrackConstraints.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RefCellMediaStreamSettings extends FrbOpaque {
  RefCellMediaStreamSettings.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RoomHandleMs extends FrbOpaque {
  RoomHandleMs.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class MediaStreamSettingsApiImpl implements MediaStreamSettingsApi {
  final MediaStreamSettingsApiPlatform _platform;
  factory MediaStreamSettingsApiImpl(ExternalLibrary dylib) =>
      MediaStreamSettingsApiImpl.raw(MediaStreamSettingsApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MediaStreamSettingsApiImpl.wasm(FutureOr<WasmModule> module) =>
      MediaStreamSettingsApiImpl(module as ExternalLibrary);
  MediaStreamSettingsApiImpl.raw(this._platform);
  RefCellMediaStreamSettings mediaStreamSettingsNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_stream_settings_new(),
      parseSuccessData: _wire2api_SyncReturn_RefCellMediaStreamSettings,
      constMeta: kMediaStreamSettingsNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_new",
        argNames: [],
      );

  RoomHandleMs mediaStreamSettingsCast(
      {required RefCellMediaStreamSettings mediaStreamSettings, dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_media_stream_settings_cast(arg0),
      parseSuccessData: _wire2api_SyncReturn_RoomHandleMs,
      constMeta: kMediaStreamSettingsCastConstMeta,
      argValues: [mediaStreamSettings],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsCastConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_cast",
        argNames: ["mediaStreamSettings"],
      );

  void mediaStreamSettingsAudio(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required AudioTrackConstraints constraints,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    var arg1 = _platform.api2wire_AudioTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_audio(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaStreamSettingsAudioConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_audio",
        argNames: ["mediaStreamSettings", "constraints"],
      );

  void mediaStreamSettingsDeviceVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required DeviceVideoTrackConstraints constraints,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    var arg1 = _platform.api2wire_DeviceVideoTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_device_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaStreamSettingsDeviceVideoConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediaStreamSettingsDeviceVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "media_stream_settings_device_video",
        argNames: ["mediaStreamSettings", "constraints"],
      );

  void mediaStreamSettingsDisplayVideo(
      {required RefCellMediaStreamSettings mediaStreamSettings,
      required DisplayVideoTrackConstraints constraints,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_RefCellMediaStreamSettings(mediaStreamSettings);
    var arg1 = _platform.api2wire_DisplayVideoTrackConstraints(constraints);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_media_stream_settings_display_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kMediaStreamSettingsDisplayVideoConstMeta,
      argValues: [mediaStreamSettings, constraints],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediaStreamSettingsDisplayVideoConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "media_stream_settings_display_video",
            argNames: ["mediaStreamSettings", "constraints"],
          );

// Section: wire2api

  RefCellMediaStreamSettings _wire2api_RefCellMediaStreamSettings(dynamic raw) {
    return RefCellMediaStreamSettings.fromRaw(raw[0], raw[1], raw[2]);
  }

  RoomHandleMs _wire2api_RoomHandleMs(dynamic raw) {
    return RoomHandleMs.fromRaw(raw[0], raw[1], raw[2]);
  }

  RefCellMediaStreamSettings _wire2api_SyncReturn_RefCellMediaStreamSettings(
      dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RefCellMediaStreamSettings.fromRaw(ptr, drop, lend);
  }

  RoomHandleMs _wire2api_SyncReturn_RoomHandleMs(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RoomHandleMs.fromRaw(ptr, drop, lend);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

class MediaStreamSettingsApiPlatform
    extends FlutterRustBridgeBase<MediaStreamSettingsApiWire> {
  MediaStreamSettingsApiPlatform(ffi.DynamicLibrary dylib)
      : super(MediaStreamSettingsApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_AudioTrackConstraints> api2wire_AudioTrackConstraints(
      AudioTrackConstraints raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_AudioTrackConstraints();
    _api_fill_to_wire_AudioTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DeviceVideoTrackConstraints>
      api2wire_DeviceVideoTrackConstraints(DeviceVideoTrackConstraints raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_DeviceVideoTrackConstraints();
    _api_fill_to_wire_DeviceVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DisplayVideoTrackConstraints>
      api2wire_DisplayVideoTrackConstraints(DisplayVideoTrackConstraints raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_DisplayVideoTrackConstraints();
    _api_fill_to_wire_DisplayVideoTrackConstraints(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefCellMediaStreamSettings>
      api2wire_RefCellMediaStreamSettings(RefCellMediaStreamSettings raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RefCellMediaStreamSettings();
    _api_fill_to_wire_RefCellMediaStreamSettings(raw, ptr);
    return ptr;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_AudioTrackConstraints(AudioTrackConstraints apiObj,
      ffi.Pointer<wire_AudioTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_DeviceVideoTrackConstraints(
      DeviceVideoTrackConstraints apiObj,
      ffi.Pointer<wire_DeviceVideoTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_DisplayVideoTrackConstraints(
      DisplayVideoTrackConstraints apiObj,
      ffi.Pointer<wire_DisplayVideoTrackConstraints> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RefCellMediaStreamSettings(
      RefCellMediaStreamSettings apiObj,
      ffi.Pointer<wire_RefCellMediaStreamSettings> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MediaStreamSettingsApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MediaStreamSettingsApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MediaStreamSettingsApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_media_stream_settings_new() {
    return _wire_media_stream_settings_new();
  }

  late final _wire_media_stream_settings_newPtr =
      _lookup<ffi.NativeFunction<WireSyncReturnStruct Function()>>(
          'wire_media_stream_settings_new');
  late final _wire_media_stream_settings_new =
      _wire_media_stream_settings_newPtr
          .asFunction<WireSyncReturnStruct Function()>();

  WireSyncReturnStruct wire_media_stream_settings_cast(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
  ) {
    return _wire_media_stream_settings_cast(
      media_stream_settings,
    );
  }

  late final _wire_media_stream_settings_castPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>)>>(
      'wire_media_stream_settings_cast');
  late final _wire_media_stream_settings_cast =
      _wire_media_stream_settings_castPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>)>();

  WireSyncReturnStruct wire_media_stream_settings_audio(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
    ffi.Pointer<wire_AudioTrackConstraints> constraints,
  ) {
    return _wire_media_stream_settings_audio(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>,
                  ffi.Pointer<wire_AudioTrackConstraints>)>>(
      'wire_media_stream_settings_audio');
  late final _wire_media_stream_settings_audio =
      _wire_media_stream_settings_audioPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Pointer<wire_AudioTrackConstraints>)>();

  WireSyncReturnStruct wire_media_stream_settings_device_video(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
    ffi.Pointer<wire_DeviceVideoTrackConstraints> constraints,
  ) {
    return _wire_media_stream_settings_device_video(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_device_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>,
                  ffi.Pointer<wire_DeviceVideoTrackConstraints>)>>(
      'wire_media_stream_settings_device_video');
  late final _wire_media_stream_settings_device_video =
      _wire_media_stream_settings_device_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Pointer<wire_DeviceVideoTrackConstraints>)>();

  WireSyncReturnStruct wire_media_stream_settings_display_video(
    ffi.Pointer<wire_RefCellMediaStreamSettings> media_stream_settings,
    ffi.Pointer<wire_DisplayVideoTrackConstraints> constraints,
  ) {
    return _wire_media_stream_settings_display_video(
      media_stream_settings,
      constraints,
    );
  }

  late final _wire_media_stream_settings_display_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RefCellMediaStreamSettings>,
                  ffi.Pointer<wire_DisplayVideoTrackConstraints>)>>(
      'wire_media_stream_settings_display_video');
  late final _wire_media_stream_settings_display_video =
      _wire_media_stream_settings_display_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RefCellMediaStreamSettings>,
              ffi.Pointer<wire_DisplayVideoTrackConstraints>)>();

  ffi.Pointer<wire_AudioTrackConstraints> new_AudioTrackConstraints() {
    return _new_AudioTrackConstraints();
  }

  late final _new_AudioTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_AudioTrackConstraints>
              Function()>>('new_AudioTrackConstraints');
  late final _new_AudioTrackConstraints = _new_AudioTrackConstraintsPtr
      .asFunction<ffi.Pointer<wire_AudioTrackConstraints> Function()>();

  ffi.Pointer<wire_DeviceVideoTrackConstraints>
      new_DeviceVideoTrackConstraints() {
    return _new_DeviceVideoTrackConstraints();
  }

  late final _new_DeviceVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_DeviceVideoTrackConstraints>
              Function()>>('new_DeviceVideoTrackConstraints');
  late final _new_DeviceVideoTrackConstraints =
      _new_DeviceVideoTrackConstraintsPtr.asFunction<
          ffi.Pointer<wire_DeviceVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_DisplayVideoTrackConstraints>
      new_DisplayVideoTrackConstraints() {
    return _new_DisplayVideoTrackConstraints();
  }

  late final _new_DisplayVideoTrackConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_DisplayVideoTrackConstraints>
              Function()>>('new_DisplayVideoTrackConstraints');
  late final _new_DisplayVideoTrackConstraints =
      _new_DisplayVideoTrackConstraintsPtr.asFunction<
          ffi.Pointer<wire_DisplayVideoTrackConstraints> Function()>();

  ffi.Pointer<wire_RefCellMediaStreamSettings>
      new_RefCellMediaStreamSettings() {
    return _new_RefCellMediaStreamSettings();
  }

  late final _new_RefCellMediaStreamSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RefCellMediaStreamSettings>
              Function()>>('new_RefCellMediaStreamSettings');
  late final _new_RefCellMediaStreamSettings =
      _new_RefCellMediaStreamSettingsPtr.asFunction<
          ffi.Pointer<wire_RefCellMediaStreamSettings> Function()>();
}

class wire_RefCellMediaStreamSettings extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_AudioTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DeviceVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DisplayVideoTrackConstraints extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
