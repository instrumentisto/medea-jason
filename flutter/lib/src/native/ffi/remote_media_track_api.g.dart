// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class RemoteMediaTrackApi {
  /// Returns a [`Dart_Handle`] to the underlying [`MediaStreamTrack`] of track
  /// [`RemoteMediaTrack`].
  ///
  /// [`MediaStreamTrack`]: platform::MediaStreamTrack
  RemoteMediaTrackDh remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is muted.
  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is unmuted.
  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta;

  /// Sets callback to invoke when track [`RemoteMediaTrack`] is stopped.
  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta;

  /// Sets callback to invoke whenever track [`RemoteMediaTrack`]'s general
  /// [`MediaDirection`] is changed.
  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta;

  /// Indicate whether track [`RemoteMediaTrack`] is muted.
  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta;

  /// Returns track [`RemoteMediaTrack`]'s kind (audio/video).
  int remoteMediaTrackKind({required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta;

  /// Returns track [`RemoteMediaTrack`]'s media source kind.
  int remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaSourceKindConstMeta;

  /// Returns the current general [`MediaDirection`] of track
  /// [`RemoteMediaTrack`].
  int remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta;
}

@sealed
class RemoteMediaTrack extends FrbOpaque {
  RemoteMediaTrack.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RemoteMediaTrackDh extends FrbOpaque {
  RemoteMediaTrackDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class RemoteMediaTrackApiImpl implements RemoteMediaTrackApi {
  final RemoteMediaTrackApiPlatform _platform;
  factory RemoteMediaTrackApiImpl(ExternalLibrary dylib) =>
      RemoteMediaTrackApiImpl.raw(RemoteMediaTrackApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RemoteMediaTrackApiImpl.wasm(FutureOr<WasmModule> module) =>
      RemoteMediaTrackApiImpl(module as ExternalLibrary);
  RemoteMediaTrackApiImpl.raw(this._platform);
  RemoteMediaTrackDh remoteMediaTrackGetTrack(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_get_track(arg0),
      parseSuccessData: _wire2api_SyncReturn_RemoteMediaTrackDh,
      constMeta: kRemoteMediaTrackGetTrackConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackGetTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_get_track",
        argNames: ["track"],
      );

  void remoteMediaTrackOnMuted(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_RemoteMediaTrackDh(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_muted(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnMutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_muted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnUnmuted(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_RemoteMediaTrackDh(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_unmuted(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnUnmutedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnUnmutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_unmuted",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnStopped(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_RemoteMediaTrackDh(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_on_stopped(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnStoppedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackOnStoppedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_on_stopped",
        argNames: ["track", "f"],
      );

  void remoteMediaTrackOnMediaDirectionChanged(
      {required RemoteMediaTrack track,
      required RemoteMediaTrackDh f,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    var arg1 = _platform.api2wire_RemoteMediaTrackDh(f);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_remote_media_track_on_media_direction_changed(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRemoteMediaTrackOnMediaDirectionChangedConstMeta,
      argValues: [track, f],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackOnMediaDirectionChangedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_on_media_direction_changed",
            argNames: ["track", "f"],
          );

  bool remoteMediaTrackMuted({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_muted(arg0),
      parseSuccessData: _wire2api_SyncReturn_bool,
      constMeta: kRemoteMediaTrackMutedConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMutedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_muted",
        argNames: ["track"],
      );

  int remoteMediaTrackKind({required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remote_media_track_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackKindConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_kind",
        argNames: ["track"],
      );

  int remoteMediaTrackMediaSourceKind(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_source_kind(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackMediaSourceKindConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoteMediaTrackMediaSourceKindConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remote_media_track_media_source_kind",
            argNames: ["track"],
          );

  int remoteMediaTrackMediaDirection(
      {required RemoteMediaTrack track, dynamic hint}) {
    var arg0 = _platform.api2wire_RemoteMediaTrack(track);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remote_media_track_media_direction(arg0),
      parseSuccessData: _wire2api_SyncReturn_u8,
      constMeta: kRemoteMediaTrackMediaDirectionConstMeta,
      argValues: [track],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoteMediaTrackMediaDirectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remote_media_track_media_direction",
        argNames: ["track"],
      );

// Section: wire2api

  RemoteMediaTrackDh _wire2api_RemoteMediaTrackDh(dynamic raw) {
    return RemoteMediaTrackDh.fromRaw(raw[0], raw[1], raw[2]);
  }

  RemoteMediaTrackDh _wire2api_SyncReturn_RemoteMediaTrackDh(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return RemoteMediaTrackDh.fromRaw(ptr, drop, lend);
  }

  bool _wire2api_SyncReturn_bool(dynamic raw) {
    return uint8ListToBool(raw);
  }

  int _wire2api_SyncReturn_u8(dynamic raw) {
    final dataView = ByteData.view(raw.buffer);
    return dataView.getUint8(0);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

class RemoteMediaTrackApiPlatform
    extends FlutterRustBridgeBase<RemoteMediaTrackApiWire> {
  RemoteMediaTrackApiPlatform(ffi.DynamicLibrary dylib)
      : super(RemoteMediaTrackApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_RemoteMediaTrack> api2wire_RemoteMediaTrack(
      RemoteMediaTrack raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RemoteMediaTrack();
    _api_fill_to_wire_RemoteMediaTrack(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RemoteMediaTrackDh> api2wire_RemoteMediaTrackDh(
      RemoteMediaTrackDh raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RemoteMediaTrackDh();
    _api_fill_to_wire_RemoteMediaTrackDh(raw, ptr);
    return ptr;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_RemoteMediaTrack(
      RemoteMediaTrack apiObj, ffi.Pointer<wire_RemoteMediaTrack> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RemoteMediaTrackDh(
      RemoteMediaTrackDh apiObj, ffi.Pointer<wire_RemoteMediaTrackDh> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RemoteMediaTrackApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RemoteMediaTrackApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RemoteMediaTrackApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_remote_media_track_get_track(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_get_track(
      track,
    );
  }

  late final _wire_remote_media_track_get_trackPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_get_track');
  late final _wire_remote_media_track_get_track =
      _wire_remote_media_track_get_trackPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_on_muted(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_RemoteMediaTrackDh> f,
  ) {
    return _wire_remote_media_track_on_muted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_mutedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_RemoteMediaTrackDh>)>>(
      'wire_remote_media_track_on_muted');
  late final _wire_remote_media_track_on_muted =
      _wire_remote_media_track_on_mutedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_RemoteMediaTrackDh>)>();

  WireSyncReturnStruct wire_remote_media_track_on_unmuted(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_RemoteMediaTrackDh> f,
  ) {
    return _wire_remote_media_track_on_unmuted(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_unmutedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_RemoteMediaTrackDh>)>>(
      'wire_remote_media_track_on_unmuted');
  late final _wire_remote_media_track_on_unmuted =
      _wire_remote_media_track_on_unmutedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_RemoteMediaTrackDh>)>();

  WireSyncReturnStruct wire_remote_media_track_on_stopped(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_RemoteMediaTrackDh> f,
  ) {
    return _wire_remote_media_track_on_stopped(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_stoppedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_RemoteMediaTrackDh>)>>(
      'wire_remote_media_track_on_stopped');
  late final _wire_remote_media_track_on_stopped =
      _wire_remote_media_track_on_stoppedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_RemoteMediaTrackDh>)>();

  WireSyncReturnStruct wire_remote_media_track_on_media_direction_changed(
    ffi.Pointer<wire_RemoteMediaTrack> track,
    ffi.Pointer<wire_RemoteMediaTrackDh> f,
  ) {
    return _wire_remote_media_track_on_media_direction_changed(
      track,
      f,
    );
  }

  late final _wire_remote_media_track_on_media_direction_changedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
                  ffi.Pointer<wire_RemoteMediaTrackDh>)>>(
      'wire_remote_media_track_on_media_direction_changed');
  late final _wire_remote_media_track_on_media_direction_changed =
      _wire_remote_media_track_on_media_direction_changedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>,
              ffi.Pointer<wire_RemoteMediaTrackDh>)>();

  WireSyncReturnStruct wire_remote_media_track_muted(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_muted(
      track,
    );
  }

  late final _wire_remote_media_track_mutedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_muted');
  late final _wire_remote_media_track_muted =
      _wire_remote_media_track_mutedPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_kind(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_kind(
      track,
    );
  }

  late final _wire_remote_media_track_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_kind');
  late final _wire_remote_media_track_kind =
      _wire_remote_media_track_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_media_source_kind(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_media_source_kind(
      track,
    );
  }

  late final _wire_remote_media_track_media_source_kindPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_media_source_kind');
  late final _wire_remote_media_track_media_source_kind =
      _wire_remote_media_track_media_source_kindPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  WireSyncReturnStruct wire_remote_media_track_media_direction(
    ffi.Pointer<wire_RemoteMediaTrack> track,
  ) {
    return _wire_remote_media_track_media_direction(
      track,
    );
  }

  late final _wire_remote_media_track_media_directionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RemoteMediaTrack>)>>(
      'wire_remote_media_track_media_direction');
  late final _wire_remote_media_track_media_direction =
      _wire_remote_media_track_media_directionPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RemoteMediaTrack>)>();

  ffi.Pointer<wire_RemoteMediaTrack> new_RemoteMediaTrack() {
    return _new_RemoteMediaTrack();
  }

  late final _new_RemoteMediaTrackPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_RemoteMediaTrack> Function()>>(
      'new_RemoteMediaTrack');
  late final _new_RemoteMediaTrack = _new_RemoteMediaTrackPtr
      .asFunction<ffi.Pointer<wire_RemoteMediaTrack> Function()>();

  ffi.Pointer<wire_RemoteMediaTrackDh> new_RemoteMediaTrackDh() {
    return _new_RemoteMediaTrackDh();
  }

  late final _new_RemoteMediaTrackDhPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_RemoteMediaTrackDh> Function()>>(
      'new_RemoteMediaTrackDh');
  late final _new_RemoteMediaTrackDh = _new_RemoteMediaTrackDhPtr
      .asFunction<ffi.Pointer<wire_RemoteMediaTrackDh> Function()>();
}

class wire_RemoteMediaTrack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RemoteMediaTrackDh extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
