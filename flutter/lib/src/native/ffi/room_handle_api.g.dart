// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class RoomHandleApi {
  /// Connects to a media server and joins the [`Room`] with the provided
  /// authorization `token`.
  ///
  /// Authorization token has a fixed format:
  /// `{{ Host URL }}/{{ Room ID }}/{{ Member ID }}?token={{ Auth Token }}`
  /// (e.g. `wss://medea.com/MyConf1/Alice?token=777`).
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta;

  /// Creates new [`MediaStreamSettings`] with none constraints configured.
  JasonRh roomHandleCast({required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleCastConstMeta;

  /// Updates room_handle [`Room`]'s [`MediaStreamSettings`]. room_handle affects
  /// all the [`PeerConnection`]s in room_handle [`Room`]. If
  /// [`MediaStreamSettings`] are configured for some [`Room`], then room_handle
  /// [`Room`] can only send media tracks that correspond to these settings.
  /// [`MediaStreamSettings`] update will change media tracks in all sending
  /// peers, so that might cause a new [getUserMedia()][1] request to happen.
  ///
  /// Media obtaining/injection errors are additionally fired to
  /// `on_failed_local_media` callback.
  ///
  /// If `stop_first` set to `true` then affected local `Tracks` will be
  /// dropped before new [`MediaStreamSettings`] are applied. room_handle is
  /// usually required when changing video source device due to hardware
  /// limitations, e.g. having an active track sourced from device `A` may hinder
  /// [getUserMedia()][1] requests to device `B`.
  ///
  /// `rollback_on_fail` option configures [`MediaStreamSettings`] update request
  /// to automatically rollback to previous settings if new settings cannot be
  /// applied.
  ///
  /// If recovering from fail state isn't possible then affected media types will
  /// be disabled.
  ///
  /// [`Room`]: crate::room::Room
  /// [`PeerConnection`]: crate::peer::PeerConnection
  /// [1]: https://w3.org/TR/mediacapture-streams#dom-mediadevices-getusermedia
  MyDartFuture roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required RoomHandleMs settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleSetLocalMediaSettingsConstMeta;

  /// Mutes outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleMuteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta;

  /// Unmutes outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleUnmuteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta;

  /// Enables outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleEnableAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta;

  /// Disables outbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta;

  /// Mutes outbound video in room_handle [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta;

  /// Unmutes outbound video in room_handle [`Room`].
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta;

  /// Enables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  MyDartFuture roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta;

  /// Disables outbound video.
  ///
  /// Affects only video with specific [`MediaSourceKind`] if specified.
  MyDartFuture roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta;

  /// Enables inbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta;

  /// Disables inbound audio in room_handle [`Room`].
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta;

  /// Enables inbound video in room_handle [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta;

  /// Disables inbound video in room_handle [`Room`].
  ///
  /// Affects only video with the specific [`MediaSourceKind`], if specified.
  ///
  /// [`Room`]: crate::room::Room
  MyDartFuture roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta;

  /// Sets callback, invoked when a new [`Connection`] with some remote `Peer`
  /// is established.
  ///
  /// [`Connection`]: crate::connection::Connection
  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle, required RoomHandleDh cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta;

  /// Sets callback, invoked on room_handle [`Room`] close, providing a
  /// [`RoomCloseReason`].
  ///
  /// [`Room`]: crate::room::Room
  /// [`RoomCloseReason`]: crate::room::RoomCloseReason
  void roomHandleOnClose(
      {required RoomHandle roomHandle, required RoomHandleDh cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta;

  /// Sets callback, invoked when a new [`LocalMediaTrack`] is added to
  /// room_handle [`Room`].
  ///
  /// room_handle might happen in such cases:
  /// 1. Media server initiates a media request.
  /// 2. `enable_audio`/`enable_video` is called.
  /// 3. [`MediaStreamSettings`] updated via `set_local_media_settings`.
  ///
  /// [`Room`]: crate::room::Room
  /// [`MediaStreamSettings`]: crate::media::MediaStreamSettings
  /// [`LocalMediaTrack`]: crate::media::track::local::LocalMediaTrack
  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle, required RoomHandleDh cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta;

  /// Sets callback, invoked when a connection with server is lost.
  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle, required RoomHandleDh cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta;

  /// Sets callback, invoked on local media acquisition failures.
  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle, required RoomHandleDh cb, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta;
}

@sealed
class JasonRh extends FrbOpaque {
  JasonRh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class MyDartFuture extends FrbOpaque {
  MyDartFuture.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RoomHandle extends FrbOpaque {
  RoomHandle.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RoomHandleDh extends FrbOpaque {
  RoomHandleDh.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

@sealed
class RoomHandleMs extends FrbOpaque {
  RoomHandleMs.fromRaw(int ptr, int drop, int share)
      : super.unsafe(ptr, drop, share);
}

class RoomHandleApiImpl implements RoomHandleApi {
  final RoomHandleApiPlatform _platform;
  factory RoomHandleApiImpl(ExternalLibrary dylib) =>
      RoomHandleApiImpl.raw(RoomHandleApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RoomHandleApiImpl.wasm(FutureOr<WasmModule> module) =>
      RoomHandleApiImpl(module as ExternalLibrary);
  RoomHandleApiImpl.raw(this._platform);
  MyDartFuture roomHandleJoin(
      {required RoomHandle roomHandle, required String token, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_String(token);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_join(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleJoinConstMeta,
      argValues: [roomHandle, token],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleJoinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_join",
        argNames: ["roomHandle", "token"],
      );

  JasonRh roomHandleCast({required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_cast(arg0),
      parseSuccessData: _wire2api_SyncReturn_JasonRh,
      constMeta: kRoomHandleCastConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleCastConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_cast",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleSetLocalMediaSettings(
      {required RoomHandle roomHandle,
      required RoomHandleMs settings,
      required bool stopFirst,
      required bool rollbackOnFail,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RoomHandleMs(settings);
    var arg2 = stopFirst;
    var arg3 = rollbackOnFail;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_room_handle_set_local_media_settings(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleSetLocalMediaSettingsConstMeta,
      argValues: [roomHandle, settings, stopFirst, rollbackOnFail],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRoomHandleSetLocalMediaSettingsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "room_handle_set_local_media_settings",
            argNames: ["roomHandle", "settings", "stopFirst", "rollbackOnFail"],
          );

  MyDartFuture roomHandleMuteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleMuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleUnmuteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleUnmuteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleEnableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleDisableAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleMuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_mute_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleMuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleMuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_mute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleUnmuteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_unmute_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleUnmuteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleUnmuteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_unmute_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleEnableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleDisableVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_disable_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleEnableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_enable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleDisableRemoteAudio(
      {required RoomHandle roomHandle, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_audio(arg0),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableRemoteAudioConstMeta,
      argValues: [roomHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteAudioConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_audio",
        argNames: ["roomHandle"],
      );

  MyDartFuture roomHandleEnableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_enable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleEnableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleEnableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_enable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  MyDartFuture roomHandleDisableRemoteVideo(
      {required RoomHandle roomHandle, int? sourceKind, dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_opt_box_autoadd_u8(sourceKind);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_disable_remote_video(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_MyDartFuture,
      constMeta: kRoomHandleDisableRemoteVideoConstMeta,
      argValues: [roomHandle, sourceKind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleDisableRemoteVideoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_disable_remote_video",
        argNames: ["roomHandle", "sourceKind"],
      );

  void roomHandleOnNewConnection(
      {required RoomHandle roomHandle,
      required RoomHandleDh cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RoomHandleDh(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_new_connection(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnNewConnectionConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnNewConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_new_connection",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnClose(
      {required RoomHandle roomHandle,
      required RoomHandleDh cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RoomHandleDh(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_room_handle_on_close(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnCloseConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_close",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnLocalTrack(
      {required RoomHandle roomHandle,
      required RoomHandleDh cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RoomHandleDh(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_local_track(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnLocalTrackConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnLocalTrackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_local_track",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnConnectionLoss(
      {required RoomHandle roomHandle,
      required RoomHandleDh cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RoomHandleDh(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_connection_loss(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnConnectionLossConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnConnectionLossConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_connection_loss",
        argNames: ["roomHandle", "cb"],
      );

  void roomHandleOnFailedLocalMedia(
      {required RoomHandle roomHandle,
      required RoomHandleDh cb,
      dynamic hint}) {
    var arg0 = _platform.api2wire_RoomHandle(roomHandle);
    var arg1 = _platform.api2wire_RoomHandleDh(cb);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_room_handle_on_failed_local_media(arg0, arg1),
      parseSuccessData: _wire2api_SyncReturn_unit,
      constMeta: kRoomHandleOnFailedLocalMediaConstMeta,
      argValues: [roomHandle, cb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRoomHandleOnFailedLocalMediaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "room_handle_on_failed_local_media",
        argNames: ["roomHandle", "cb"],
      );

// Section: wire2api

  JasonRh _wire2api_JasonRh(dynamic raw) {
    return JasonRh.fromRaw(raw[0], raw[1], raw[2]);
  }

  MyDartFuture _wire2api_MyDartFuture(dynamic raw) {
    return MyDartFuture.fromRaw(raw[0], raw[1], raw[2]);
  }

  JasonRh _wire2api_SyncReturn_JasonRh(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return JasonRh.fromRaw(ptr, drop, lend);
  }

  MyDartFuture _wire2api_SyncReturn_MyDartFuture(dynamic raw) {
    var pointBitLen = raw.length ~/ 3;
    var ptrList = List.filled(pointBitLen, 0);
    var dropList = List.filled(pointBitLen, 0);
    var lendList = List.filled(pointBitLen, 0);

    List.copyRange(ptrList, 0, raw, 0, pointBitLen);
    List.copyRange(dropList, 0, raw, pointBitLen, pointBitLen * 2);
    List.copyRange(lendList, 0, raw, pointBitLen * 2);

    int ptr = 0;
    int drop = 0;
    int lend = 0;

    if (pointBitLen == 8) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint64(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint64(0);
    } else if (pointBitLen == 4) {
      ptr = ByteData.view(Uint8List.fromList(ptrList).buffer).getUint32(0);
      drop = ByteData.view(Uint8List.fromList(dropList).buffer).getUint32(0);
      lend = ByteData.view(Uint8List.fromList(lendList).buffer).getUint32(0);
    }

    return MyDartFuture.fromRaw(ptr, drop, lend);
  }

  void _wire2api_SyncReturn_unit(dynamic raw) {
    return;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

class RoomHandleApiPlatform extends FlutterRustBridgeBase<RoomHandleApiWire> {
  RoomHandleApiPlatform(ffi.DynamicLibrary dylib)
      : super(RoomHandleApiWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_RoomHandle> api2wire_RoomHandle(RoomHandle raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RoomHandle();
    _api_fill_to_wire_RoomHandle(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RoomHandleDh> api2wire_RoomHandleDh(RoomHandleDh raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RoomHandleDh();
    _api_fill_to_wire_RoomHandleDh(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RoomHandleMs> api2wire_RoomHandleMs(RoomHandleMs raw) {
    if (raw.isStale()) {
      throw 'Use after dispose.';
    }
    final ptr = inner.new_RoomHandleMs();
    _api_fill_to_wire_RoomHandleMs(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_13(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_13(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_RoomHandle(
      RoomHandle apiObj, ffi.Pointer<wire_RoomHandle> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RoomHandleDh(
      RoomHandleDh apiObj, ffi.Pointer<wire_RoomHandleDh> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }

  void _api_fill_to_wire_RoomHandleMs(
      RoomHandleMs apiObj, ffi.Pointer<wire_RoomHandleMs> wireObj) {
    wireObj.ref.ptr = FrbOpaque.share(apiObj).cast();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RoomHandleApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RoomHandleApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RoomHandleApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncReturnStruct wire_room_handle_join(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_uint_8_list> token,
  ) {
    return _wire_room_handle_join(
      room_handle,
      token,
    );
  }

  late final _wire_room_handle_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_room_handle_join');
  late final _wire_room_handle_join = _wire_room_handle_joinPtr.asFunction<
      WireSyncReturnStruct Function(
          ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturnStruct wire_room_handle_cast(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_cast(
      room_handle,
    );
  }

  late final _wire_room_handle_castPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_cast');
  late final _wire_room_handle_cast = _wire_room_handle_castPtr.asFunction<
      WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_set_local_media_settings(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RoomHandleMs> settings,
    bool stop_first,
    bool rollback_on_fail,
  ) {
    return _wire_room_handle_set_local_media_settings(
      room_handle,
      settings,
      stop_first,
      rollback_on_fail,
    );
  }

  late final _wire_room_handle_set_local_media_settingsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_RoomHandleMs>,
              ffi.Bool,
              ffi.Bool)>>('wire_room_handle_set_local_media_settings');
  late final _wire_room_handle_set_local_media_settings =
      _wire_room_handle_set_local_media_settingsPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_RoomHandleMs>, bool, bool)>();

  WireSyncReturnStruct wire_room_handle_mute_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_mute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_mute_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_mute_audio');
  late final _wire_room_handle_mute_audio =
      _wire_room_handle_mute_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_unmute_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_unmute_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_unmute_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_unmute_audio');
  late final _wire_room_handle_unmute_audio =
      _wire_room_handle_unmute_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_enable_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_enable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_enable_audio');
  late final _wire_room_handle_enable_audio =
      _wire_room_handle_enable_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_disable_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_disable_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_audioPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>)>>('wire_room_handle_disable_audio');
  late final _wire_room_handle_disable_audio =
      _wire_room_handle_disable_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_mute_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_mute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_mute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_mute_video');
  late final _wire_room_handle_mute_video =
      _wire_room_handle_mute_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_unmute_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_unmute_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_unmute_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_unmute_video');
  late final _wire_room_handle_unmute_video =
      _wire_room_handle_unmute_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_enable_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_enable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_enable_video');
  late final _wire_room_handle_enable_video =
      _wire_room_handle_enable_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_disable_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_disable_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_disable_video');
  late final _wire_room_handle_disable_video =
      _wire_room_handle_disable_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_enable_remote_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_enable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_enable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>>(
      'wire_room_handle_enable_remote_audio');
  late final _wire_room_handle_enable_remote_audio =
      _wire_room_handle_enable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_disable_remote_audio(
    ffi.Pointer<wire_RoomHandle> room_handle,
  ) {
    return _wire_room_handle_disable_remote_audio(
      room_handle,
    );
  }

  late final _wire_room_handle_disable_remote_audioPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>>(
      'wire_room_handle_disable_remote_audio');
  late final _wire_room_handle_disable_remote_audio =
      _wire_room_handle_disable_remote_audioPtr.asFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>)>();

  WireSyncReturnStruct wire_room_handle_enable_remote_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_enable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_enable_remote_videoPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<ffi.Uint8>)>>('wire_room_handle_enable_remote_video');
  late final _wire_room_handle_enable_remote_video =
      _wire_room_handle_enable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_disable_remote_video(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<ffi.Uint8> source_kind,
  ) {
    return _wire_room_handle_disable_remote_video(
      room_handle,
      source_kind,
    );
  }

  late final _wire_room_handle_disable_remote_videoPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(
                  ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>>(
      'wire_room_handle_disable_remote_video');
  late final _wire_room_handle_disable_remote_video =
      _wire_room_handle_disable_remote_videoPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<ffi.Uint8>)>();

  WireSyncReturnStruct wire_room_handle_on_new_connection(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RoomHandleDh> cb,
  ) {
    return _wire_room_handle_on_new_connection(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_new_connectionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
                  ffi.Pointer<wire_RoomHandleDh>)>>(
      'wire_room_handle_on_new_connection');
  late final _wire_room_handle_on_new_connection =
      _wire_room_handle_on_new_connectionPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_RoomHandleDh>)>();

  WireSyncReturnStruct wire_room_handle_on_close(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RoomHandleDh> cb,
  ) {
    return _wire_room_handle_on_close(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_closePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
              ffi.Pointer<wire_RoomHandleDh>)>>('wire_room_handle_on_close');
  late final _wire_room_handle_on_close =
      _wire_room_handle_on_closePtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_RoomHandleDh>)>();

  WireSyncReturnStruct wire_room_handle_on_local_track(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RoomHandleDh> cb,
  ) {
    return _wire_room_handle_on_local_track(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_local_trackPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
                  ffi.Pointer<wire_RoomHandleDh>)>>(
      'wire_room_handle_on_local_track');
  late final _wire_room_handle_on_local_track =
      _wire_room_handle_on_local_trackPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_RoomHandleDh>)>();

  WireSyncReturnStruct wire_room_handle_on_connection_loss(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RoomHandleDh> cb,
  ) {
    return _wire_room_handle_on_connection_loss(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_connection_lossPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
                  ffi.Pointer<wire_RoomHandleDh>)>>(
      'wire_room_handle_on_connection_loss');
  late final _wire_room_handle_on_connection_loss =
      _wire_room_handle_on_connection_lossPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_RoomHandleDh>)>();

  WireSyncReturnStruct wire_room_handle_on_failed_local_media(
    ffi.Pointer<wire_RoomHandle> room_handle,
    ffi.Pointer<wire_RoomHandleDh> cb,
  ) {
    return _wire_room_handle_on_failed_local_media(
      room_handle,
      cb,
    );
  }

  late final _wire_room_handle_on_failed_local_mediaPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturnStruct Function(ffi.Pointer<wire_RoomHandle>,
                  ffi.Pointer<wire_RoomHandleDh>)>>(
      'wire_room_handle_on_failed_local_media');
  late final _wire_room_handle_on_failed_local_media =
      _wire_room_handle_on_failed_local_mediaPtr.asFunction<
          WireSyncReturnStruct Function(
              ffi.Pointer<wire_RoomHandle>, ffi.Pointer<wire_RoomHandleDh>)>();

  ffi.Pointer<wire_RoomHandle> new_RoomHandle() {
    return _new_RoomHandle();
  }

  late final _new_RoomHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RoomHandle> Function()>>(
          'new_RoomHandle');
  late final _new_RoomHandle =
      _new_RoomHandlePtr.asFunction<ffi.Pointer<wire_RoomHandle> Function()>();

  ffi.Pointer<wire_RoomHandleDh> new_RoomHandleDh() {
    return _new_RoomHandleDh();
  }

  late final _new_RoomHandleDhPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RoomHandleDh> Function()>>(
          'new_RoomHandleDh');
  late final _new_RoomHandleDh = _new_RoomHandleDhPtr
      .asFunction<ffi.Pointer<wire_RoomHandleDh> Function()>();

  ffi.Pointer<wire_RoomHandleMs> new_RoomHandleMs() {
    return _new_RoomHandleMs();
  }

  late final _new_RoomHandleMsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RoomHandleMs> Function()>>(
          'new_RoomHandleMs');
  late final _new_RoomHandleMs = _new_RoomHandleMsPtr
      .asFunction<ffi.Pointer<wire_RoomHandleMs> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_13(
    int value,
  ) {
    return _new_box_autoadd_u8_13(
      value,
    );
  }

  late final _new_box_autoadd_u8_13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_13');
  late final _new_box_autoadd_u8_13 = _new_box_autoadd_u8_13Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_13(
    int len,
  ) {
    return _new_uint_8_list_13(
      len,
    );
  }

  late final _new_uint_8_list_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_13');
  late final _new_uint_8_list_13 = _new_uint_8_list_13Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_box_autoadd_u8_13(
    ffi.Pointer<ffi.Uint8> raw,
  ) {
    return _drop_box_autoadd_u8_13(
      raw,
    );
  }

  late final _drop_box_autoadd_u8_13Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'drop_box_autoadd_u8_13');
  late final _drop_box_autoadd_u8_13 = _drop_box_autoadd_u8_13Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();
}

class wire_RoomHandle extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RoomHandleMs extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_RoomHandleDh extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
