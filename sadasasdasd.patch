Index: src/peer/media/mod.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/peer/media/mod.rs b/src/peer/media/mod.rs
--- a/src/peer/media/mod.rs	(revision 8243ad2420790f421f0af9b0b3d7d9c24d68588e)
+++ b/src/peer/media/mod.rs	(date 1655976698559)
@@ -662,7 +662,7 @@
                         let receiver = Component::obj(receiver);
                         async move {
                             if let Some(t) = fut.await {
-                                receiver.replace_transceiver(t);
+                                receiver.set_transceiver(t);
                             }
                         }
                     })
Index: src/peer/media/receiver/mod.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/peer/media/receiver/mod.rs b/src/peer/media/receiver/mod.rs
--- a/src/peer/media/receiver/mod.rs	(revision 8243ad2420790f421f0af9b0b3d7d9c24d68588e)
+++ b/src/peer/media/receiver/mod.rs	(date 1655982463873)
@@ -226,6 +226,7 @@
     ///
     /// Sets [`platform::MediaStreamTrack::enabled`] same as
     /// `enabled_individual` of this [`Receiver`].
+    #[allow(clippy::missing_panics_doc)]
     pub async fn set_remote_track(
         &self,
         transceiver: platform::Transceiver,
@@ -237,6 +238,7 @@
             }
         }
 
+        self.set_transceiver(transceiver);
         let new_track = remote::Track::new(
             new_track,
             self.caps.media_source_kind(),
@@ -244,17 +246,17 @@
             self.media_direction.get(),
         );
 
+        let trnscvr = self.transceiver.borrow().as_ref().cloned().unwrap();
         if self.enabled_individual.get() {
-            transceiver
+            trnscvr
                 .add_direction(platform::TransceiverDirection::RECV)
                 .await;
         } else {
-            transceiver
+            trnscvr
                 .sub_direction(platform::TransceiverDirection::RECV)
                 .await;
         }
 
-        drop(self.transceiver.replace(Some(transceiver)));
         if let Some(prev_track) = self.track.replace(Some(new_track)) {
             prev_track.stop().await;
         };
@@ -277,8 +279,10 @@
     ///
     /// No-op if provided with the same [`platform::Transceiver`] as already
     /// exists in this [`Receiver`].
-    pub fn replace_transceiver(&self, transceiver: platform::Transceiver) {
-        if self.mid.borrow().as_ref() == transceiver.mid().as_ref() {
+    pub fn set_transceiver(&self, transceiver: platform::Transceiver) {
+        if self.transceiver.borrow().is_none()
+            && self.mid.borrow().as_ref() == transceiver.mid().as_ref()
+        {
             drop(self.transceiver.replace(Some(transceiver)));
         }
     }
