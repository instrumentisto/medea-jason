// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::dart::api::*;
use flutter_rust_bridge::for_generated::byteorder::{
    NativeEndian, ReadBytesExt, WriteBytesExt,
};
use flutter_rust_bridge::for_generated::{
    transform_result_dco, Lifetimeable, Lockable,
};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.1.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1606587944;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__dart__api__connection_handle_disable_remote_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_disable_remote_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::connection_handle_disable_remote_audio(api_connection))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_disable_remote_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_disable_remote_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::connection_handle_disable_remote_video(api_connection, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_enable_remote_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_enable_remote_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::connection_handle_enable_remote_audio(api_connection))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_enable_remote_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_enable_remote_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::connection_handle_enable_remote_video(api_connection, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::connection_handle_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_get_remote_member_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_get_remote_member_id", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::connection_handle_get_remote_member_id(api_connection)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_on_close_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_on_close", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::connection_handle_on_close(api_connection, api_f)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_on_quality_score_update_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_on_quality_score_update", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::connection_handle_on_quality_score_update(api_connection, api_f)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__connection_handle_on_remote_track_added_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "connection_handle_on_remote_track_added", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_connection = <RustOpaqueMoi<ConnectionHandle>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::connection_handle_on_remote_track_added(api_connection, api_f)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__is_on_audio_level_available_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "is_on_audio_level_available", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::is_on_audio_level_available(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__jason_close_room_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "jason_close_room", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_jason = <RustOpaqueMoi<Jason>>::sse_decode(&mut deserializer);
let api_room_to_delete = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::jason_close_room(api_jason, api_room_to_delete); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__jason_dispose_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "jason_dispose", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_jason = <RustOpaqueMoi<Jason>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::jason_dispose(api_jason); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__jason_init_room_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "jason_init_room", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_jason = <RustOpaqueMoi<Jason>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::jason_init_room(api_jason))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__jason_media_manager_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "jason_media_manager", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_jason = <RustOpaqueMoi<Jason>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::jason_media_manager(api_jason))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__jason_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "jason_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::jason_new())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_free_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_free", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::local_media_track_free(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::local_media_track_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_get_track_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_get_track", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::local_media_track_get_track(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_kind_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_kind", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::local_media_track_kind(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_media_source_kind_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_media_source_kind", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::local_media_track_media_source_kind(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_on_ended_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_on_ended", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::local_media_track_on_ended(api_track, api_f); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__local_media_track_state_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "local_media_track_state", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::local_media_track_state(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__log_dart_exception_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "log_dart_exception", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_message = <String>::sse_decode(&mut deserializer);
let api_stack_trace = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::log_dart_exception(api_message, api_stack_trace); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_enumerate_devices_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_enumerate_devices", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_enumerate_devices(api_manager))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_enumerate_displays_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_enumerate_displays", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_enumerate_displays(api_manager))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_init_local_tracks_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_init_local_tracks", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);
let api_caps = <crate::api::dart::api::ApiMediaStreamSettings>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_init_local_tracks(api_manager, api_caps))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_microphone_volume_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_microphone_volume", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_microphone_volume(api_manager))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_microphone_volume_is_available_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_microphone_volume_is_available", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_microphone_volume_is_available(api_manager))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_on_device_change_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_on_device_change", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);
let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::media_manager_handle_on_device_change(api_manager, api_cb)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_set_microphone_volume_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_set_microphone_volume", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);
let api_level = <i64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_set_microphone_volume(api_manager, api_level))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__media_manager_handle_set_output_audio_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "media_manager_handle_set_output_audio_id", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_manager = <RustOpaqueMoi<MediaManagerHandle>>::sse_decode(&mut deserializer);
let api_device_id = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::media_manager_handle_set_output_audio_id(api_manager, api_device_id))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__on_audio_level_changed_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "on_audio_level_changed", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<LocalMediaTrack>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::on_audio_level_changed(api_track, api_f); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__on_panic_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "on_panic", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::on_panic(api_cb); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__reconnect_handle_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "reconnect_handle_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::reconnect_handle_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__reconnect_handle_reconnect_with_backoff_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "reconnect_handle_reconnect_with_backoff", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_reconnect_handle = <RustOpaqueMoi<ReconnectHandle>>::sse_decode(&mut deserializer);
let api_starting_delay = <u32>::sse_decode(&mut deserializer);
let api_multiplier = <f64>::sse_decode(&mut deserializer);
let api_max_delay = <u32>::sse_decode(&mut deserializer);
let api_max_elapsed_time_ms = <Option<u32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::reconnect_handle_reconnect_with_backoff(api_reconnect_handle, api_starting_delay, api_multiplier, api_max_delay, api_max_elapsed_time_ms))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__reconnect_handle_reconnect_with_delay_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "reconnect_handle_reconnect_with_delay", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_reconnect_handle = <RustOpaqueMoi<ReconnectHandle>>::sse_decode(&mut deserializer);
let api_delay_ms = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::reconnect_handle_reconnect_with_delay(api_reconnect_handle, api_delay_ms))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::remote_media_track_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_get_track_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_get_track", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::remote_media_track_get_track(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_kind_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_kind", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::remote_media_track_kind(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_media_direction_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_media_direction", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::remote_media_track_media_direction(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_media_source_kind_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_media_source_kind", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::remote_media_track_media_source_kind(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_muted_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_muted", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::remote_media_track_muted(api_track))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_on_media_direction_changed_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_on_media_direction_changed", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::remote_media_track_on_media_direction_changed(api_track, api_f); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_on_muted_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_on_muted", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::remote_media_track_on_muted(api_track, api_f); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_on_stopped_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_on_stopped", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::remote_media_track_on_stopped(api_track, api_f); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__remote_media_track_on_unmuted_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "remote_media_track_on_unmuted", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_track = <RustOpaqueMoi<RemoteMediaTrack>>::sse_decode(&mut deserializer);
let api_f = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::api::dart::api::remote_media_track_on_unmuted(api_track, api_f); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_close_reason_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_close_reason_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_close_reason_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_disable_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_disable_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_disable_audio(api_room_handle))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_disable_remote_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_disable_remote_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_disable_remote_audio(api_room_handle))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_disable_remote_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_disable_remote_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_disable_remote_video(api_room_handle, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_disable_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_disable_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_disable_video(api_room_handle, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_enable_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_enable_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_enable_audio(api_room_handle))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_enable_remote_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_enable_remote_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_enable_remote_audio(api_room_handle))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_enable_remote_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_enable_remote_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_enable_remote_video(api_room_handle, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_enable_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_enable_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_enable_video(api_room_handle, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_join_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_join", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_token = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_join(api_room_handle, api_token))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_mute_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_mute_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_mute_audio(api_room_handle))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_mute_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_mute_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_mute_video(api_room_handle, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_on_close_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_on_close", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::room_handle_on_close(api_room_handle, api_cb)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_on_connection_loss_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_on_connection_loss", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::room_handle_on_connection_loss(api_room_handle, api_cb)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_on_failed_local_media_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_on_failed_local_media", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::room_handle_on_failed_local_media(api_room_handle, api_cb)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_on_local_track_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_on_local_track", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::room_handle_on_local_track(api_room_handle, api_cb)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_on_new_connection_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_on_new_connection", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_cb = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::DartOpaque>((move || {
                     let output_ok = crate::api::dart::api::room_handle_on_new_connection(api_room_handle, api_cb)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_set_local_media_settings_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_set_local_media_settings", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_settings = <crate::api::dart::api::ApiMediaStreamSettings>::sse_decode(&mut deserializer);
let api_stop_first = <bool>::sse_decode(&mut deserializer);
let api_rollback_on_fail = <bool>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_set_local_media_settings(api_room_handle, api_settings, api_stop_first, api_rollback_on_fail))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_unmute_audio_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_unmute_audio", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_unmute_audio(api_room_handle))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__room_handle_unmute_video_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "room_handle_unmute_video", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_room_handle = <RustOpaqueMoi<RoomHandle>>::sse_decode(&mut deserializer);
let api_source_kind = <Option<crate::media::track::MediaSourceKind>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::room_handle_unmute_video(api_room_handle, api_source_kind))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__vec_local_tracks_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "vec_local_tracks_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::vec_local_tracks_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__vec_media_device_details_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "vec_media_device_details_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::vec_media_device_details_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__dart__api__vec_media_display_details_from_ptr_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "vec_media_display_details_from_ptr", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ptr = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::dart::api::vec_media_display_details_from_ptr(api_ptr))?;   Ok(output_ok)
                })()) })
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(ConnectionHandle);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Jason);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(LocalMediaTrack);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(MediaManagerHandle);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(ReconnectHandle);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RemoteMediaTrack);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RoomHandle);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe {
            flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner)
        };
    }
}

impl SseDecode for RustOpaqueMoi<ConnectionHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<Jason> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<LocalMediaTrack> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<MediaManagerHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<ReconnectHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<RemoteMediaTrack> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<RoomHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::dart::api::ApiAudioConstraints {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_deviceId = <Option<String>>::sse_decode(deserializer);
        let mut var_autoGainControl = <Option<
            crate::media::constraints::ConstrainBoolean,
        >>::sse_decode(deserializer);
        return crate::api::dart::api::ApiAudioConstraints {
            device_id: var_deviceId,
            auto_gain_control: var_autoGainControl,
        };
    }
}

impl SseDecode for crate::api::dart::api::ApiConstrainFacingMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::media::constraints::FacingMode>::sse_decode(
                        deserializer,
                    );
                return crate::api::dart::api::ApiConstrainFacingMode::Exact(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 =
                    <crate::media::constraints::FacingMode>::sse_decode(
                        deserializer,
                    );
                return crate::api::dart::api::ApiConstrainFacingMode::Ideal(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::dart::api::ApiDeviceVideoTrackConstraints {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_deviceId = <Option<String>>::sse_decode(deserializer);
        let mut var_facingMode = <Option<
            crate::api::dart::api::ApiConstrainFacingMode,
        >>::sse_decode(deserializer);
        let mut var_height =
            <Option<crate::media::constraints::ConstrainU32>>::sse_decode(
                deserializer,
            );
        let mut var_width =
            <Option<crate::media::constraints::ConstrainU32>>::sse_decode(
                deserializer,
            );
        return crate::api::dart::api::ApiDeviceVideoTrackConstraints {
            device_id: var_deviceId,
            facing_mode: var_facingMode,
            height: var_height,
            width: var_width,
        };
    }
}

impl SseDecode for crate::api::dart::api::ApiDisplayVideoTrackConstraints {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_deviceId = <Option<String>>::sse_decode(deserializer);
        let mut var_height =
            <Option<crate::media::constraints::ConstrainU32>>::sse_decode(
                deserializer,
            );
        let mut var_width =
            <Option<crate::media::constraints::ConstrainU32>>::sse_decode(
                deserializer,
            );
        let mut var_frameRate =
            <Option<crate::media::constraints::ConstrainU32>>::sse_decode(
                deserializer,
            );
        return crate::api::dart::api::ApiDisplayVideoTrackConstraints {
            device_id: var_deviceId,
            height: var_height,
            width: var_width,
            frame_rate: var_frameRate,
        };
    }
}

impl SseDecode for crate::api::dart::api::ApiMediaDeviceDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_kind =
            <crate::media::MediaDeviceKind>::sse_decode(deserializer);
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_groupId = <Option<String>>::sse_decode(deserializer);
        let mut var_isFailed = <bool>::sse_decode(deserializer);
        return crate::api::dart::api::ApiMediaDeviceDetails {
            kind: var_kind,
            device_id: var_deviceId,
            label: var_label,
            group_id: var_groupId,
            is_failed: var_isFailed,
        };
    }
}

impl SseDecode for crate::api::dart::api::ApiMediaDisplayDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_deviceId = <String>::sse_decode(deserializer);
        let mut var_title = <Option<String>>::sse_decode(deserializer);
        return crate::api::dart::api::ApiMediaDisplayDetails {
            device_id: var_deviceId,
            title: var_title,
        };
    }
}

impl SseDecode for crate::api::dart::api::ApiMediaStreamSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_audio =
            <Option<crate::api::dart::api::ApiAudioConstraints>>::sse_decode(
                deserializer,
            );
        let mut var_deviceVideo = <Option<
            crate::api::dart::api::ApiDeviceVideoTrackConstraints,
        >>::sse_decode(deserializer);
        let mut var_displayVideo = <Option<
            crate::api::dart::api::ApiDisplayVideoTrackConstraints,
        >>::sse_decode(deserializer);
        return crate::api::dart::api::ApiMediaStreamSettings {
            audio: var_audio,
            device_video: var_deviceVideo,
            display_video: var_displayVideo,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::media::constraints::ConstrainBoolean {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::media::constraints::ConstrainBoolean::Exact(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::media::constraints::ConstrainBoolean::Ideal(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::media::constraints::ConstrainU32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::media::constraints::ConstrainU32::Exact(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::media::constraints::ConstrainU32::Ideal(
                    var_field0,
                );
            }
            2 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                let mut var_field1 = <u32>::sse_decode(deserializer);
                return crate::media::constraints::ConstrainU32::Range(
                    var_field0, var_field1,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::media::constraints::FacingMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::media::constraints::FacingMode::User,
            1 => crate::media::constraints::FacingMode::Environment,
            2 => crate::media::constraints::FacingMode::Left,
            3 => crate::media::constraints::FacingMode::Right,
            _ => unreachable!("Invalid variant for FacingMode: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<RustOpaqueMoi<LocalMediaTrack>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<LocalMediaTrack>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dart::api::ApiMediaDeviceDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::dart::api::ApiMediaDeviceDetails>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::dart::api::ApiMediaDisplayDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::dart::api::ApiMediaDisplayDetails>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::media::MediaDeviceKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::media::MediaDeviceKind::AudioInput,
            1 => crate::media::MediaDeviceKind::VideoInput,
            2 => crate::media::MediaDeviceKind::AudioOutput,
            _ => unreachable!("Invalid variant for MediaDeviceKind: {}", inner),
        };
    }
}

impl SseDecode for crate::media::track::remote::MediaDirection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::media::track::remote::MediaDirection::SendRecv,
            1 => crate::media::track::remote::MediaDirection::SendOnly,
            2 => crate::media::track::remote::MediaDirection::RecvOnly,
            3 => crate::media::track::remote::MediaDirection::Inactive,
            _ => unreachable!("Invalid variant for MediaDirection: {}", inner),
        };
    }
}

impl SseDecode for crate::media::MediaKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::media::MediaKind::Audio,
            1 => crate::media::MediaKind::Video,
            _ => unreachable!("Invalid variant for MediaKind: {}", inner),
        };
    }
}

impl SseDecode for crate::media::track::MediaSourceKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::media::track::MediaSourceKind::Device,
            1 => crate::media::track::MediaSourceKind::Display,
            _ => unreachable!("Invalid variant for MediaSourceKind: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::dart::api::ApiAudioConstraints> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::dart::api::ApiAudioConstraints>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::dart::api::ApiConstrainFacingMode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::dart::api::ApiConstrainFacingMode>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::dart::api::ApiDeviceVideoTrackConstraints>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::dart::api::ApiDeviceVideoTrackConstraints>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::dart::api::ApiDisplayVideoTrackConstraints>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::dart::api::ApiDisplayVideoTrackConstraints>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::media::constraints::ConstrainBoolean> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::media::constraints::ConstrainBoolean>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::media::constraints::ConstrainU32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::media::constraints::ConstrainU32>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::media::track::MediaSourceKind> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::media::track::MediaSourceKind>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::room::RoomCloseReason {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_isClosedByServer = <bool>::sse_decode(deserializer);
        let mut var_reason = <String>::sse_decode(deserializer);
        let mut var_isErr = <bool>::sse_decode(deserializer);
        return crate::room::RoomCloseReason {
            is_closed_by_server: var_isClosedByServer,
            reason: var_reason,
            is_err: var_isErr,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crate__api__dart__api__connection_handle_disable_remote_audio_impl(ptr, rust_vec_len, data_len),
2 => wire__crate__api__dart__api__connection_handle_disable_remote_video_impl(ptr, rust_vec_len, data_len),
3 => wire__crate__api__dart__api__connection_handle_enable_remote_audio_impl(ptr, rust_vec_len, data_len),
4 => wire__crate__api__dart__api__connection_handle_enable_remote_video_impl(ptr, rust_vec_len, data_len),
5 => wire__crate__api__dart__api__connection_handle_from_ptr_impl(ptr, rust_vec_len, data_len),
6 => wire__crate__api__dart__api__connection_handle_get_remote_member_id_impl(ptr, rust_vec_len, data_len),
7 => wire__crate__api__dart__api__connection_handle_on_close_impl(ptr, rust_vec_len, data_len),
8 => wire__crate__api__dart__api__connection_handle_on_quality_score_update_impl(ptr, rust_vec_len, data_len),
9 => wire__crate__api__dart__api__connection_handle_on_remote_track_added_impl(ptr, rust_vec_len, data_len),
10 => wire__crate__api__dart__api__is_on_audio_level_available_impl(ptr, rust_vec_len, data_len),
11 => wire__crate__api__dart__api__jason_close_room_impl(ptr, rust_vec_len, data_len),
12 => wire__crate__api__dart__api__jason_dispose_impl(ptr, rust_vec_len, data_len),
13 => wire__crate__api__dart__api__jason_init_room_impl(ptr, rust_vec_len, data_len),
14 => wire__crate__api__dart__api__jason_media_manager_impl(ptr, rust_vec_len, data_len),
15 => wire__crate__api__dart__api__jason_new_impl(ptr, rust_vec_len, data_len),
16 => wire__crate__api__dart__api__local_media_track_free_impl(ptr, rust_vec_len, data_len),
17 => wire__crate__api__dart__api__local_media_track_from_ptr_impl(ptr, rust_vec_len, data_len),
18 => wire__crate__api__dart__api__local_media_track_get_track_impl(ptr, rust_vec_len, data_len),
19 => wire__crate__api__dart__api__local_media_track_kind_impl(ptr, rust_vec_len, data_len),
20 => wire__crate__api__dart__api__local_media_track_media_source_kind_impl(ptr, rust_vec_len, data_len),
21 => wire__crate__api__dart__api__local_media_track_on_ended_impl(ptr, rust_vec_len, data_len),
22 => wire__crate__api__dart__api__local_media_track_state_impl(ptr, rust_vec_len, data_len),
23 => wire__crate__api__dart__api__log_dart_exception_impl(ptr, rust_vec_len, data_len),
24 => wire__crate__api__dart__api__media_manager_handle_enumerate_devices_impl(ptr, rust_vec_len, data_len),
25 => wire__crate__api__dart__api__media_manager_handle_enumerate_displays_impl(ptr, rust_vec_len, data_len),
26 => wire__crate__api__dart__api__media_manager_handle_init_local_tracks_impl(ptr, rust_vec_len, data_len),
27 => wire__crate__api__dart__api__media_manager_handle_microphone_volume_impl(ptr, rust_vec_len, data_len),
28 => wire__crate__api__dart__api__media_manager_handle_microphone_volume_is_available_impl(ptr, rust_vec_len, data_len),
29 => wire__crate__api__dart__api__media_manager_handle_on_device_change_impl(ptr, rust_vec_len, data_len),
30 => wire__crate__api__dart__api__media_manager_handle_set_microphone_volume_impl(ptr, rust_vec_len, data_len),
31 => wire__crate__api__dart__api__media_manager_handle_set_output_audio_id_impl(ptr, rust_vec_len, data_len),
32 => wire__crate__api__dart__api__on_audio_level_changed_impl(ptr, rust_vec_len, data_len),
33 => wire__crate__api__dart__api__on_panic_impl(ptr, rust_vec_len, data_len),
34 => wire__crate__api__dart__api__reconnect_handle_from_ptr_impl(ptr, rust_vec_len, data_len),
35 => wire__crate__api__dart__api__reconnect_handle_reconnect_with_backoff_impl(ptr, rust_vec_len, data_len),
36 => wire__crate__api__dart__api__reconnect_handle_reconnect_with_delay_impl(ptr, rust_vec_len, data_len),
37 => wire__crate__api__dart__api__remote_media_track_from_ptr_impl(ptr, rust_vec_len, data_len),
38 => wire__crate__api__dart__api__remote_media_track_get_track_impl(ptr, rust_vec_len, data_len),
39 => wire__crate__api__dart__api__remote_media_track_kind_impl(ptr, rust_vec_len, data_len),
40 => wire__crate__api__dart__api__remote_media_track_media_direction_impl(ptr, rust_vec_len, data_len),
41 => wire__crate__api__dart__api__remote_media_track_media_source_kind_impl(ptr, rust_vec_len, data_len),
42 => wire__crate__api__dart__api__remote_media_track_muted_impl(ptr, rust_vec_len, data_len),
43 => wire__crate__api__dart__api__remote_media_track_on_media_direction_changed_impl(ptr, rust_vec_len, data_len),
44 => wire__crate__api__dart__api__remote_media_track_on_muted_impl(ptr, rust_vec_len, data_len),
45 => wire__crate__api__dart__api__remote_media_track_on_stopped_impl(ptr, rust_vec_len, data_len),
46 => wire__crate__api__dart__api__remote_media_track_on_unmuted_impl(ptr, rust_vec_len, data_len),
47 => wire__crate__api__dart__api__room_close_reason_from_ptr_impl(ptr, rust_vec_len, data_len),
48 => wire__crate__api__dart__api__room_handle_disable_audio_impl(ptr, rust_vec_len, data_len),
49 => wire__crate__api__dart__api__room_handle_disable_remote_audio_impl(ptr, rust_vec_len, data_len),
50 => wire__crate__api__dart__api__room_handle_disable_remote_video_impl(ptr, rust_vec_len, data_len),
51 => wire__crate__api__dart__api__room_handle_disable_video_impl(ptr, rust_vec_len, data_len),
52 => wire__crate__api__dart__api__room_handle_enable_audio_impl(ptr, rust_vec_len, data_len),
53 => wire__crate__api__dart__api__room_handle_enable_remote_audio_impl(ptr, rust_vec_len, data_len),
54 => wire__crate__api__dart__api__room_handle_enable_remote_video_impl(ptr, rust_vec_len, data_len),
55 => wire__crate__api__dart__api__room_handle_enable_video_impl(ptr, rust_vec_len, data_len),
56 => wire__crate__api__dart__api__room_handle_join_impl(ptr, rust_vec_len, data_len),
57 => wire__crate__api__dart__api__room_handle_mute_audio_impl(ptr, rust_vec_len, data_len),
58 => wire__crate__api__dart__api__room_handle_mute_video_impl(ptr, rust_vec_len, data_len),
59 => wire__crate__api__dart__api__room_handle_on_close_impl(ptr, rust_vec_len, data_len),
60 => wire__crate__api__dart__api__room_handle_on_connection_loss_impl(ptr, rust_vec_len, data_len),
61 => wire__crate__api__dart__api__room_handle_on_failed_local_media_impl(ptr, rust_vec_len, data_len),
62 => wire__crate__api__dart__api__room_handle_on_local_track_impl(ptr, rust_vec_len, data_len),
63 => wire__crate__api__dart__api__room_handle_on_new_connection_impl(ptr, rust_vec_len, data_len),
64 => wire__crate__api__dart__api__room_handle_set_local_media_settings_impl(ptr, rust_vec_len, data_len),
65 => wire__crate__api__dart__api__room_handle_unmute_audio_impl(ptr, rust_vec_len, data_len),
66 => wire__crate__api__dart__api__room_handle_unmute_video_impl(ptr, rust_vec_len, data_len),
67 => wire__crate__api__dart__api__vec_local_tracks_from_ptr_impl(ptr, rust_vec_len, data_len),
68 => wire__crate__api__dart__api__vec_media_device_details_from_ptr_impl(ptr, rust_vec_len, data_len),
69 => wire__crate__api__dart__api__vec_media_display_details_from_ptr_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiAudioConstraints
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.auto_gain_control.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiAudioConstraints
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiAudioConstraints,
    > for crate::api::dart::api::ApiAudioConstraints
{
    fn into_into_dart(self) -> crate::api::dart::api::ApiAudioConstraints {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiConstrainFacingMode
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::dart::api::ApiConstrainFacingMode::Exact(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dart::api::ApiConstrainFacingMode::Ideal(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiConstrainFacingMode
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiConstrainFacingMode,
    > for crate::api::dart::api::ApiConstrainFacingMode
{
    fn into_into_dart(self) -> crate::api::dart::api::ApiConstrainFacingMode {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiDeviceVideoTrackConstraints
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.facing_mode.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiDeviceVideoTrackConstraints
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiDeviceVideoTrackConstraints,
    > for crate::api::dart::api::ApiDeviceVideoTrackConstraints
{
    fn into_into_dart(
        self,
    ) -> crate::api::dart::api::ApiDeviceVideoTrackConstraints {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiDisplayVideoTrackConstraints
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.frame_rate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiDisplayVideoTrackConstraints
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiDisplayVideoTrackConstraints,
    > for crate::api::dart::api::ApiDisplayVideoTrackConstraints
{
    fn into_into_dart(
        self,
    ) -> crate::api::dart::api::ApiDisplayVideoTrackConstraints {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiMediaDeviceDetails
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.kind.into_into_dart().into_dart(),
            self.device_id.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.group_id.into_into_dart().into_dart(),
            self.is_failed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiMediaDeviceDetails
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiMediaDeviceDetails,
    > for crate::api::dart::api::ApiMediaDeviceDetails
{
    fn into_into_dart(self) -> crate::api::dart::api::ApiMediaDeviceDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiMediaDisplayDetails
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiMediaDisplayDetails
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiMediaDisplayDetails,
    > for crate::api::dart::api::ApiMediaDisplayDetails
{
    fn into_into_dart(self) -> crate::api::dart::api::ApiMediaDisplayDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::dart::api::ApiMediaStreamSettings
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.audio.into_into_dart().into_dart(),
            self.device_video.into_into_dart().into_dart(),
            self.display_video.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart::api::ApiMediaStreamSettings
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::dart::api::ApiMediaStreamSettings,
    > for crate::api::dart::api::ApiMediaStreamSettings
{
    fn into_into_dart(self) -> crate::api::dart::api::ApiMediaStreamSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::media::constraints::ConstrainBoolean
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::media::constraints::ConstrainBoolean::Exact(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::media::constraints::ConstrainBoolean::Ideal(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::constraints::ConstrainBoolean
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::media::constraints::ConstrainBoolean,
    > for crate::media::constraints::ConstrainBoolean
{
    fn into_into_dart(self) -> crate::media::constraints::ConstrainBoolean {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::media::constraints::ConstrainU32 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::media::constraints::ConstrainU32::Exact(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::media::constraints::ConstrainU32::Ideal(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::media::constraints::ConstrainU32::Range(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::constraints::ConstrainU32
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::media::constraints::ConstrainU32>
    for crate::media::constraints::ConstrainU32
{
    fn into_into_dart(self) -> crate::media::constraints::ConstrainU32 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::media::constraints::FacingMode {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::User => 0.into_dart(),
            Self::Environment => 1.into_dart(),
            Self::Left => 2.into_dart(),
            Self::Right => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::constraints::FacingMode
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::media::constraints::FacingMode>
    for crate::media::constraints::FacingMode
{
    fn into_into_dart(self) -> crate::media::constraints::FacingMode {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::media::MediaDeviceKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::AudioInput => 0.into_dart(),
            Self::VideoInput => 1.into_dart(),
            Self::AudioOutput => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::MediaDeviceKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::media::MediaDeviceKind>
    for crate::media::MediaDeviceKind
{
    fn into_into_dart(self) -> crate::media::MediaDeviceKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::media::track::remote::MediaDirection
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::SendRecv => 0.into_dart(),
            Self::SendOnly => 1.into_dart(),
            Self::RecvOnly => 2.into_dart(),
            Self::Inactive => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::track::remote::MediaDirection
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::media::track::remote::MediaDirection,
    > for crate::media::track::remote::MediaDirection
{
    fn into_into_dart(self) -> crate::media::track::remote::MediaDirection {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::media::MediaKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Audio => 0.into_dart(),
            Self::Video => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::MediaKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::media::MediaKind>
    for crate::media::MediaKind
{
    fn into_into_dart(self) -> crate::media::MediaKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::media::track::MediaSourceKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Device => 0.into_dart(),
            Self::Display => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::media::track::MediaSourceKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::media::track::MediaSourceKind>
    for crate::media::track::MediaSourceKind
{
    fn into_into_dart(self) -> crate::media::track::MediaSourceKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::room::RoomCloseReason {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.is_closed_by_server.into_into_dart().into_dart(),
            self.reason.into_into_dart().into_dart(),
            self.is_err.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::room::RoomCloseReason
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::room::RoomCloseReason>
    for crate::room::RoomCloseReason
{
    fn into_into_dart(self) -> crate::room::RoomCloseReason {
        self
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<ConnectionHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Jason> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<LocalMediaTrack> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<MediaManagerHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<ReconnectHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RemoteMediaTrack> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RoomHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::dart::api::ApiAudioConstraints {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.device_id, serializer);
        <Option<crate::media::constraints::ConstrainBoolean>>::sse_encode(
            self.auto_gain_control,
            serializer,
        );
    }
}

impl SseEncode for crate::api::dart::api::ApiConstrainFacingMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {
            crate::api::dart::api::ApiConstrainFacingMode::Exact(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::media::constraints::FacingMode>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::dart::api::ApiConstrainFacingMode::Ideal(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::media::constraints::FacingMode>::sse_encode(
                    field0, serializer,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::dart::api::ApiDeviceVideoTrackConstraints {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.device_id, serializer);
        <Option<crate::api::dart::api::ApiConstrainFacingMode>>::sse_encode(
            self.facing_mode,
            serializer,
        );
        <Option<crate::media::constraints::ConstrainU32>>::sse_encode(
            self.height,
            serializer,
        );
        <Option<crate::media::constraints::ConstrainU32>>::sse_encode(
            self.width, serializer,
        );
    }
}

impl SseEncode for crate::api::dart::api::ApiDisplayVideoTrackConstraints {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.device_id, serializer);
        <Option<crate::media::constraints::ConstrainU32>>::sse_encode(
            self.height,
            serializer,
        );
        <Option<crate::media::constraints::ConstrainU32>>::sse_encode(
            self.width, serializer,
        );
        <Option<crate::media::constraints::ConstrainU32>>::sse_encode(
            self.frame_rate,
            serializer,
        );
    }
}

impl SseEncode for crate::api::dart::api::ApiMediaDeviceDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::media::MediaDeviceKind>::sse_encode(self.kind, serializer);
        <String>::sse_encode(self.device_id, serializer);
        <String>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.group_id, serializer);
        <bool>::sse_encode(self.is_failed, serializer);
    }
}

impl SseEncode for crate::api::dart::api::ApiMediaDisplayDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.device_id, serializer);
        <Option<String>>::sse_encode(self.title, serializer);
    }
}

impl SseEncode for crate::api::dart::api::ApiMediaStreamSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<crate::api::dart::api::ApiAudioConstraints>>::sse_encode(
            self.audio, serializer,
        );
        <Option<crate::api::dart::api::ApiDeviceVideoTrackConstraints>>::sse_encode(self.device_video, serializer);
        <Option<crate::api::dart::api::ApiDisplayVideoTrackConstraints>>::sse_encode(self.display_video, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::media::constraints::ConstrainBoolean {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {
            crate::media::constraints::ConstrainBoolean::Exact(field0) => {
                <i32>::sse_encode(0, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::media::constraints::ConstrainBoolean::Ideal(field0) => {
                <i32>::sse_encode(1, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::media::constraints::ConstrainU32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {
            crate::media::constraints::ConstrainU32::Exact(field0) => {
                <i32>::sse_encode(0, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            crate::media::constraints::ConstrainU32::Ideal(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            crate::media::constraints::ConstrainU32::Range(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <u32>::sse_encode(field0, serializer);
                <u32>::sse_encode(field1, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::media::constraints::FacingMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::media::constraints::FacingMode::User => 0,
                crate::media::constraints::FacingMode::Environment => 1,
                crate::media::constraints::FacingMode::Left => 2,
                crate::media::constraints::FacingMode::Right => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<RustOpaqueMoi<LocalMediaTrack>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<LocalMediaTrack>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::dart::api::ApiMediaDeviceDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dart::api::ApiMediaDeviceDetails>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::dart::api::ApiMediaDisplayDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::dart::api::ApiMediaDisplayDetails>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::media::MediaDeviceKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::media::MediaDeviceKind::AudioInput => 0,
                crate::media::MediaDeviceKind::VideoInput => 1,
                crate::media::MediaDeviceKind::AudioOutput => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::media::track::remote::MediaDirection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::media::track::remote::MediaDirection::SendRecv => 0,
                crate::media::track::remote::MediaDirection::SendOnly => 1,
                crate::media::track::remote::MediaDirection::RecvOnly => 2,
                crate::media::track::remote::MediaDirection::Inactive => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::media::MediaKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::media::MediaKind::Audio => 0,
                crate::media::MediaKind::Video => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::media::track::MediaSourceKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::media::track::MediaSourceKind::Device => 0,
                crate::media::track::MediaSourceKind::Display => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::dart::api::ApiAudioConstraints> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::dart::api::ApiAudioConstraints>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::dart::api::ApiConstrainFacingMode> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::dart::api::ApiConstrainFacingMode>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::dart::api::ApiDeviceVideoTrackConstraints>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::dart::api::ApiDeviceVideoTrackConstraints>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::dart::api::ApiDisplayVideoTrackConstraints>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::dart::api::ApiDisplayVideoTrackConstraints>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::media::constraints::ConstrainBoolean> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::media::constraints::ConstrainBoolean>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::media::constraints::ConstrainU32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::media::constraints::ConstrainU32>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::media::track::MediaSourceKind> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::media::track::MediaSourceKind>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::room::RoomCloseReason {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_closed_by_server, serializer);
        <String>::sse_encode(self.reason, serializer);
        <bool>::sse_encode(self.is_err, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use crate::api::dart::api::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{
        transform_result_dco, Lifetimeable, Lockable,
    };
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_ConnectionHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<ConnectionHandle>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_ConnectionHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<ConnectionHandle>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_Jason(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<Jason>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_Jason(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<Jason>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_LocalMediaTrack(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<LocalMediaTrack>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_LocalMediaTrack(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<LocalMediaTrack>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_MediaManagerHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<MediaManagerHandle>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_MediaManagerHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<MediaManagerHandle>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_ReconnectHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<ReconnectHandle>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_ReconnectHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<ReconnectHandle>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_RemoteMediaTrack(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<RemoteMediaTrack>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_RemoteMediaTrack(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<RemoteMediaTrack>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_increment_strong_count_RustOpaque_RoomHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<RoomHandle>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_medea_jason_rust_arc_decrement_strong_count_RustOpaque_RoomHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<RoomHandle>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
