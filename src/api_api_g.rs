#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.51.0.

use crate::api::dart::api_api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::{ffi::c_void, sync::Arc};

// Section: imports

// Section: wire functions

fn wire_touch_impl(
    port_: MessagePort,
    _track: impl Wire2Api<RustOpaque<AudioTrackConstraints>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "touch",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api__track = _track.wire2api();
            move |task_callback| Ok(touch(api__track))
        },
    )
}
fn wire_connection_handle_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(connection_handle_from_ptr(api_ptr))
        },
    )
}
fn wire_vec_local_tracks_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vec_local_tracks_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(vec_local_tracks_from_ptr(api_ptr))
        },
    )
}
fn wire_vec_local_tracks_pop_impl(
    vec: impl Wire2Api<RustOpaque<ApiWrapVec<LocalMediaTrack>>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vec_local_tracks_pop",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_vec = vec.wire2api();
            Ok(vec_local_tracks_pop(api_vec))
        },
    )
}
fn wire_vec_media_display_info_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vec_media_display_info_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(vec_media_display_info_from_ptr(api_ptr))
        },
    )
}
fn wire_vec_media_display_info_pop_impl(
    vec: impl Wire2Api<RustOpaque<ApiWrapVec<MediaDisplayInfo>>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vec_media_display_info_pop",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_vec = vec.wire2api();
            Ok(vec_media_display_info_pop(api_vec))
        },
    )
}
fn wire_vec_media_device_info_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vec_media_device_info_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(vec_media_device_info_from_ptr(api_ptr))
        },
    )
}
fn wire_vec_media_device_info_pop_impl(
    vec: impl Wire2Api<RustOpaque<ApiWrapVec<MediaDeviceInfo>>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vec_media_device_info_pop",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_vec = vec.wire2api();
            Ok(vec_media_device_info_pop(api_vec))
        },
    )
}
fn wire_audio_track_constraints_new_impl() -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "audio_track_constraints_new",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(audio_track_constraints_new()),
    )
}
fn wire_audio_track_constraints_device_id_impl(
    track: impl Wire2Api<RustOpaque<AudioTrackConstraints>> + UnwindSafe,
    device_id: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "audio_track_constraints_device_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            let api_device_id = device_id.wire2api();
            Ok(audio_track_constraints_device_id(api_track, api_device_id))
        },
    )
}
fn wire_connection_handle_on_close_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_on_close",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_f = f.wire2api();
            connection_handle_on_close(api_connection, api_f)
        },
    )
}
fn wire_connection_handle_on_remote_track_added_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_on_remote_track_added",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_f = f.wire2api();
            connection_handle_on_remote_track_added(api_connection, api_f)
        },
    )
}
fn wire_connection_handle_on_quality_score_update_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_on_quality_score_update",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_f = f.wire2api();
            connection_handle_on_quality_score_update(api_connection, api_f)
        },
    )
}
fn wire_connection_handle_get_remote_member_id_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_get_remote_member_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            connection_handle_get_remote_member_id(api_connection)
        },
    )
}
fn wire_connection_handle_enable_remote_audio_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_enable_remote_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            Ok(connection_handle_enable_remote_audio(api_connection))
        },
    )
}
fn wire_connection_handle_disable_remote_audio_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_disable_remote_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            Ok(connection_handle_disable_remote_audio(api_connection))
        },
    )
}
fn wire_connection_handle_enable_remote_video_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_enable_remote_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(connection_handle_enable_remote_video(
                api_connection,
                api_source_kind,
            ))
        },
    )
}
fn wire_connection_handle_disable_remote_video_impl(
    connection: impl Wire2Api<RustOpaque<ConnectionHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_disable_remote_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(connection_handle_disable_remote_video(
                api_connection,
                api_source_kind,
            ))
        },
    )
}
fn wire_device_video_track_constraints_new_impl(
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_new",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(device_video_track_constraints_new()),
    )
}
fn wire_device_video_track_constraints_device_id_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    device_id: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_device_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_device_id = device_id.wire2api();
            Ok(device_video_track_constraints_device_id(
                api_constraints,
                api_device_id,
            ))
        },
    )
}
fn wire_device_video_track_constraints_exact_facing_mode_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    facing_mode: impl Wire2Api<u8> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_exact_facing_mode",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_facing_mode = facing_mode.wire2api();
            Ok(device_video_track_constraints_exact_facing_mode(
                api_constraints,
                api_facing_mode,
            ))
        },
    )
}
fn wire_device_video_track_constraints_ideal_facing_mode_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    facing_mode: impl Wire2Api<u8> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_ideal_facing_mode",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_facing_mode = facing_mode.wire2api();
            Ok(device_video_track_constraints_ideal_facing_mode(
                api_constraints,
                api_facing_mode,
            ))
        },
    )
}
fn wire_device_video_track_constraints_exact_height_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    exact_height: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_exact_height",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_exact_height = exact_height.wire2api();
            Ok(device_video_track_constraints_exact_height(
                api_constraints,
                api_exact_height,
            ))
        },
    )
}
fn wire_device_video_track_constraints_ideal_height_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    ideal_height: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_ideal_height",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_ideal_height = ideal_height.wire2api();
            Ok(device_video_track_constraints_ideal_height(
                api_constraints,
                api_ideal_height,
            ))
        },
    )
}
fn wire_device_video_track_constraints_exact_width_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    exact_width: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_exact_width",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_exact_width = exact_width.wire2api();
            Ok(device_video_track_constraints_exact_width(
                api_constraints,
                api_exact_width,
            ))
        },
    )
}
fn wire_device_video_track_constraints_ideal_width_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    ideal_width: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_ideal_width",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_ideal_width = ideal_width.wire2api();
            Ok(device_video_track_constraints_ideal_width(
                api_constraints,
                api_ideal_width,
            ))
        },
    )
}
fn wire_device_video_track_constraints_height_in_range_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    min: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_height_in_range",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_min = min.wire2api();
            let api_max = max.wire2api();
            Ok(device_video_track_constraints_height_in_range(
                api_constraints,
                api_min,
                api_max,
            ))
        },
    )
}
fn wire_device_video_track_constraints_width_in_range_impl(
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
    min: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_video_track_constraints_width_in_range",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_min = min.wire2api();
            let api_max = max.wire2api();
            Ok(device_video_track_constraints_width_in_range(
                api_constraints,
                api_min,
                api_max,
            ))
        },
    )
}
fn wire_display_video_track_constraints_new_impl(
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_new",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(display_video_track_constraints_new()),
    )
}
fn wire_display_video_track_constraints_device_id_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    device_id: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_device_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_device_id = device_id.wire2api();
            Ok(display_video_track_constraints_device_id(
                api_constraints,
                api_device_id,
            ))
        },
    )
}
fn wire_display_video_track_constraints_exact_height_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    exact_height: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_exact_height",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_exact_height = exact_height.wire2api();
            Ok(display_video_track_constraints_exact_height(
                api_constraints,
                api_exact_height,
            ))
        },
    )
}
fn wire_display_video_track_constraints_ideal_height_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    ideal_height: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_ideal_height",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_ideal_height = ideal_height.wire2api();
            Ok(display_video_track_constraints_ideal_height(
                api_constraints,
                api_ideal_height,
            ))
        },
    )
}
fn wire_display_video_track_constraints_exact_width_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    exact_width: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_exact_width",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_exact_width = exact_width.wire2api();
            Ok(display_video_track_constraints_exact_width(
                api_constraints,
                api_exact_width,
            ))
        },
    )
}
fn wire_display_video_track_constraints_ideal_width_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    ideal_width: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_ideal_width",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_ideal_width = ideal_width.wire2api();
            Ok(display_video_track_constraints_ideal_width(
                api_constraints,
                api_ideal_width,
            ))
        },
    )
}
fn wire_display_video_track_constraints_ideal_frame_rate_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    ideal_frame_rate: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_ideal_frame_rate",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_ideal_frame_rate = ideal_frame_rate.wire2api();
            Ok(display_video_track_constraints_ideal_frame_rate(
                api_constraints,
                api_ideal_frame_rate,
            ))
        },
    )
}
fn wire_display_video_track_constraints_exact_frame_rate_impl(
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
    exact_frame_rate: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "display_video_track_constraints_exact_frame_rate",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_constraints = constraints.wire2api();
            let api_exact_frame_rate = exact_frame_rate.wire2api();
            Ok(display_video_track_constraints_exact_frame_rate(
                api_constraints,
                api_exact_frame_rate,
            ))
        },
    )
}
fn wire_jason_new_impl() -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "jason_new",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(jason_new()),
    )
}
fn wire_jason_init_room_impl(
    jason: impl Wire2Api<RustOpaque<Jason>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "jason_init_room",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_jason = jason.wire2api();
            Ok(jason_init_room(api_jason))
        },
    )
}
fn wire_jason_media_manager_impl(
    jason: impl Wire2Api<RustOpaque<Jason>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "jason_media_manager",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_jason = jason.wire2api();
            Ok(jason_media_manager(api_jason))
        },
    )
}
fn wire_jason_close_room_impl(
    jason: impl Wire2Api<RustOpaque<Jason>> + UnwindSafe,
    room_to_delete: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "jason_close_room",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_jason = jason.wire2api();
            let api_room_to_delete = room_to_delete.wire2api();
            Ok(jason_close_room(api_jason, api_room_to_delete))
        },
    )
}
fn wire_jason_dispose_impl(
    jason: impl Wire2Api<RustOpaque<Jason>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "jason_dispose",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_jason = jason.wire2api();
            Ok(jason_dispose(api_jason))
        },
    )
}
fn wire_local_media_track_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "local_media_track_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(local_media_track_from_ptr(api_ptr))
        },
    )
}
fn wire_local_media_track_get_track_impl(
    track: impl Wire2Api<RustOpaque<LocalMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "local_media_track_get_track",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(local_media_track_get_track(api_track))
        },
    )
}
fn wire_local_media_track_kind_impl(
    track: impl Wire2Api<RustOpaque<LocalMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "local_media_track_kind",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(local_media_track_kind(api_track))
        },
    )
}
fn wire_local_media_track_media_source_kind_impl(
    track: impl Wire2Api<RustOpaque<LocalMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "local_media_track_media_source_kind",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(local_media_track_media_source_kind(api_track))
        },
    )
}
fn wire_media_device_info_device_id_impl(
    media_device: impl Wire2Api<RustOpaque<MediaDeviceInfo>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_device_info_device_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_device = media_device.wire2api();
            Ok(media_device_info_device_id(api_media_device))
        },
    )
}
fn wire_media_device_info_kind_impl(
    media_device: impl Wire2Api<RustOpaque<MediaDeviceInfo>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_device_info_kind",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_device = media_device.wire2api();
            Ok(media_device_info_kind(api_media_device))
        },
    )
}
fn wire_media_device_info_label_impl(
    media_device: impl Wire2Api<RustOpaque<MediaDeviceInfo>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_device_info_label",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_device = media_device.wire2api();
            Ok(media_device_info_label(api_media_device))
        },
    )
}
fn wire_media_device_info_group_id_impl(
    media_device: impl Wire2Api<RustOpaque<MediaDeviceInfo>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_device_info_group_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_device = media_device.wire2api();
            Ok(media_device_info_group_id(api_media_device))
        },
    )
}
fn wire_media_display_info_device_id_impl(
    media_display: impl Wire2Api<RustOpaque<MediaDisplayInfo>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_display_info_device_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_display = media_display.wire2api();
            Ok(media_display_info_device_id(api_media_display))
        },
    )
}
fn wire_media_display_info_title_impl(
    media_display: impl Wire2Api<RustOpaque<MediaDisplayInfo>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_display_info_title",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_display = media_display.wire2api();
            Ok(media_display_info_title(api_media_display))
        },
    )
}
fn wire_media_manager_handle_init_local_tracks_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
    caps: impl Wire2Api<RustOpaque<MediaStreamSettings>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_init_local_tracks",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            let api_caps = caps.wire2api();
            Ok(media_manager_handle_init_local_tracks(
                api_manager,
                api_caps,
            ))
        },
    )
}
fn wire_media_manager_handle_enumerate_devices_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_enumerate_devices",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            Ok(media_manager_handle_enumerate_devices(api_manager))
        },
    )
}
fn wire_media_manager_handle_enumerate_displays_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_enumerate_displays",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            Ok(media_manager_handle_enumerate_displays(api_manager))
        },
    )
}
fn wire_media_manager_handle_set_output_audio_id_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
    device_id: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_set_output_audio_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            let api_device_id = device_id.wire2api();
            Ok(media_manager_handle_set_output_audio_id(
                api_manager,
                api_device_id,
            ))
        },
    )
}
fn wire_media_manager_handle_set_microphone_volume_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
    level: impl Wire2Api<i64> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_set_microphone_volume",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            let api_level = level.wire2api();
            Ok(media_manager_handle_set_microphone_volume(
                api_manager,
                api_level,
            ))
        },
    )
}
fn wire_media_manager_handle_microphone_volume_is_available_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_microphone_volume_is_available",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            Ok(media_manager_handle_microphone_volume_is_available(
                api_manager,
            ))
        },
    )
}
fn wire_media_manager_handle_microphone_volume_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_microphone_volume",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            Ok(media_manager_handle_microphone_volume(api_manager))
        },
    )
}
fn wire_media_manager_handle_on_device_change_impl(
    manager: impl Wire2Api<RustOpaque<MediaManagerHandle>> + UnwindSafe,
    cb: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_manager_handle_on_device_change",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_manager = manager.wire2api();
            let api_cb = cb.wire2api();
            media_manager_handle_on_device_change(api_manager, api_cb)
        },
    )
}
fn wire_media_stream_settings_new_impl() -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_stream_settings_new",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(media_stream_settings_new()),
    )
}
fn wire_media_stream_settings_audio_impl(
    media_stream_settings: impl Wire2Api<RustOpaque<MediaStreamSettings>>
        + UnwindSafe,
    constraints: impl Wire2Api<RustOpaque<AudioTrackConstraints>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_stream_settings_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_stream_settings = media_stream_settings.wire2api();
            let api_constraints = constraints.wire2api();
            Ok(media_stream_settings_audio(
                api_media_stream_settings,
                api_constraints,
            ))
        },
    )
}
fn wire_media_stream_settings_device_video_impl(
    media_stream_settings: impl Wire2Api<RustOpaque<MediaStreamSettings>>
        + UnwindSafe,
    constraints: impl Wire2Api<RustOpaque<DeviceVideoTrackConstraints>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_stream_settings_device_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_stream_settings = media_stream_settings.wire2api();
            let api_constraints = constraints.wire2api();
            Ok(media_stream_settings_device_video(
                api_media_stream_settings,
                api_constraints,
            ))
        },
    )
}
fn wire_media_stream_settings_display_video_impl(
    media_stream_settings: impl Wire2Api<RustOpaque<MediaStreamSettings>>
        + UnwindSafe,
    constraints: impl Wire2Api<RustOpaque<DisplayVideoTrackConstraints>>
        + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "media_stream_settings_display_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_media_stream_settings = media_stream_settings.wire2api();
            let api_constraints = constraints.wire2api();
            Ok(media_stream_settings_display_video(
                api_media_stream_settings,
                api_constraints,
            ))
        },
    )
}
fn wire_reconnect_handle_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "reconnect_handle_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(reconnect_handle_from_ptr(api_ptr))
        },
    )
}
fn wire_reconnect_handle_reconnect_with_delay_impl(
    reconnect_handle: impl Wire2Api<RustOpaque<ReconnectHandle>> + UnwindSafe,
    delay_ms: impl Wire2Api<i64> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "reconnect_handle_reconnect_with_delay",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_reconnect_handle = reconnect_handle.wire2api();
            let api_delay_ms = delay_ms.wire2api();
            Ok(reconnect_handle_reconnect_with_delay(
                api_reconnect_handle,
                api_delay_ms,
            ))
        },
    )
}
fn wire_reconnect_handle_reconnect_with_backoff_impl(
    reconnect_handle: impl Wire2Api<RustOpaque<ReconnectHandle>> + UnwindSafe,
    starting_delay: impl Wire2Api<i64> + UnwindSafe,
    multiplier: impl Wire2Api<f64> + UnwindSafe,
    max_delay: impl Wire2Api<u32> + UnwindSafe,
    max_elapsed_time_ms: impl Wire2Api<Option<u32>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "reconnect_handle_reconnect_with_backoff",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_reconnect_handle = reconnect_handle.wire2api();
            let api_starting_delay = starting_delay.wire2api();
            let api_multiplier = multiplier.wire2api();
            let api_max_delay = max_delay.wire2api();
            let api_max_elapsed_time_ms = max_elapsed_time_ms.wire2api();
            Ok(reconnect_handle_reconnect_with_backoff(
                api_reconnect_handle,
                api_starting_delay,
                api_multiplier,
                api_max_delay,
                api_max_elapsed_time_ms,
            ))
        },
    )
}
fn wire_remote_media_track_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(remote_media_track_from_ptr(api_ptr))
        },
    )
}
fn wire_remote_media_track_get_track_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_get_track",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(remote_media_track_get_track(api_track))
        },
    )
}
fn wire_remote_media_track_on_muted_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_on_muted",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            let api_f = f.wire2api();
            Ok(remote_media_track_on_muted(api_track, api_f))
        },
    )
}
fn wire_remote_media_track_on_unmuted_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_on_unmuted",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            let api_f = f.wire2api();
            Ok(remote_media_track_on_unmuted(api_track, api_f))
        },
    )
}
fn wire_remote_media_track_on_stopped_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_on_stopped",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            let api_f = f.wire2api();
            Ok(remote_media_track_on_stopped(api_track, api_f))
        },
    )
}
fn wire_remote_media_track_on_media_direction_changed_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
    f: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_on_media_direction_changed",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            let api_f = f.wire2api();
            Ok(remote_media_track_on_media_direction_changed(
                api_track, api_f,
            ))
        },
    )
}
fn wire_remote_media_track_muted_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_muted",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(remote_media_track_muted(api_track))
        },
    )
}
fn wire_remote_media_track_kind_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_kind",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(remote_media_track_kind(api_track))
        },
    )
}
fn wire_remote_media_track_media_source_kind_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_media_source_kind",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(remote_media_track_media_source_kind(api_track))
        },
    )
}
fn wire_remote_media_track_media_direction_impl(
    track: impl Wire2Api<RustOpaque<RemoteMediaTrack>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remote_media_track_media_direction",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_track = track.wire2api();
            Ok(remote_media_track_media_direction(api_track))
        },
    )
}
fn wire_room_close_reason_from_ptr_impl(
    ptr: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_close_reason_from_ptr",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.wire2api();
            Ok(room_close_reason_from_ptr(api_ptr))
        },
    )
}
fn wire_room_close_reason_reason_impl(
    room_close_reason: impl Wire2Api<RustOpaque<RoomCloseReason>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_close_reason_reason",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_close_reason = room_close_reason.wire2api();
            Ok(room_close_reason_reason(api_room_close_reason))
        },
    )
}
fn wire_room_close_reason_is_closed_by_server_impl(
    room_close_reason: impl Wire2Api<RustOpaque<RoomCloseReason>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_close_reason_is_closed_by_server",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_close_reason = room_close_reason.wire2api();
            Ok(room_close_reason_is_closed_by_server(api_room_close_reason))
        },
    )
}
fn wire_room_close_reason_is_err_impl(
    room_close_reason: impl Wire2Api<RustOpaque<RoomCloseReason>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_close_reason_is_err",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_close_reason = room_close_reason.wire2api();
            Ok(room_close_reason_is_err(api_room_close_reason))
        },
    )
}
fn wire_room_handle_join_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    token: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_join",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_token = token.wire2api();
            Ok(room_handle_join(api_room_handle, api_token))
        },
    )
}
fn wire_room_handle_set_local_media_settings_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    settings: impl Wire2Api<RustOpaque<MediaStreamSettings>> + UnwindSafe,
    stop_first: impl Wire2Api<bool> + UnwindSafe,
    rollback_on_fail: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_set_local_media_settings",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_settings = settings.wire2api();
            let api_stop_first = stop_first.wire2api();
            let api_rollback_on_fail = rollback_on_fail.wire2api();
            Ok(room_handle_set_local_media_settings(
                api_room_handle,
                api_settings,
                api_stop_first,
                api_rollback_on_fail,
            ))
        },
    )
}
fn wire_room_handle_mute_audio_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_mute_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            Ok(room_handle_mute_audio(api_room_handle))
        },
    )
}
fn wire_room_handle_unmute_audio_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_unmute_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            Ok(room_handle_unmute_audio(api_room_handle))
        },
    )
}
fn wire_room_handle_enable_audio_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_enable_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            Ok(room_handle_enable_audio(api_room_handle))
        },
    )
}
fn wire_room_handle_disable_audio_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_disable_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            Ok(room_handle_disable_audio(api_room_handle))
        },
    )
}
fn wire_room_handle_mute_video_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_mute_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(room_handle_mute_video(api_room_handle, api_source_kind))
        },
    )
}
fn wire_room_handle_unmute_video_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_unmute_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(room_handle_unmute_video(api_room_handle, api_source_kind))
        },
    )
}
fn wire_room_handle_enable_video_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_enable_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(room_handle_enable_video(api_room_handle, api_source_kind))
        },
    )
}
fn wire_room_handle_disable_video_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_disable_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(room_handle_disable_video(api_room_handle, api_source_kind))
        },
    )
}
fn wire_room_handle_enable_remote_audio_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_enable_remote_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            Ok(room_handle_enable_remote_audio(api_room_handle))
        },
    )
}
fn wire_room_handle_disable_remote_audio_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_disable_remote_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            Ok(room_handle_disable_remote_audio(api_room_handle))
        },
    )
}
fn wire_room_handle_enable_remote_video_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_enable_remote_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(room_handle_enable_remote_video(
                api_room_handle,
                api_source_kind,
            ))
        },
    )
}
fn wire_room_handle_disable_remote_video_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_disable_remote_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(room_handle_disable_remote_video(
                api_room_handle,
                api_source_kind,
            ))
        },
    )
}
fn wire_room_handle_on_new_connection_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    cb: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_on_new_connection",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_cb = cb.wire2api();
            room_handle_on_new_connection(api_room_handle, api_cb)
        },
    )
}
fn wire_room_handle_on_close_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    cb: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_on_close",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_cb = cb.wire2api();
            room_handle_on_close(api_room_handle, api_cb)
        },
    )
}
fn wire_room_handle_on_local_track_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    cb: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_on_local_track",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_cb = cb.wire2api();
            room_handle_on_local_track(api_room_handle, api_cb)
        },
    )
}
fn wire_room_handle_on_connection_loss_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    cb: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_on_connection_loss",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_cb = cb.wire2api();
            room_handle_on_connection_loss(api_room_handle, api_cb)
        },
    )
}
fn wire_room_handle_on_failed_local_media_impl(
    room_handle: impl Wire2Api<RustOpaque<RoomHandle>> + UnwindSafe,
    cb: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "room_handle_on_failed_local_media",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_room_handle = room_handle.wire2api();
            let api_cb = cb.wire2api();
            room_handle_on_failed_local_media(api_room_handle, api_cb)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<u32> for *mut u32 {
    fn wire2api(self) -> u32 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<u8> for *mut u8 {
    fn wire2api(self) -> u8 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "api_api_g.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
