#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.

use crate::api::dart::connection_handle_api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::sync::Mutex;
use std::sync::RwLock;

// Section: imports

// Section: wire functions

fn wire_connection_handle_on_close_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
    f: impl Wire2Api<Opaque<ConnectionHandleDH>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_on_close",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_f = f.wire2api();
            connection_handle_on_close(api_connection, api_f)
        },
    )
}
fn wire_connection_handle_on_remote_track_added_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
    f: impl Wire2Api<Opaque<ConnectionHandleDH>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_on_remote_track_added",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_f = f.wire2api();
            connection_handle_on_remote_track_added(api_connection, api_f)
        },
    )
}
fn wire_connection_handle_on_quality_score_update_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
    f: impl Wire2Api<Opaque<ConnectionHandleDH>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_on_quality_score_update",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_f = f.wire2api();
            connection_handle_on_quality_score_update(api_connection, api_f)
        },
    )
}
fn wire_connection_handle_get_remote_member_id_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_get_remote_member_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            connection_handle_get_remote_member_id(api_connection)
        },
    )
}
fn wire_connection_handle_enable_remote_audio_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_enable_remote_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            Ok(connection_handle_enable_remote_audio(api_connection))
        },
    )
}
fn wire_connection_handle_disable_remote_audio_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_disable_remote_audio",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            Ok(connection_handle_disable_remote_audio(api_connection))
        },
    )
}
fn wire_connection_handle_enable_remote_video_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_enable_remote_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(connection_handle_enable_remote_video(
                api_connection,
                api_source_kind,
            ))
        },
    )
}
fn wire_connection_handle_disable_remote_video_impl(
    connection: impl Wire2Api<Opaque<ConnectionHandle>> + UnwindSafe,
    source_kind: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "connection_handle_disable_remote_video",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_connection = connection.wire2api();
            let api_source_kind = source_kind.wire2api();
            Ok(connection_handle_disable_remote_video(
                api_connection,
                api_source_kind,
            ))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: deallocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for *mut u8 {
    fn wire2api(self) -> u8 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}
// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "connection_handle_api_g.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
